!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=13)}([function(e,t,n){"use strict";var r=n(5),i=Object.prototype.toString;function o(e){return"[object Array]"===i.call(e)}function a(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===i.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:a,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)l(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,i=arguments.length;r<i;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,(function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Buttons=void 0;var i=r(n(16)),o=n(3),a=r(n(4)),s=n(2),u=function(){function e(){this.tables=s.tables,this.errorMessage="Could not fetch course data. Check that the url and api key are correct."}return e.prototype.showElement=function(e,t){t?i.default("#"+e).css("display",""):i.default("#"+e).css("display","none")},e.prototype.switchPage=function(e,t){this.showElement(e,!1),this.showElement(t,!0)},e.prototype.showLoading=function(e){e?(i.default("#addButton").prop("disabled",!0),i.default("#addButton").html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>')):(i.default("#addButton").prop("disabled",!1),i.default("#addButton").html("Add"))},e.prototype.clearRequiredParameterOptions=function(){i.default("#requiredParameterSelector").html("")},e.prototype.addOption=function(e,t,n){var r=document.createElement("option");r.innerText=e,r.setAttribute("value",t),r.setAttribute("id",t),n.appendChild(r)},e.prototype.addTableOptions=function(e){var t=i.default("#apiSelector")[0];for(var n in e)if(n in e){var r=e[n].table.alias,o=e[n].table.id;this.addOption(r,o,t)}},e.prototype.editTable=function(e){i.default("#tableName").val(i.default("#"+e+" .title").text()),i.default("#edit-section").attr("currentTable",e);var t=i.default("#"+e).attr("data-api"),n=i.default("#"+e).attr("data-require"),r=decodeURIComponent(i.default("#"+e).attr("data-optional"));if("parameters"in s.tables[t]&&(this.showElement("optionalParameterSection",!0),this.addOptionalParameters(t),""!=r))for(var o=0,a=r.split("&");o<a.length;o++){var u=a[o].split("="),l="filters[]"==u[0]?"filters":u[0],c=u[1];i.default("#input-"+l).val(c)}if("requiredParameter"in s.tables[t]){var d=s.tables[t].requiredParameter.path,p=i.default("#url").val();this.clearRequiredParameterOptions(),this.showElement("requiredParameter",!0),i.default("#requiredParameterTitle").text(s.tables[t].requiredParameter.title);try{this.getRequiredParameterData(new URL(d,p),t,i.default("#apiKey").val(),n)}catch(e){console.log(e),this.showErrorMessage(this.errorMessage,5),this.showLoading(!1)}}else this.showElement("requiredParameter",!1),this.switchPage("api-section","edit-section")},e.prototype.deleteTable=function(e){var t=i.default("#apiList li").length;i.default("#"+e).remove();for(var n=parseInt(e)+1;n<t;n++){var r=n-1;i.default("#"+n+" .deleteButton").attr("onclick","deleteTable("+r+")"),i.default("#"+n+" .editButton").attr("onclick","editTable("+r+")"),i.default("#"+n).attr("id",r)}i.default("#apiList li").length<=0&&this.showElement("emptyApiListMessage",!0)},e.prototype.showErrorMessage=function(e,t){var n=this;i.default("#errorText").html(e),this.showElement("errorCard",!0),setTimeout((function(){n.showElement("errorCard",!1),i.default("#errorText").html("")}),1e3*t)},e.prototype.addOptionalParameters=function(e){for(var t=0,n=s.tables[e].parameters;t<n.length;t++){var r=n[t],o="";if(["options","filters"].includes(r.type)){for(var a=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(d=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+d+'">'+r.name+"</label>","</div>",'<select class="custom-select" id="input-'+d+'">','<option value="nosel" selected>'+r.default+"</option>"],u=0,l=r.options;u<l.length;u++){var c=l[u];a.push('<option value="'+c.value+'">'+c.name+"</option>")}a.push.apply(a,["</select>","</div>"]),o=a.join("\n")}else if("boolean"==r.type){o=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(d=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+d+'">'+r.name+"</label>","</div>",'<select class="custom-select" id="input-'+d+'">','<option selected value="false">False</option>','<option value="true">True</option>',"</select>","</div>"].join("\n")}else if("date"==r.type){o=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(d=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+d+'">'+r.name+"</label>","</div>",'<input type="date" class="form-control" id="input-'+d+'">','<div class="input-group-append">','<button class="btn btn-outline-danger" type="button" onclick="clearValue(\'input-'+d+"')\">Clear</button>","</div>","</div>"].join("\n")}else if("string"==r.type){var d;o=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(d=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+d+'">'+r.name+"</label>","</div>",'<input type="text" class="form-control" placeholder="'+r.placeholder+'" id="input-'+d+'">',"</div>"].join("\n")}i.default("#optionalParameterList").append(o)}},e.prototype.getRequiredParameterData=function(e,t,n,r){var u=this,l=new o.Bridge(e,n).setUrl();a.default({method:"get",url:l.apiCall,headers:l.headers}).then((function(e){for(var o=e.data,a=s.tables[t],l=o[a.requiredParameter.data],c=a.requiredParameter.nameCol,d=a.requiredParameter.valCol,p=i.default("#requiredParameterSelector")[0],f=0,h=l.length;f<h;f++)u.addOption(l[f][c],l[f][d],p);"next"in o.meta?u.getRequiredParameterData(o.meta.next,t,n,r):(null!=r&&i.default("#requiredParameterSelector").val(r),u.switchPage("api-section","edit-section"),u.showLoading(!1))})).catch((function(e){console.log(e),u.showLoading(!1),u.showErrorMessage(u.errorMessage,5)}))},e}();t.Buttons=u},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.tables=void 0;var i=n(34),o=n(40),a=n(41),s=r(r(r({},i.courseTemplates),o.listEnrollments),a.users);t.tables=s},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Bridge=void 0;var o=i(n(4)),a=function(){function e(e,t){this.apiCall=e,this.apiKey=t}return e.prototype.setUrl=function(e,t){var n;return void 0===e&&(e=this.apiCall),void 0===t&&(t=this.apiKey),n={},{apiCall:new URL(e),headers:r(r({},{Authorization:t,"Content-Type":"application/json",Accept:"application/json"}),n)}},e.prototype.addRow=function(e,t,n){for(var r=t[e.tableInfo.id],i=n[r.data],o=[],a=0,s=i.length;a<s;a++){for(var u={},l=function(e){if("linkedSource"in e){var t=e.id,r=e.linkedSource,o=e.linkedId,s=i[a].links[r].id,l=i[a].links[r].type,c=n.linked[l].filter((function(e){return e.id===s}));1==c.length?u[t]=c[0][o]:u[t]=null}else if("parent_id"in e){var d=e.id,p=e.parent_id,f=e.sub_id;p in i[a]?u[d]=i[a][p][f]:u[d]=null}else{d=e.id;u[d]=i[a][d]}},c=0,d=r.table.columns;c<d.length;c++){l(d[c])}o.push(u)}e.appendRows(o)},e.prototype.performApiCall=function(e,t,n,r,i){var a=this,s=this.setUrl(n,i),u={method:"get",url:s.apiCall,headers:s.headers};o.default(u).then((function(n){var i=n.data;a.addRow(e,r,i),"next"in i.meta?a.performApiCall(e,t,i.meta.next,r):t()})).catch((function(e){console.log(e),t()}))},e}();t.Bridge=a},function(e,t,n){e.exports=n(17)},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))})))})),o=a.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(0),i=n(23),o={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=n(9)),s),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(o)})),e.exports=u}).call(this,n(22))},function(e,t,n){"use strict";var r=n(0),i=n(24),o=n(6),a=n(26),s=n(29),u=n(30),l=n(10);e.exports=function(e){return new Promise((function(t,c){var d=e.data,p=e.headers;r.isFormData(d)&&delete p["Content-Type"];var f=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";p.Authorization="Basic "+btoa(h+":"+m)}var y=a(e.baseURL,e.url);if(f.open(e.method.toUpperCase(),o(y,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in f?s(f.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:n,config:e,request:f};i(t,c,r),f=null}},f.onabort=function(){f&&(c(l("Request aborted",e,"ECONNABORTED",f)),f=null)},f.onerror=function(){c(l("Network Error",e,null,f)),f=null},f.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),c(l(t,e,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var v=n(31),g=(e.withCredentials||u(y))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;g&&(p[e.xsrfHeaderName]=g)}if("setRequestHeader"in f&&r.forEach(p,(function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete p[t]:f.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){f&&(f.abort(),c(e),f=null)})),void 0===d&&(d=null),f.send(d)}))}},function(e,t,n){"use strict";var r=n(25);e.exports=function(e,t,n,i,o){var a=new Error(e);return r(a,t,n,i,o)}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){t=t||{};var n={},i=["url","method","params","data"],o=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(i,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(o,(function(i){r.isObject(t[i])?n[i]=r.deepMerge(e[i],t[i]):void 0!==t[i]?n[i]=t[i]:r.isObject(e[i])?n[i]=r.deepMerge(e[i]):void 0!==e[i]&&(n[i]=e[i])})),r.forEach(a,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var s=i.concat(o).concat(a),u=Object.keys(t).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(u,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(14);$(document).ready((function(){window.clearValue=function(e){$("#"+e).val("")},new r.AddTableOptions,new r.Add,new r.EditList,new r.DeleteList,new r.EditDone,new r.ResetCredentials,new r.Credentials,new r.Submit}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Submit=t.ResetCredentials=t.EditList=t.EditDone=t.DeleteList=t.Credentials=t.Buttons=t.AddTableOptions=t.Add=void 0;var r=n(15);Object.defineProperty(t,"Add",{enumerable:!0,get:function(){return r.Add}});var i=n(42);Object.defineProperty(t,"AddTableOptions",{enumerable:!0,get:function(){return i.AddTableOptions}});var o=n(1);Object.defineProperty(t,"Buttons",{enumerable:!0,get:function(){return o.Buttons}});var a=n(43);Object.defineProperty(t,"Credentials",{enumerable:!0,get:function(){return a.Credentials}});var s=n(44);Object.defineProperty(t,"DeleteList",{enumerable:!0,get:function(){return s.DeleteList}});var u=n(45);Object.defineProperty(t,"EditDone",{enumerable:!0,get:function(){return u.EditDone}});var l=n(46);Object.defineProperty(t,"EditList",{enumerable:!0,get:function(){return l.EditList}});var c=n(47);Object.defineProperty(t,"ResetCredentials",{enumerable:!0,get:function(){return c.ResetCredentials}});var d=n(48);Object.defineProperty(t,"Submit",{enumerable:!0,get:function(){return d.Submit}})},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Add=void 0;var o=function(e){function t(){var t=e.call(this)||this;return $("#addButton").on("click",(function(){t.api=$("#apiSelector").val(),$("#tableName").val(t.tables[t.api].table.alias),$("#edit-section").attr("currentTable",$("#apiList li").length),t.parameters(t.api,t.tables),t.requiredParameter(t.api,t.tables)})),t}return i(t,e),t.prototype.parameters=function(e,t){"parameters"in t[e]&&(this.showElement("optionalParameterSection",!0),this.addOptionalParameters(e))},t.prototype.requiredParameter=function(e,t){var n,r,i;if("requiredParameter"in t[e]){n=t[e].requiredParameter.path,r=$("#url").val(),i=t[e].requiredParameter.title,this.showLoading(!0),this.clearRequiredParameterOptions(),this.showElement("requiredParameter",!0),$("#requiredParameterTitle").text(i);try{this.getRequiredParameterData(new URL(n,r),e,$("#apiKey").val(),void 0)}catch(e){console.log(e),this.showErrorMessage(this.errorMessage,5),this.showLoading(!1)}}else this.showElement("requiredParameter",!1),this.switchPage("api-section","edit-section")},t}(n(1).Buttons);t.Add=o},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.5.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,u=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},l=o.push,c=o.indexOf,d={},p=d.toString,f=d.hasOwnProperty,h=f.toString,m=h.call(Object),y={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},g=function(e){return null!=e&&e===e.window},b=n.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function T(e,t,n){var r,i,o=(n=n||b).createElement("script");if(o.text=e,t)for(r in x)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function _(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var C="3.5.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector",w=function(e,t){return new w.fn.init(e,t)};function E(e){var t=!!e&&"length"in e&&e.length,n=_(e);return!v(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}w.fn=w.prototype={jquery:C,constructor:w,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(w.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(w.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||w.isPlainObject(n)?n:{},i=!1,a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+(C+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=a(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&h.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){T(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(E(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(E(Object(e))?w.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(E(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return u(a)},guid:1,support:y}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=o[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var A=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,r,i,o,a,s,u,l,c,d,p,f,h,m,y,v,g,b,x="sizzle"+1*new Date,T=e.document,_=0,C=0,w=ue(),E=ue(),A=ue(),S=ue(),O=function(e,t){return e===t&&(d=!0),0},D={}.hasOwnProperty,P=[],N=P.pop,j=P.push,L=P.push,k=P.slice,q=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",B="[\\x20\\t\\r\\n\\f]",I="(?:\\\\[\\da-fA-F]{1,6}"+B+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\["+B+"*("+I+")(?:"+B+"*([*^$|!~]?=)"+B+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+B+"*\\]",$=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",H=new RegExp(B+"+","g"),U=new RegExp("^"+B+"+|((?:^|[^\\\\])(?:\\\\.)*)"+B+"+$","g"),F=new RegExp("^"+B+"*,"+B+"*"),z=new RegExp("^"+B+"*([>+~]|"+B+")"+B+"*"),W=new RegExp(B+"|>"),V=new RegExp($),X=new RegExp("^"+I+"$"),J={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+B+"*(even|odd|(([+-]|)(\\d*)n|)"+B+"*(?:([+-]|)"+B+"*(\\d+)|))"+B+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+B+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+B+"*((?:-\\d)?\\d*)"+B+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+B+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},ae=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{L.apply(P=k.call(T.childNodes),T.childNodes),P[T.childNodes.length].nodeType}catch(e){L={apply:P.length?function(e,t){j.apply(e,k.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,l,c,d,h,v,g=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&(p(t),t=t||f,m)){if(11!==T&&(d=Z.exec(e)))if(o=d[1]){if(9===T){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(g&&(l=g.getElementById(o))&&b(t,l)&&l.id===o)return r.push(l),r}else{if(d[2])return L.apply(r,t.getElementsByTagName(e)),r;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!y||!y.test(e))&&(1!==T||"object"!==t.nodeName.toLowerCase())){if(v=e,g=t,1===T&&(W.test(e)||z.test(e))){for((g=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(re,ie):t.setAttribute("id",c=x)),s=(h=a(e)).length;s--;)h[s]=(c?"#"+c:":scope")+" "+be(h[s]);v=h.join(",")}try{return L.apply(r,g.querySelectorAll(v)),r}catch(t){S(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return u(e.replace(U,"$1"),t,r,i)}function ue(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function le(e){return e[x]=!0,e}function ce(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ye(e){return le((function(t){return t=+t,le((function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!K.test(t||n&&n.nodeName||"HTML")},p=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:T;return a!=f&&9===a.nodeType&&a.documentElement?(h=(f=a).documentElement,m=!o(f),T!=f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=ce((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=G.test(f.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=G.test(f.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+B+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\["+B+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+x+"-]").length||y.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||y.push("\\["+B+"*name"+B+"*="+B+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||y.push(".#.+[+~]"),e.querySelectorAll("\\\f"),y.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+B+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")}))),(n.matchesSelector=G.test(g=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),v.push("!=",$)})),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=G.test(h.compareDocumentPosition),b=t||G.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==T&&b(T,e)?-1:t==f||t.ownerDocument==T&&b(T,t)?1:c?q(c,e)-q(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==f?-1:t==f?1:i?-1:o?1:c?q(c,e)-q(c,t):0;if(i===o)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?pe(a[r],s[r]):a[r]==T?-1:s[r]==T?1:0},f):f},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&m&&!S[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=g.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){S(t,!0)}return se(t,f,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=f&&p(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=f&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&D.call(r.attrHandle,t.toLowerCase())?i(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(O),d){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return c=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:le,match:J,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return J.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=w[e+" "];return t||(t=new RegExp("(^|"+B+")"+e+"("+B+"|$)"))&&w(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,d,p,f,h,m=o!==a?"nextSibling":"previousSibling",y=t.parentNode,v=s&&t.nodeName.toLowerCase(),g=!u&&!s,b=!1;if(y){if(o){for(;m;){for(p=t;p=p[m];)if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&g){for(b=(f=(l=(c=(d=(p=y)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===_&&l[1])&&l[2],p=f&&y.childNodes[f];p=++f&&p&&p[m]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[_,f,b];break}}else if(g&&(b=f=(l=(c=(d=(p=t)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===_&&l[1]),!1===b)for(;(p=++f&&p&&p[m]||(b=f=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(g&&((c=(d=p[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[_,b]),p!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[x]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=q(e,o[a])]=!(n[r]=o[a])})):function(e){return i(e,0,n)}):i}},pseudos:{not:le((function(e){var t=[],n=[],r=s(e.replace(U,"$1"));return r[x]?le((function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return se(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:le((function(e){return X.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ye((function(){return[0]})),last:ye((function(e,t){return[t-1]})),eq:ye((function(e,t,n){return[n<0?n+t:n]})),even:ye((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ye((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ye((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ye((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ge(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,d,p=[_,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===_&&l[1]===s)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function Te(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function _e(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(e,t,n,r,i,o){return r&&!r[x]&&(r=Ce(r)),i&&!i[x]&&(i=Ce(i,o)),le((function(o,a,s,u){var l,c,d,p=[],f=[],h=a.length,m=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),y=!e||!o&&t?m:_e(m,p,e,s,u),v=n?i||(o?e:h||r)?[]:a:y;if(n&&n(y,v,s,u),r)for(l=_e(v,f),r(l,[],s,u),c=l.length;c--;)(d=l[c])&&(v[f[c]]=!(y[f[c]]=d));if(o){if(i||e){if(i){for(l=[],c=v.length;c--;)(d=v[c])&&l.push(y[c]=d);i(null,v=[],l,u)}for(c=v.length;c--;)(d=v[c])&&(l=i?q(o,d):p[c])>-1&&(o[l]=!(a[l]=d))}}else v=_e(v===a?v.splice(h,v.length):v),i?i(null,a,v,u):L.apply(a,v)}))}function we(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,c=xe((function(e){return e===t}),s,!0),d=xe((function(e){return q(t,e)>-1}),s,!0),p=[function(e,n,r){var i=!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):d(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[xe(Te(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[x]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return Ce(u>1&&Te(p),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(U,"$1"),n,u<i&&we(e.slice(u,i)),i<o&&we(e=e.slice(i)),i<o&&be(e))}p.push(n)}return Te(p)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,a=se.tokenize=function(e,t){var n,i,o,a,s,u,l,c=E[e+" "];if(c)return t?0:c.slice(0);for(s=e,u=[],l=r.preFilter;s;){for(a in n&&!(i=F.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=z.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(U," ")}),s=s.slice(n.length)),r.filter)!(i=J[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):E(e,u).slice(0)},s=se.compile=function(e,t){var n,i=[],o=[],s=A[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=we(t[n]))[x]?i.push(s):o.push(s);(s=A(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,c){var d,h,y,v=0,g="0",b=o&&[],x=[],T=l,C=o||i&&r.find.TAG("*",c),w=_+=null==T?1:Math.random()||.1,E=C.length;for(c&&(l=a==f||a||c);g!==E&&null!=(d=C[g]);g++){if(i&&d){for(h=0,a||d.ownerDocument==f||(p(d),s=!m);y=e[h++];)if(y(d,a||f,s)){u.push(d);break}c&&(_=w)}n&&((d=!y&&d)&&v--,o&&b.push(d))}if(v+=g,n&&g!==v){for(h=0;y=t[h++];)y(b,x,a,s);if(o){if(v>0)for(;g--;)b[g]||x[g]||(x[g]=N.call(u));x=_e(x)}L.apply(u,x),c&&!o&&x.length>0&&v+t.length>1&&se.uniqueSort(u)}return c&&(_=w,l=T),b};return n?le(o):o}(o,i))).selector=e}return s},u=se.select=function(e,t,n,i){var o,u,l,c,d,p="function"==typeof e&&e,f=!i&&a(e=p.selector||e);if(n=n||[],1===f.length){if((u=f[0]=f[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&m&&r.relative[u[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=J.needsContext.test(e)?0:u.length;o--&&(l=u[o],!r.relative[c=l.type]);)if((d=r.find[c])&&(i=d(l.matches[0].replace(te,ne),ee.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&be(u)))return L.apply(n,i),n;break}}return(p||s(e,f))(i,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=x.split("").sort(O).join("")===x,n.detectDuplicates=!!d,p(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de(R,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);w.find=A,w.expr=A.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=A.uniqueSort,w.text=A.getText,w.isXMLDoc=A.isXML,w.contains=A.contains,w.escapeSelector=A.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&w(e).is(n))break;r.push(e)}return r},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=w.expr.match.needsContext;function P(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return v(t)?w.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?w.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?w.grep(e,(function(e){return c.call(t,e)>-1!==n})):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,(function(e){return 1===e.nodeType})))},w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(w(e).filter((function(){for(t=0;t<r;t++)if(w.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,i[t],n);return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&D.test(e)?w(e):e||[],!1).length}});var L,k=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:k.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),N.test(r[1])&&w.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=b.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,L=w(b);var q=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function B(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&w(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?w.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?c.call(w(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return B(e,"nextSibling")},prev:function(e){return B(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(P(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},(function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=w.filter(r,i)),this.length>1&&(R[e]||w.uniqueSort(i),q.test(e)&&i.reverse()),this.pushStack(i)}}));var I=/[^\x20\t\r\n\f]+/g;function M(e){return e}function $(e){throw e}function H(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return w.each(e.match(I)||[],(function(e,n){t[n]=!0})),t}(e):w.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){w.each(n,(function(n,r){v(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==_(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return w.each(arguments,(function(e,t){for(var n;(n=w.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?w.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},w.extend({Deferred:function(e){var t=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred((function(n){w.each(t,(function(t,r){var i=v(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var s=this,u=arguments,l=function(){var n,l;if(!(e<o)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");l=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(l)?i?l.call(n,a(o,t,M,i),a(o,t,$,i)):(o++,l.call(n,a(o,t,M,i),a(o,t,$,i),a(o,t,M,t.notifyWith))):(r!==M&&(s=void 0,u=[n]),(i||t.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(n){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(n,c.stackTrace),e+1>=o&&(r!==$&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),n.setTimeout(c))}}return w.Deferred((function(n){t[0][3].add(a(0,n,v(i)?i:M,n.notifyWith)),t[1][3].add(a(0,n,v(e)?e:M)),t[2][3].add(a(0,n,v(r)?r:$))})).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(t,(function(e,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=w.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(H(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||v(i[n]&&i[n].then)))return o.then();for(;n--;)H(i[n],a(n),o.reject);return o.promise()}});var U=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&U.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},w.readyException=function(e){n.setTimeout((function(){throw e}))};var F=w.Deferred();function z(){b.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),w.ready()}w.fn.ready=function(e){return F.then(e).catch((function(e){w.readyException(e)})),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(b,[w]))}}),w.ready.then=F.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(w.ready):(b.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var W=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===_(n))for(s in i=!0,n)W(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},V=/^-ms-/,X=/-([a-z])/g;function J(e,t){return t.toUpperCase()}function K(e){return e.replace(V,"ms-").replace(X,J)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=w.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[K(t)]=n;else for(r in t)i[K(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in r?[t]:t.match(I)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var G=new Y,Z=new Y,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return Z.hasData(e)||G.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return G.access(e,t,n)},_removeData:function(e,t){G.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Z.get(o),1===o.nodeType&&!G.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=K(r.slice(5)),ne(o,r,i[r]));G.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Z.set(this,e)})):W(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=G.get(e,t),n&&(!r||Array.isArray(n)?r=G.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){w.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return G.get(e,n)||G.access(e,n,{empty:w.Callbacks("once memory").add((function(){G.remove(e,[t+"queue",n])}))})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each((function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){w.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=G.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=b.documentElement,se=function(e){return w.contains(e.ownerDocument,e)},ue={composed:!0};ae.getRootNode&&(se=function(e){return w.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===w.css(e,"display")};var ce={};function de(e){var t,n=e.ownerDocument,r=e.nodeName,i=ce[r];return i||(t=n.body.appendChild(n.createElement(r)),i=w.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ce[r]=i,i)}function pe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=G.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&le(r)&&(i[o]=de(r))):"none"!==n&&(i[o]="none",G.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}w.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?w(this).show():w(this).hide()}))}});var fe,he,me=/^(?:checkbox|radio)$/i,ye=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;fe=b.createDocumentFragment().appendChild(b.createElement("div")),(he=b.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),fe.appendChild(he),y.checkClone=fe.cloneNode(!0).cloneNode(!0).lastChild.checked,fe.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!fe.cloneNode(!0).lastChild.defaultValue,fe.innerHTML="<option></option>",y.option=!!fe.lastChild;var ge={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&P(e,t)?w.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)G.set(e[n],"globalEval",!t||G.get(t[n],"globalEval"))}ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,y.option||(ge.optgroup=ge.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function _e(e,t,n,r,i){for(var o,a,s,u,l,c,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((o=e[f])||0===o)if("object"===_(o))w.merge(p,o.nodeType?[o]:o);else if(Te.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(ye.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+w.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;w.merge(p,a.childNodes),(a=d.firstChild).textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",f=0;o=p[f++];)if(r&&w.inArray(o,r)>-1)i&&i.push(o);else if(l=se(o),a=be(d.appendChild(o),"script"),l&&xe(a),n)for(c=0;o=a[c++];)ve.test(o.type||"")&&n.push(o);return d}var Ce=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function Ae(){return!0}function Se(){return!1}function Oe(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each((function(){w.event.add(this,t,i,r,n)}))}function Pe(e,t,n){n?(G.set(e,t,!1),w.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=G.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(w.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),G.set(this,t,o),r=n(this,t),this[t](),o!==(i=G.get(this,t))||r?G.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else o.length&&(G.set(this,t,{value:w.event.trigger(w.extend(o[0],w.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===G.get(e,t)&&w.event.add(e,t,Ae)}w.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,d,p,f,h,m,y=G.get(e);if(Q(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&w.find.matchesSelector(ae,i),n.guid||(n.guid=w.guid++),(u=y.events)||(u=y.events=Object.create(null)),(a=y.handle)||(a=y.handle=function(t){return void 0!==w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(I)||[""]).length;l--;)f=m=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),f&&(d=w.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,d=w.event.special[f]||{},c=w.extend({type:f,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[f])||((p=u[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(f,a)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),w.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,l,c,d,p,f,h,m,y=G.hasData(e)&&G.get(e);if(y&&(u=y.events)){for(l=(t=(t||"").match(I)||[""]).length;l--;)if(f=m=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),f){for(d=w.event.special[f]||{},p=u[f=(r?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)c=p[o],!i&&m!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));a&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,y.handle)||w.removeEvent(e,f,y.handle),delete u[f])}else for(f in u)w.event.remove(e,f+t[l],n,r,!0);w.isEmptyObject(u)&&G.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=w.event.fix(e),l=(G.get(this,"events")||Object.create(null))[u.type]||[],c=w.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(a=w.event.handlers.call(this,u,l),t=0;(i=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((w.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?w(i,this).index(l)>-1:w.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&P(t,"input")&&Pe(t,"click",Ae),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&P(t,"input")&&Pe(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&P(t,"input")&&G.get(t,"click")||P(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ae:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ae,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ae,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ae,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ce.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({focus:"focusin",blur:"focusout"},(function(e,t){w.event.special[e]={setup:function(){return Pe(this,e,Oe),!1},trigger:function(){return Pe(this,e),!0},delegateType:t}})),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||w.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),w.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each((function(){w.event.remove(this,e,n,t)}))}});var Ne=/<script|<style|<link/i,je=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function ke(e,t){return P(e,"table")&&P(11!==t.nodeType?t:t.firstChild,"tr")&&w(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Be(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(G.hasData(e)&&(s=G.get(e).events))for(i in G.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)w.event.add(t,i,s[i][n]);Z.hasData(e)&&(o=Z.access(e),a=w.extend({},o),Z.set(t,a))}}function Ie(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Me(e,t,n,r){t=u(t);var i,o,a,s,l,c,d=0,p=e.length,f=p-1,h=t[0],m=v(h);if(m||p>1&&"string"==typeof h&&!y.checkClone&&je.test(h))return e.each((function(i){var o=e.eq(i);m&&(t[0]=h.call(this,i,o.html())),Me(o,t,n,r)}));if(p&&(o=(i=_e(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=w.map(be(i,"script"),qe)).length;d<p;d++)l=i,d!==f&&(l=w.clone(l,!0,!0),s&&w.merge(a,be(l,"script"))),n.call(e[d],l,d);if(s)for(c=a[a.length-1].ownerDocument,w.map(a,Re),d=0;d<s;d++)l=a[d],ve.test(l.type||"")&&!G.access(l,"globalEval")&&w.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&!l.noModule&&w._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):T(l.textContent.replace(Le,""),l,c))}return e}function $e(e,t,n){for(var r,i=t?w.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||w.cleanData(be(r)),r.parentNode&&(n&&se(r)&&xe(be(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=se(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=be(s),r=0,i=(o=be(e)).length;r<i;r++)Ie(o[r],a[r]);if(t)if(n)for(o=o||be(e),a=a||be(s),r=0,i=o.length;r<i;r++)Be(o[r],a[r]);else Be(e,s);return(a=be(s,"script")).length>0&&xe(a,!u&&be(e,"script")),s},cleanData:function(e){for(var t,n,r,i=w.event.special,o=0;void 0!==(n=e[o]);o++)if(Q(n)){if(t=n[G.expando]){if(t.events)for(r in t.events)i[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[G.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),w.fn.extend({detach:function(e){return $e(this,e,!0)},remove:function(e){return $e(this,e)},text:function(e){return W(this,(function(e){return void 0===e?w.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Me(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ke(this,e).appendChild(e)}))},prepend:function(){return Me(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ke(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Me(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Me(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return w.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!ge[(ye.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Me(this,arguments,(function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){w.fn[e]=function(e){for(var n,r=[],i=w(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),w(i[a])[t](n),l.apply(r,n.get());return this.pushStack(r)}}));var He=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Ue=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Fe=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},ze=new RegExp(oe.join("|"),"i");function We(e,t,n){var r,i,o,a,s=e.style;return(n=n||Ue(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||se(e)||(a=w.style(e,t)),!y.pixelBoxStyles()&&He.test(a)&&ze.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Ve(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(l).appendChild(c);var e=n.getComputedStyle(c);r="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),i=36===t(e.width),c.style.position="absolute",o=12===t(c.offsetWidth/3),ae.removeChild(l),c=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,a,s,u,l=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(y,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,r,i;return null==s&&(e=b.createElement("table"),t=b.createElement("tr"),r=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",r.style.height="9px",ae.appendChild(e).appendChild(t).appendChild(r),i=n.getComputedStyle(t),s=parseInt(i.height)>3,ae.removeChild(e)),s}}))}();var Xe=["Webkit","Moz","ms"],Je=b.createElement("div").style,Ke={};function Qe(e){var t=w.cssProps[e]||Ke[e];return t||(e in Je?e:Ke[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Je)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Ge=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function nt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=w.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=w.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=w.css(e,"border"+oe[a]+"Width",!0,i))):(u+=w.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=w.css(e,"border"+oe[a]+"Width",!0,i):s+=w.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function rt(e,t,n){var r=Ue(e),i=(!y.boxSizingReliable()||n)&&"border-box"===w.css(e,"boxSizing",!1,r),o=i,a=We(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(He.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||!y.reliableTrDimensions()&&P(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===w.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===w.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+nt(e,t,n||(i?"border":"content"),o,r,a)+"px"}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=K(t),u=Ge.test(t),l=e.style;if(u||(t=Qe(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),c=e.nodeType&&(w.cssNumber[t]||"px"!==l&&+u)&&ie.exec(w.css(e,t));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;a--;)w.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,w.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(w.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=K(t);return Ge.test(t)||(t=Qe(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=We(e,t,r)),"normal"===i&&t in et&&(i=et[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),w.each(["height","width"],(function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!Ye.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,r):Fe(e,Ze,(function(){return rt(e,t,r)}))},set:function(e,n,r){var i,o=Ue(e),a=!y.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===w.css(e,"boxSizing",!1,o),u=r?nt(e,t,r,s,o):0;return s&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-nt(e,t,"border",!1,o)-.5)),u&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),tt(0,n,u)}}})),w.cssHooks.marginLeft=Ve(y.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),w.each({margin:"",padding:"",border:"Width"},(function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(w.cssHooks[e+t].set=tt)})),w.fn.extend({css:function(e,t){return W(this,(function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ue(e),i=t.length;a<i;a++)o[t[a]]=w.css(e,t[a],!1,r);return o}return void 0!==n?w.style(e,t,n):w.css(e,t)}),e,t,arguments.length>1)}}),w.fn.delay=function(e,t){return e=w.fx&&w.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",y.checkOn=""!==e.value,y.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",y.radioValue="t"===e.value}();var it,ot=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return W(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){w.removeAttr(this,e)}))}}),w.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?w.prop(e,t,n):(1===o&&w.isXMLDoc(e)||(i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?it:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&P(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(I);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),it={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ot[t]||w.find.attr;ot[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ot[a],ot[a]=i,i=null!=n(e,t,r)?a:null,ot[a]=o),i}}));var at=/^(?:input|select|textarea|button)$/i,st=/^(?:a|area)$/i;function ut(e){return(e.match(I)||[]).join(" ")}function lt(e){return e.getAttribute&&e.getAttribute("class")||""}function ct(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(I)||[]}w.fn.extend({prop:function(e,t){return W(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[w.propFix[e]||e]}))}}),w.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&w.isXMLDoc(e)||(t=w.propFix[t]||t,i=w.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):at.test(e.nodeName)||st.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){w.propFix[this.toLowerCase()]=this})),w.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(v(e))return this.each((function(t){w(this).addClass(e.call(this,t,lt(this)))}));if((t=ct(e)).length)for(;n=this[u++];)if(i=lt(n),r=1===n.nodeType&&" "+ut(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=ut(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(v(e))return this.each((function(t){w(this).removeClass(e.call(this,t,lt(this)))}));if(!arguments.length)return this.attr("class","");if((t=ct(e)).length)for(;n=this[u++];)if(i=lt(n),r=1===n.nodeType&&" "+ut(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=ut(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){w(this).toggleClass(e.call(this,n,lt(this),t),t)})):this.each((function(){var t,i,o,a;if(r)for(i=0,o=w(this),a=ct(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=lt(this))&&G.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":G.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+ut(lt(n))+" ").indexOf(t)>-1)return!0;return!1}});var dt=/\r/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=v(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,w(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=w.map(i,(function(e){return null==e?"":e+""}))),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(dt,""):null==n?"":n:void 0}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:ut(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!P(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=w.makeArray(t),a=i.length;a--;)((r=i[a]).selected=w.inArray(w.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),w.each(["radio","checkbox"],(function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},y.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),y.focusin="onfocusin"in n;var pt=/^(?:focusinfocus|focusoutblur)$/,ft=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(e,t,r,i){var o,a,s,u,l,c,d,p,h=[r||b],m=f.call(e,"type")?e.type:e,y=f.call(e,"namespace")?e.namespace.split("."):[];if(a=p=s=r=r||b,3!==r.nodeType&&8!==r.nodeType&&!pt.test(m+w.event.triggered)&&(m.indexOf(".")>-1&&(y=m.split("."),m=y.shift(),y.sort()),l=m.indexOf(":")<0&&"on"+m,(e=e[w.expando]?e:new w.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=y.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:w.makeArray(t,[e]),d=w.event.special[m]||{},i||!d.trigger||!1!==d.trigger.apply(r,t))){if(!i&&!d.noBubble&&!g(r)){for(u=d.delegateType||m,pt.test(u+m)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(r.ownerDocument||b)&&h.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)p=a,e.type=o>1?u:d.bindType||m,(c=(G.get(a,"events")||Object.create(null))[e.type]&&G.get(a,"handle"))&&c.apply(a,t),(c=l&&a[l])&&c.apply&&Q(a)&&(e.result=c.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!Q(r)||l&&v(r[m])&&!g(r)&&((s=r[l])&&(r[l]=null),w.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,ft),r[m](),e.isPropagationStopped()&&p.removeEventListener(m,ft),w.event.triggered=void 0,s&&(r[l]=s)),e.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each((function(){w.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),y.focusin||w.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=G.access(r,t);i||r.addEventListener(e,n,!0),G.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=G.access(r,t)-1;i?G.access(r,t,i):(r.removeEventListener(e,n,!0),G.remove(r,t))}}})),w.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+e),t};var ht,mt=/\[\]$/,yt=/\r?\n/g,vt=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function bt(e,t,n,r){var i;if(Array.isArray(t))w.each(t,(function(t,i){n||mt.test(e)?r(e,i):bt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==_(t))r(e,t);else for(i in t)bt(e+"["+i+"]",t[i],n,r)}w.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,(function(){i(this.name,this.value)}));else for(n in e)bt(n,e[n],t,i);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&gt.test(this.nodeName)&&!vt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,(function(e){return{name:t.name,value:e.replace(yt,"\r\n")}})):{name:t.name,value:n.replace(yt,"\r\n")}})).get()}}),w.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){w(this).wrapInner(e.call(this,t))})):this.each((function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){w(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){w(this).replaceWith(this.childNodes)})),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},y.createHTMLDocument=((ht=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ht.childNodes.length),w.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),o=!n&&[],(i=N.exec(e))?[t.createElement(i[1])]:(i=_e([e],t,o),o&&o.length&&w(o).remove(),w.merge([],i.childNodes)));var r,i,o},w.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=w.css(e,"position"),c=w(e),d={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=w.css(e,"top"),u=w.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),v(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),c.css(d))}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){w.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),i.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-w.css(r,"marginTop",!0),left:t.left-i.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===w.css(e,"position");)e=e.offsetParent;return e||ae}))}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return W(this,(function(e,r,i){var o;if(g(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),w.each(["top","left"],(function(e,t){w.cssHooks[t]=Ve(y.pixelPosition,(function(e,n){if(n)return n=We(e,t),He.test(n)?w(e).position()[t]+"px":n}))})),w.each({Height:"height",Width:"width"},(function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){w.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return W(this,(function(t,n,i){var o;return g(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)}),t,a?i:void 0,a)}}))})),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var xt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=P,w.isFunction=v,w.isWindow=g,w.camelCase=K,w.type=_,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},w.trim=function(e){return null==e?"":(e+"").replace(xt,"")},void 0===(r=function(){return w}.apply(t,[]))||(e.exports=r);var Tt=n.jQuery,_t=n.$;return w.noConflict=function(e){return n.$===w&&(n.$=_t),e&&n.jQuery===w&&(n.jQuery=Tt),w},void 0===i&&(n.jQuery=n.$=w),w}))},function(e,t,n){"use strict";var r=n(0),i=n(5),o=n(18),a=n(11);function s(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var u=s(n(8));u.Axios=o,u.create=function(e){return s(a(u.defaults,e))},u.Cancel=n(12),u.CancelToken=n(32),u.isCancel=n(7),u.all=function(e){return Promise.all(e)},u.spread=n(33),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(0),i=n(6),o=n(19),a=n(20),s=n(11);function u(e){this.defaults=e,this.interceptors={request:new o,response:new o}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=s(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,i){return this.request(r.merge(i||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(0);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},function(e,t,n){"use strict";var r=n(0),i=n(21),o=n(7),a=n(8);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return s(e),t.data=i(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(s(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,l=[],c=!1,d=-1;function p(){c&&u&&(c=!1,u.length?l=u.concat(l):d=-1,l.length&&f())}function f(){if(!c){var e=s(p);c=!0;for(var t=l.length;t;){for(u=l,l=[];++d<t;)u&&u[d].run();d=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||c||s(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(10);e.exports=function(e,t,n){var i=n.config.validateStatus;!i||i(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(27),i=n(28);e.exports=function(e,t){return e&&!r(t)?i(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(0),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,a={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(a[t]&&i.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(i)&&s.push("path="+i),r.isString(o)&&s.push("domain="+o),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(12);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.courseTemplates=void 0;var i=n(35),o={authorCourseTemplates:{table:{id:"authorCourseTemplates",alias:"List Courses",columns:r([{alias:"Course ID",id:"id",dataType:"int"},{alias:"Estimated Time",id:"estimated_time",dataType:"int"},{alias:"Course Title",id:"title",dataType:"string"},{alias:"Created At",id:"created_at",dataType:"datetime"},{alias:"Default Days Until Due",id:"default_days_until_due",dataType:"int"},{alias:"Default Due On Date",id:"default_due_on_date",dataType:"datetime"},{alias:"Due Date Type",id:"due_date_type",dataType:"string"},{alias:"Has Been Unpublished",id:"has_been_unpublished",dataType:"bool"},{alias:"Is Archived",id:"is_archived",dataType:"bool"},{alias:"Archived At",id:"archived_at",dataType:"datetime"},{alias:"Is Published",id:"is_published",dataType:"bool"},{alias:"Passing Threshold",id:"passing_threshold",dataType:"int"},{alias:"Quizzes Count",id:"quizzes_count",dataType:"int"},{alias:"Uses Bridge Retain",id:"retain",dataType:"bool"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Max Quiz Attempts",id:"max_quiz_attempts",dataType:"int"},{alias:"Continuing Education Credits",id:"continuing_education_credits",dataType:"int"},{alias:"Description of Course",id:"description",dataType:"string"},{alias:"Has unpublished changes",id:"has_unpublished_changes",dataType:"bool"},{alias:"Course Type",id:"course_type",dataType:"string"},{alias:"Enrollments Count",id:"enrollments_count",dataType:"int"},{alias:"Incomplete Enrollments Count",id:"incomplete_enrollments_count",dataType:"int"},{alias:"Attachments Count",id:"attachments_count",dataType:"int"},{alias:"Third Party Course Id",id:"third_party_course_id",dataType:"string"},{alias:"Show Correct Response",id:"show_correct_response",dataType:"bool"},{alias:"Branding Override",id:"branding_override",dataType:"bool"},{alias:"Course Tags",id:"tags",dataType:"string"},{alias:"Course Categories",id:"categories",dataType:"string"},{alias:"Quizzes Open Book",id:"open_book",dataType:"bool"},{alias:"Has Certificate",id:"has_certificate",dataType:"bool"},{alias:"External Course ID",id:"has_certificate",dataType:"string"},{alias:"Due Date Type (Relative, Fixed)",id:"due_date_type",dataType:"string"},{alias:"Date Course is Due(Fixed)",id:"default_due_on_date",dataType:"datetime"},{alias:"Default Days Until Due",id:"default_days_until_due",dataType:"datetime"},{alias:"Course Registration URL",id:"enroll_url",dataType:"string"}],i.authorColumn,i.enrollmentCountsColumn,i.subAccountColumn)},path:"/api/author/course_templates",data:"course_templates",parameters:[{name:"Sort",parameter:"sort",type:"options",default:"Default",options:[{name:"Newest",value:"newest"},{name:"Title",value:"title"},{name:"Updated",value:"updated"},{name:"Archived",value:"archived"}]},{name:"Search",parameter:"search",type:"string",placeholder:"search terms"},{name:"Filters",parameter:"filters",type:"filters",default:"Default",options:[{name:"My Courses",value:"my_courses"},{name:"Unpublished",value:"unpublished"},{name:"Has Certificate",value:"has_certificate"},{name:"No Enrollments",value:"no_enrollments"},{name:"Bridge Courses",value:"bridge"},{name:"Scorm Courses",value:"scorm"},{name:"Lynda Courses",value:"lynda"},{name:"Opensesame Courses",value:"opensesame"}]},{name:"Only Deleted",parameter:"only_deleted",type:"boolean"},{name:"Include Deleted",parameter:"with_deleted",type:"boolean"},{name:"Updated After",parameter:"updated_after",type:"date"},{name:"Created After",parameter:"created_after",type:"date"},{name:"Deleted After",parameter:"deleted_after",type:"date"},{name:"Updated Before",parameter:"updated_before",type:"date"},{name:"Created Before",parameter:"created_before",type:"date"},{name:"Deleted Before",parameter:"deleted_before",type:"date"}]}};t.courseTemplates=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.subAccountColumn=t.metaColumn=t.enrollmentCountsColumn=t.authorColumn=void 0;var r=n(36);Object.defineProperty(t,"authorColumn",{enumerable:!0,get:function(){return r.authorColumn}});var i=n(37);Object.defineProperty(t,"enrollmentCountsColumn",{enumerable:!0,get:function(){return i.enrollmentCountsColumn}});var o=n(38);Object.defineProperty(t,"metaColumn",{enumerable:!0,get:function(){return o.metaColumn}});var a=n(39);Object.defineProperty(t,"subAccountColumn",{enumerable:!0,get:function(){return a.subAccountColumn}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.authorColumn=void 0;t.authorColumn=[{alias:"Author ID",id:"author_id",parent_id:"author",sub_id:"id",dataType:"int"}]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.enrollmentCountsColumn=void 0;t.enrollmentCountsColumn=[{alias:"Enrollment Count - All",id:"enrollment-counts_all",parent_id:"enrollment_counts",sub_id:"all",dataType:"int"},{alias:"Enrollment Count - Required",id:"enrollment-counts_required",parent_id:"enrollment_counts",sub_id:"required",dataType:"int"},{alias:"Enrollment Count - Optional",id:"enrollment-counts_optional",parent_id:"enrollment_counts",sub_id:"optional",dataType:"int"},{alias:"Enrollment Count - Finished",id:"enrollment-counts_finished",parent_id:"enrollment_counts",sub_id:"finished",dataType:"int"},{alias:"Enrollment Count - In Progress",id:"enrollment-counts_in-progress",parent_id:"enrollment_counts",sub_id:"in_progress",dataType:"int"},{alias:"Enrollment Count - Incomplete",id:"enrollment-counts_incomplete",parent_id:"enrollment_counts",sub_id:"incomplete",dataType:"int"},{alias:"Enrollment Count - Incomplete or Finished",id:"enrollment-counts_incomplete-or-finished",parent_id:"enrollment_counts",sub_id:"incomplete_or_finished",dataType:"int"},{alias:"Enrollment Count - Not Started",id:"enrollment-counts_not-started",parent_id:"enrollment_counts",sub_id:"not_started",dataType:"int"},{alias:"Enrollment Count - Overdue",id:"enrollment-counts_overdue",parent_id:"enrollment_counts",sub_id:"overdue",dataType:"int"}]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.metaColumn=void 0;t.metaColumn=[{alias:"Meta Domain ID",id:"meta_domain_id",parent_id:"meta",sub_id:"domain_id",dataType:"string"},{alias:"SubAccount ID",id:"meta_sub_account_id",parent_id:"meta",sub_id:"sub_account_id",dataType:"string"}]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.subAccountColumn=void 0;t.subAccountColumn=[{alias:"SubAccount ID",id:"sub_account_id",parent_id:"sub_account",sub_id:"id",dataType:"int"},{alias:"SubAccount Name",id:"sub_account_name",parent_id:"sub_account",sub_id:"name",dataType:"string"},{alias:"SubAccount Is Root",id:"sub_account_is_root",parent_id:"sub_account",sub_id:"is_root",dataType:"bool"}]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.listEnrollments=void 0;t.listEnrollments={authorListEnrollments:{table:{id:"authorListEnrollments",alias:"Specific Course Enrollments",columns:[{alias:"Enrollment ID",id:"id",dataType:"int"},{alias:"Course ID",id:"course_template",dataType:"int"},{alias:"Due At",id:"end_at",dataType:"datetime"},{alias:"Expire At",id:"expires_at",dataType:"datetime"},{alias:"Completed At",id:"completed_at",dataType:"datetime"},{alias:"Created At",id:"created_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Course Progress",id:"progress",dataType:"float"},{alias:"Is Removable",id:"can_be_removed",dataType:"bool"},{alias:"Is Able To Be Optional",id:"can_be_made_optional",dataType:"bool"},{alias:"Is Active",id:"active",dataType:"bool"},{alias:"Is Required",id:"required",dataType:"bool"},{alias:"Is Permanently Failed",id:"is_permanently_failed",dataType:"bool"},{alias:"Is Archived",id:"is_archived",dataType:"bool"},{alias:"Score",id:"score",dataType:"int"},{alias:"Enrollment Status",id:"state",dataType:"string"},{alias:"Can Re-Enroll",id:"allow_re_enroll",dataType:"bool"},{alias:"Name",id:"name",linkedSource:"learner",linkedId:"name",dataType:"string"},{alias:"User ID",id:"user_id",linkedSource:"learner",linkedId:"id",dataType:"int"}]},path:"/api/author/course_templates/*/enrollments",data:"enrollments",requiredParameter:{title:"Course",path:"/api/author/course_templates",data:"course_templates",nameCol:"title",valCol:"id"}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.users=void 0;t.users={authorUser:{table:{id:"authorUser",alias:"List Users",columns:[{alias:"User ID",id:"id",dataType:"int"},{alias:"Unique Login ID",id:"uid",dataType:"string"},{alias:"HRIS ID",id:"hris_id",dataType:"string"},{alias:"First Name",id:"first_name",dataType:"string"},{alias:"Last Name",id:"last_name",dataType:"string"},{alias:"Language",id:"locale",dataType:"string"},{alias:"Email Address",id:"email",dataType:"string"},{alias:"Welcomed to Bridge",id:"welcomedAt",dataType:"datetime"},{alias:"Last Login",id:"loggedInAt",dataType:"datetime"},{alias:"Password is Set",id:"passwordIsSet",dataType:"bool"},{alias:"Full Name",id:"full_name",dataType:"string"},{alias:"Name",id:"name",dataType:"string"},{alias:"Avatar URL",id:"avatar_url",dataType:"string"},{alias:"Deleted At",id:"deleted_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Unsubscribed from Emails",id:"unsubscribed",dataType:"bool"},{alias:"Hire Date",id:"hire_date",dataType:"date"},{alias:"Is a Manager",id:"is_manager",dataType:"bool"},{alias:"Job Title",id:"job_title",dataType:"string"},{alias:"User Bio",id:"bio",dataType:"string"},{alias:"Sortable Name",id:"sortable_name",dataType:"string"},{alias:"Department",id:"department",dataType:"string"},{alias:"Roles",id:"roles",dataType:"string"}]},path:"/api/author/users",data:"users",parameters:[{name:"Sort",parameter:"sort",type:"options",default:"Default",options:[{name:"Name",value:"name"},{name:"Number of Completed Courses",value:"complete_courses_count"},{name:"Next Due Date",value:"next_due_date"}]},{name:"Search",parameter:"search",type:"string",placeholder:"search terms"},{name:"Only Deleted",parameter:"only_deleted",type:"boolean"},{name:"Include Deleted",parameter:"with_deleted",type:"boolean"},{name:"Role",parameter:"role",type:"options",default:"Any",options:[{name:"Account Admin",value:"account_admin"},{name:"Admin",value:"admin"},{name:"Author",value:"author"}]},{name:"Updated After",parameter:"updated_after",type:"date"},{name:"Created After",parameter:"created_after",type:"date"},{name:"Deleted After",parameter:"deleted_after",type:"date"},{name:"Updated Before",parameter:"updated_before",type:"date"},{name:"Created Before",parameter:"created_before",type:"date"},{name:"Deleted Before",parameter:"deleted_before",type:"date"},{name:"Only Managers",parameter:"only_managers",type:"boolean"}]}}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AddTableOptions=void 0;var o=n(1),a=n(2),s=function(e){function t(){var t=e.call(this)||this;return t.addTableOptions(a.tables),t}return i(t,e),t}(o.Buttons);t.AddTableOptions=s},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Credentials=void 0;var o=function(e){function t(){var t=e.call(this)||this;return $("#credentialsButton").on("click",(function(){t.switchPage("url-section","api-section")})),t}return i(t,e),t}(n(1).Buttons);t.Credentials=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.DeleteList=void 0;var o=function(e){function t(){var t=e.call(this)||this;return $("#apiList").on("click","#deleteList",(function(e){var n=e.target.offsetParent.id;e.target&&e.target.offsetParent.id==n&&t.deleteTable(n)})),t}return i(t,e),t}(n(1).Buttons);t.DeleteList=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.EditDone=void 0;var o=function(e){function t(){var t=e.call(this)||this;return $("#editDoneButton").on("click",(function(){t.id=$("#edit-section").attr("currentTable"),t.ulLength=$("#apiList li").length,t.api=$("#apiSelector").val(),t.title=$("#tableName").val(),t.apiList(t.id,t.api,t.title,t.ulLength),t.requiredParameter(t.id,t.api,t.tables),t.parameters(t.id,t.api,t.tables),t.switchPage("edit-section","api-section"),t.showElement("optionalParameterSection",!1),$("#optionalParameterSelector").empty(),$("#optionalParameterList").html(""),$("#optionalParameterList").hasClass("show")&&$("#optionalParameterButton").click()})),t}return i(t,e),t.prototype.apiList=function(e,t,n,r){if(e<r)$("#"+e+" .title").text(n);else{r<=0&&this.showElement("emptyApiListMessage",!1);var i=this.buildHtml(e,t,n);$("#apiList").append(i)}},t.prototype.buildHtml=function(e,t,n){return['<li data-api="'+t+'" class="list-group-item" id="'+e+'">','<div class="row">','<div class="col titleColumn">','<div class="title">'+n+"</div>","</div>",'<div class="col-xs-auto">',"<span>",'<button class="btn btn-light mx-1" id="editList" type="button">Edit</button>','<button class="btn btn-light mx-1" id="deleteList" type="button">Delete</button>',"</span>","</div>","</div>","</li>"].join("\n")},t.prototype.requiredParameter=function(e,t,n){var r;"requiredParameter"in n[t]&&(r=$("#requiredParameterSelector").val(),$("#"+e).attr("data-require",r))},t.prototype.parameters=function(e,t,n){var r;if("parameters"in n[t]){for(var i=[],o=$("#optionalParameterList").children(),a=0;a<o.length;a++){var s=$(o[a]),u=s.attr("id");if("options"==s.attr("parametertype"))"nosel"!=(l=$("#input-"+u+" option:selected").val())&&(r=l);else if("filters"==s.attr("parametertype")){"false"!=(l=$("#input-"+u+" option:selected").val())&&(u+="[]",r=l)}else if("boolean"==s.attr("parametertype")){var l;"false"!=(l=$("#input-"+u+" option:selected").val())&&(r=l)}else("string"==s.attr("parametertype")||"date"==s.attr("parametertype"))&&(r=$("#input-"+u).val());null!=r&&i.push({name:u,value:r})}for(var c,d=[],p=0,f=i;p<f.length;p++){var h=f[p];d.push([h.name,h.value].join("="))}c=encodeURIComponent(d.join("&")),$("#"+e).attr("data-optional",c),console.log(c)}},t}(n(1).Buttons);t.EditDone=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.EditList=void 0;var o=function(e){function t(){var t=e.call(this)||this;return $("#apiList").on("click","#editList",(function(e){var n=e.target.offsetParent.id;e.target&&e.target.offsetParent.id==n&&t.editTable(n)})),t}return i(t,e),t}(n(1).Buttons);t.EditList=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ResetCredentials=void 0;var o=function(e){function t(){var t=e.call(this)||this;return $("#resetButton").on("click",(function(){t.switchPage("api-section","url-section")})),t}return i(t,e),t}(n(1).Buttons);t.ResetCredentials=o},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Submit=void 0;var o=n(1),a=n(49),s=function(e){function t(){var t=e.call(this)||this;return t.tableau=new a.Tableau,$("#submitButton").on("click",(function(){for(var e=[],n=0,r=$("#apiList")[0].getElementsByTagName("li");n<r.length;n++){var i=r[n],o={apiCall:i.getAttribute("data-api"),title:i.getElementsByClassName("title")[0].innerText};i.hasAttribute("data-require")&&(o.requiredParameter=i.getAttribute("data-require")),i.hasAttribute("data-optional")&&(o.optionalParameters=i.getAttribute("data-optional")),e.push(o)}var a={url:$("#url").val(),tables:e};t.tableau.connectionData=JSON.stringify(a),t.tableau.apiKey=$("#apiKey").val(),t.tableau.connectionName="Bridge API",t.tableau.tableauSubmit()})),t}return i(t,e),t}(o.Buttons);t.Submit=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tableau=void 0;var r=n(50),i=n(2),o=n(3),a=function(){function e(){var e=this;this.myConnector=tableau.makeConnector(),this.myTables={},this.myConnector.init=function(e){tableau.log("tableau web connector initialization"),tableau.authType=tableau.authTypeEnum.custom,e()},this.myConnector.getSchema=function(t){tableau.log("getSchema");for(var n=[],r=1,o=0,a=JSON.parse(tableau.connectionData).tables;o<a.length;o++){var s=a[o],u=s.apiCall,l=JSON.parse(JSON.stringify(i.tables[u])),c="table"+r;if(l.table.alias=s.title,l.table.id=c,r+=1,"requiredParameter"in s){var d=l.path.replace("*",s.requiredParameter);l.path=d}if("optionalParameters"in s){d=l.path+"?"+s.optionalParameters;l.path=d}e.myTables[c]=l,n.push(l.table),console.log(n)}t(n)},this.myConnector.getData=function(t,n){tableau.log("getData");var r=JSON.parse(tableau.connectionData),i=t.tableInfo.id,a=e.myTables[i].path,s=new URL(a,r.url);new o.Bridge(s,tableau.password).performApiCall(t,n,s,e.myTables,tableau.password)},tableau.registerConnector(this.myConnector)}return Object.defineProperty(e.prototype,"apiKey",{get:function(){return tableau.password},set:function(e){tableau.password=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"connectionData",{get:function(){return tableau.connectionData},set:function(e){r.isJsonString(e)?tableau.connectionData=e:tableau.connectionData=JSON.stringify(e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"connectionName",{get:function(){return tableau.connectionName},set:function(e){tableau.connectionName=e},enumerable:!1,configurable:!0}),e.prototype.tableauSubmit=function(){tableau.submit()},e}();t.Tableau=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isJsonString=void 0,t.isJsonString=function(e){try{JSON.parse(e)}catch(e){return!1}return!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9ucy9idXR0b25zLnRzIiwid2VicGFjazovLy8uL3NyYy90YWJsZXMvYXBpL2F1dGhvci9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2JyaWRnZS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JyaWRnZVdEQy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9ucy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9ucy9hZGQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5zbGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYmxlcy9hcGkvYXV0aG9yL2NvdXJzZVRlbXBsYXRlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFibGVzL2FwaS9hdXRob3IvY291cnNlVGVtcGxhdGVzL2NvbHVtbnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYmxlcy9hcGkvYXV0aG9yL2NvdXJzZVRlbXBsYXRlcy9jb2x1bW5zL2F1dGhvckNvdWx1bW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYmxlcy9hcGkvYXV0aG9yL2NvdXJzZVRlbXBsYXRlcy9jb2x1bW5zL2Vucm9sbG1lbnRDb3VudHNDb2x1bW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYmxlcy9hcGkvYXV0aG9yL2NvdXJzZVRlbXBsYXRlcy9jb2x1bW5zL21ldGFDb2x1bW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYmxlcy9hcGkvYXV0aG9yL2NvdXJzZVRlbXBsYXRlcy9jb2x1bW5zL3N1YkFjY291bnRDb2x1bW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYmxlcy9hcGkvYXV0aG9yL2xpc3RFbnJvbGxtZW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFibGVzL2FwaS9hdXRob3IvdXNlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2J1dHRvbnMvYWRkVGFibGVPcHRpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy9idXR0b25zL2NyZWRlbnRpYWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9idXR0b25zL2RlbGV0ZUxpc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2J1dHRvbnMvZWRpdERvbmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2J1dHRvbnMvZWRpdExpc3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2J1dHRvbnMvcmVzZXRDcmVkZW50aWFscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9ucy9zdWJtaXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYmxlYXUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidG9TdHJpbmciLCJpc0FycmF5IiwidmFsIiwiaXNVbmRlZmluZWQiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiZm4iLCJsZW5ndGgiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJkZWVwTWVyZ2UiLCJleHRlbmQiLCJhIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsInRoaXMiLCJ0YWJsZXMiLCJlcnJvck1lc3NhZ2UiLCJzaG93RWxlbWVudCIsImlkIiwiaXNTaG93IiwiY3NzIiwic3dpdGNoUGFnZSIsInN0YXJ0IiwiZW5kIiwic2hvd0xvYWRpbmciLCJpc0xvYWRpbmciLCJwcm9wIiwiaHRtbCIsImNsZWFyUmVxdWlyZWRQYXJhbWV0ZXJPcHRpb25zIiwiYWRkT3B0aW9uIiwic2VsZWN0b3IiLCJvcHRpb24iLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJUZXh0Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJhZGRUYWJsZU9wdGlvbnMiLCJhdmFpbGFibGVUYWJsZXMiLCJ0YWJsZSIsImVkaXRUYWJsZSIsInRleHQiLCJhdHRyIiwiYXBpIiwicmVxdWlyZWRQYXJhbWV0ZXIiLCJvcHRpb25hbFBhcmFtZXRlclN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsImFkZE9wdGlvbmFsUGFyYW1ldGVycyIsInNwbGl0Iiwib3B0aW9uYWxQYXJhbWV0ZXJTcGxpdCIsInVybCIsImJhc2UiLCJnZXRSZXF1aXJlZFBhcmFtZXRlckRhdGEiLCJVUkwiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJzaG93RXJyb3JNZXNzYWdlIiwiZGVsZXRlVGFibGUiLCJ1bExlbmd0aCIsInJlbW92ZSIsIm9sZElkIiwicGFyc2VJbnQiLCJuZXdJZCIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwicGFyYW1ldGVyIiwiaW5jbHVkZXMiLCJvcHRpb25zIiwicHVzaCIsImpvaW4iLCJhcHBlbmQiLCJhcGlDYWxsIiwidGFibGVJZCIsImFwaUtleSIsIm9sZFBhcmFtIiwidXJsT2JqIiwiQnJpZGdlIiwic2V0VXJsIiwibWV0aG9kIiwiaGVhZGVycyIsInRoZW4iLCJyZXNwb25zZSIsImRhdGEiLCJ0YWJsZUluZm8iLCJuYW1lQ29sIiwidmFsQ29sIiwibGVuIiwibWV0YSIsIm5leHQiLCJ1bmRlZmluZWQiLCJjYXRjaCIsIkJ1dHRvbnMiLCJjb3Vyc2VUZW1wbGF0ZXMiLCJsaXN0RW5yb2xsbWVudHMiLCJ1c2VycyIsImRldkhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiQWNjZXB0IiwiYWRkUm93IiwibXlUYWJsZXMiLCJ0YWJsZURhdGEiLCJyb3ciLCJjb2x1bW4iLCJ0YWJsZWF1SWQiLCJsaW5rZWRTb3VyY2UiLCJsaW5rZWRJZCIsImxpbmtlZFR5cGUiLCJsaW5rZWREYXRhIiwiZmlsdGVyIiwicGFyZW50SWQiLCJwYXJlbnRfaWQiLCJzdWJJZCIsInN1Yl9pZCIsImNvbHVtbnMiLCJhcHBlbmRSb3dzIiwicGVyZm9ybUFwaUNhbGwiLCJkb25lQ2FsbGJhY2siLCJyZXEiLCJhcmdzIiwiQXJyYXkiLCJhcHBseSIsInV0aWxzIiwiZW5jb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJ0b0lTT1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXNobWFya0luZGV4IiwiaW5kZXhPZiIsInNsaWNlIiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsIlhNTEh0dHBSZXF1ZXN0IiwicHJvY2VzcyIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwiZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJzZXR0bGUiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJvcGVuIiwidG9VcHBlckNhc2UiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImF4aW9zS2V5cyIsImNvbmNhdCIsIm90aGVyS2V5cyIsImtleXMiLCJDYW5jZWwiLCIkIiwicmVhZHkiLCJjbGVhclZhbHVlIiwiQWRkVGFibGVPcHRpb25zIiwiQWRkIiwiRWRpdExpc3QiLCJEZWxldGVMaXN0IiwiRWRpdERvbmUiLCJSZXNldENyZWRlbnRpYWxzIiwiQ3JlZGVudGlhbHMiLCJTdWJtaXQiLCJvbiIsInBhcmFtZXRlcnMiLCJ0aXRsZSIsImdsb2JhbCIsImZhY3RvcnkiLCJ3Iiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiZmxhdCIsImFycmF5IiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsIm5vZGUiLCJkb2MiLCJzY3JpcHQiLCJnZXRBdHRyaWJ1dGUiLCJoZWFkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwidmVyc2lvbiIsImpRdWVyeSIsImNvbnRleHQiLCJpbml0IiwiaXNBcnJheUxpa2UiLCJqcXVlcnkiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwibWFwIiwiZWxlbSIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImoiLCJzb3J0Iiwic3BsaWNlIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsIml0ZXJhdG9yIiwiX2kiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaE5hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInNlbGYiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJoYXMiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsIm5vVmFsdWUiLCJmYWlsIiwiQ2FsbGJhY2tzIiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJ3YXJuIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJjb25maWd1cmFibGUiLCJzZXQiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiZm9jdXMiLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiaGVpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImNzc051bWJlciIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImluaXRpYWxJblVuaXQiLCJhZGp1c3RDU1MiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsImRlbGF5IiwidGltZSIsImZ4Iiwic3BlZWRzIiwiY2xlYXJUaW1lb3V0Iiwib3B0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJwcm9wSG9va3MiLCJ0YWJpbmRleCIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwiaGlkZGVuIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwiX2pRdWVyeSIsIl8kIiwibm9Db25mbGljdCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJkZWZhdWx0IiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwidXNlIiwiZWplY3QiLCJoIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwicmVhc29uIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibmV4dFRpY2siLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwicmVsYXRpdmVVUkwiLCJpZ25vcmVEdXBsaWNhdGVPZiIsImxpbmUiLCJzdWJzdHIiLCJvcmlnaW5VUkwiLCJtc2llIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJyZXNvbHZlVVJMIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJyZXF1ZXN0VVJMIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsImF1dGhvckNvdXJzZVRlbXBsYXRlcyIsImFsaWFzIiwiZGF0YVR5cGUiLCJhdXRob3JDb2x1bW4iLCJlbnJvbGxtZW50Q291bnRzQ29sdW1uIiwic3ViQWNjb3VudENvbHVtbiIsInBsYWNlaG9sZGVyIiwibWV0YUNvbHVtbiIsImF1dGhvckxpc3RFbnJvbGxtZW50cyIsImF1dGhvclVzZXIiLCJhcGlMaXN0IiwiYnVpbGRIdG1sIiwicGFyYW1ldGVyTGlzdCIsInBhcmFtZXRlcklucHV0IiwicGFyYW1ldGVyU3RyaW5nIiwicGFyYW1ldGVyTGlzdFRvSm9pbiIsInBhcmFtZXRlclNldCIsInRhYmxlYXUiLCJUYWJsZWF1IiwiYXBpQ2FsbHMiLCJpdGVtIiwibmV3VGFibGUiLCJoYXNBdHRyaWJ1dGUiLCJjb25uZWN0aW9uRGF0YSIsImNvbm5lY3Rpb25OYW1lIiwidGFibGVhdVN1Ym1pdCIsIm15Q29ubmVjdG9yIiwibWFrZUNvbm5lY3RvciIsImluaXRDYWxsYmFjayIsImF1dGhUeXBlIiwiYXV0aFR5cGVFbnVtIiwiY3VzdG9tIiwiZ2V0U2NoZW1hIiwic2NoZW1hQ2FsbGJhY2siLCJjaG9zZW5UYWJsZXMiLCJpZENvdW50ZXIiLCJuZXdBcGlDYWxsIiwidGFibGVpZCIsInJlZ2lzdGVyQ29ubmVjdG9yIiwiaXNKc29uU3RyaW5nIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFB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QyxTQUFTa29DLEdBQVM1QyxLQUM5QmxuQyxFQUFVLElBQUluQixJQUFJcW9DLEVBQU12bUMsRUFBS2pDLEtBQ2pCLElBQUksRUFBQTJCLE9BQU9MLEVBQVMwb0MsUUFBUXppQyxVQUVwQ3JELGVBQ043RSxFQUNBOEUsRUFDQTdDLEVBQ0EsRUFBSzRCLFNBQ0w4bUMsUUFBUXppQyxXQUtoQnlpQyxRQUFRcUIsa0JBQWtCeHRDLEtBQUs0c0MsYUFrQ3ZDLE9BL0JJLHNCQUFJLHFCQUFNLEMsSUFJVixXQUNJLE9BQU9ULFFBQVF6aUMsVSxJQUxuQixTQUFXL0YsR0FDUHdvQyxRQUFRemlDLFNBQVcvRixHLGdDQU92QixzQkFBSSw2QkFBYyxDLElBUWxCLFdBQ0ksT0FBT3dvQyxRQUFRTSxnQixJQVRuQixTQUFtQnJvQyxHQUNYLEVBQUFxcEMsYUFBYXJwQyxHQUNiK25DLFFBQVFNLGVBQWlCcm9DLEVBRXpCK25DLFFBQVFNLGVBQWlCcmxDLEtBQUtDLFVBQVVqRCxJLGdDQVFoRCxzQkFBSSw2QkFBYyxDLElBSWxCLFdBQ0ksT0FBTytuQyxRQUFRTyxnQixJQUxuQixTQUFtQmh4QyxHQUNmeXdDLFFBQVFPLGVBQWlCaHhDLEcsZ0NBTzdCLFlBQUFpeEMsY0FBQSxXQUNJUixRQUFRaHRCLFVBRWhCLEVBMUdBLEdBNEdTLEVBQUFpdEIsVyxvR0M1R0EsRUFBQXFCLGFBVFQsU0FBc0IzdEMsR0FDbEIsSUFDSXNILEtBQUtlLE1BQU1ySSxHQUNiLE1BQU9zSSxHQUNMLE9BQU8sRUFFWCxPQUFPIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBlcXVhbCB0byBtZXJnZSB3aXRoIHRoZSBkaWZmZXJlbmNlIGJlaW5nIHRoYXQgbm8gcmVmZXJlbmNlXG4gKiB0byBvcmlnaW5hbCBvYmplY3RzIGlzIGtlcHQuXG4gKlxuICogQHNlZSBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZGVlcE1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGRlZXBNZXJnZTogZGVlcE1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeS9kaXN0L2pxdWVyeS5zbGltJztcbmltcG9ydCB7IEJyaWRnZSB9IGZyb20gJy4uL2FwaS9icmlkZ2UnO1xuaW1wb3J0IEF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IHRhYmxlcywgVGFibGVOYW1lIH0gZnJvbSAnLi4vdGFibGVzL2FwaS9hdXRob3InO1xuXG4vLyBDbGFzcyBtZWFudCB0byBiZSBpbmhlcml0ZWQgdG8gYWRkIGZ1bmN0aW9ucyB0byBidXR0b25zXG5jbGFzcyBCdXR0b25zIHtcbiAgICB0YWJsZXM6IFRhYmxlTmFtZTtcbiAgICBlcnJvck1lc3NhZ2U6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRhYmxlcyA9IHRhYmxlcztcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPVxuICAgICAgICAgICAgJ0NvdWxkIG5vdCBmZXRjaCBjb3Vyc2UgZGF0YS4gQ2hlY2sgdGhhdCB0aGUgdXJsIGFuZCBhcGkga2V5IGFyZSBjb3JyZWN0Lic7XG4gICAgfVxuXG4gICAgLy8gZnVuY3Rpb24gZm9yIHNob3dpbmcgYW5kIGhpZGluZyBlbGVtZW50c1xuICAgIHNob3dFbGVtZW50KGlkLCBpc1Nob3cpIHtcbiAgICAgICAgaWYgKGlzU2hvdykge1xuICAgICAgICAgICAgJChgIyR7aWR9YCkuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJChgIyR7aWR9YCkuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZ1bmN0aW9uIGZvciBzd2l0Y2hpbmcgYmV0d2VlbiBwYWdlc1xuICAgIHN3aXRjaFBhZ2Uoc3RhcnQsIGVuZCkge1xuICAgICAgICB0aGlzLnNob3dFbGVtZW50KHN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIHRoaXMuc2hvd0VsZW1lbnQoZW5kLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvL2Z1bmN0aW9uIGZvciBzaG93aW5nIHRoZSBsb2FkaW5nIGljb24gZm9yIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgZmV0aGNpbmdcbiAgICBzaG93TG9hZGluZyhpc0xvYWRpbmcpIHtcbiAgICAgICAgaWYgKGlzTG9hZGluZykge1xuICAgICAgICAgICAgJCgnI2FkZEJ1dHRvbicpLnByb3AoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgICAgICAgICAkKCcjYWRkQnV0dG9uJykuaHRtbChcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJzcGlubmVyLWJvcmRlciBzcGlubmVyLWJvcmRlci1zbVwiIHJvbGU9XCJzdGF0dXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+TG9hZGluZy4uLjwvc3Bhbj4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoJyNhZGRCdXR0b24nKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICQoJyNhZGRCdXR0b24nKS5odG1sKCdBZGQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vZnVuY3Rpb24gZm9yIGNsZWFyaW5nIHRoZSByZXF1aXJlZCBwYXJhbWV0ZXIgc2VsZWN0b3Igb3B0aW9uc1xuICAgIGNsZWFyUmVxdWlyZWRQYXJhbWV0ZXJPcHRpb25zKCkge1xuICAgICAgICAkKCcjcmVxdWlyZWRQYXJhbWV0ZXJTZWxlY3RvcicpLmh0bWwoJycpO1xuICAgIH1cblxuICAgIC8vZnVuY3Rpb24gdG8gYWRkIGFuIG9wdGlvbiB0byBhIGRyb3Bkb3duXG4gICAgYWRkT3B0aW9uKG5hbWUsIHZhbHVlLCBzZWxlY3Rvcikge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgb3B0aW9uLmlubmVyVGV4dCA9IG5hbWU7XG4gICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xuICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdpZCcsIHZhbHVlKTtcbiAgICAgICAgc2VsZWN0b3IuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9XG5cbiAgICAvL2Z1bmN0aW9uIHRvIGFkZCB0YWJsZSBvcHRpb25zIHRvIHRoZSBhcGkgc2VsZWN0b3JcbiAgICBhZGRUYWJsZU9wdGlvbnMoYXZhaWxhYmxlVGFibGVzKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gJCgnI2FwaVNlbGVjdG9yJylbMF07XG4gICAgICAgIGZvciAoY29uc3QgdGFibGUgaW4gYXZhaWxhYmxlVGFibGVzKSB7XG4gICAgICAgICAgICBpZiAodGFibGUgaW4gYXZhaWxhYmxlVGFibGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF2YWlsYWJsZVRhYmxlc1t0YWJsZV1bJ3RhYmxlJ11bJ2FsaWFzJ107XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhdmFpbGFibGVUYWJsZXNbdGFibGVdWyd0YWJsZSddWydpZCddO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkT3B0aW9uKG5hbWUsIHZhbHVlLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL2Z1bmN0aW9uIGZvciBlZGl0IGJ1dHRvbiBhY3Rpb25cbiAgICBlZGl0VGFibGUoaWQpIHtcbiAgICAgICAgJCgnI3RhYmxlTmFtZScpLnZhbCgkKCcjJyArIGlkICsgJyAudGl0bGUnKS50ZXh0KCkpO1xuICAgICAgICAkKCcjZWRpdC1zZWN0aW9uJykuYXR0cignY3VycmVudFRhYmxlJywgaWQpO1xuICAgICAgICBjb25zdCBhcGkgPSAkKGAjJHtpZH1gKS5hdHRyKCdkYXRhLWFwaScpO1xuICAgICAgICBjb25zdCByZXF1aXJlZFBhcmFtZXRlciA9ICQoYCMke2lkfWApLmF0dHIoJ2RhdGEtcmVxdWlyZScpO1xuICAgICAgICBjb25zdCBvcHRpb25hbFBhcmFtZXRlclN0cmluZyA9IGRlY29kZVVSSUNvbXBvbmVudChcbiAgICAgICAgICAgICQoYCMke2lkfWApLmF0dHIoJ2RhdGEtb3B0aW9uYWwnKSxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoJ3BhcmFtZXRlcnMnIGluIHRhYmxlc1thcGldKSB7XG4gICAgICAgICAgICAvL2lmIHRoZSBhcGkgY2FsbCBoYXMgb3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudCgnb3B0aW9uYWxQYXJhbWV0ZXJTZWN0aW9uJywgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmFkZE9wdGlvbmFsUGFyYW1ldGVycyhhcGkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbmFsUGFyYW1ldGVyU3RyaW5nICE9ICcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uYWxQYXJhbWV0ZXJBcnJheSA9IG9wdGlvbmFsUGFyYW1ldGVyU3RyaW5nLnNwbGl0KFxuICAgICAgICAgICAgICAgICAgICAnJicsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wIG9mIG9wdGlvbmFsUGFyYW1ldGVyQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uYWxQYXJhbWV0ZXJTcGxpdCA9IG9wLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhhY2suLiBmaXggbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsUGFyYW1ldGVyU3BsaXRbMF0gPT0gJ2ZpbHRlcnNbXSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdmaWx0ZXJzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogb3B0aW9uYWxQYXJhbWV0ZXJTcGxpdFswXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25hbFBhcmFtZXRlclNwbGl0WzFdO1xuICAgICAgICAgICAgICAgICAgICAkKGAjaW5wdXQtJHtrZXl9YCkudmFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ3JlcXVpcmVkUGFyYW1ldGVyJyBpbiB0YWJsZXNbYXBpXSkge1xuICAgICAgICAgICAgY29uc3QgdXJsOiBhbnkgPSB0YWJsZXNbYXBpXVsncmVxdWlyZWRQYXJhbWV0ZXInXVsncGF0aCddO1xuICAgICAgICAgICAgY29uc3QgYmFzZTogYW55ID0gJCgnI3VybCcpLnZhbCgpO1xuXG4gICAgICAgICAgICB0aGlzLmNsZWFyUmVxdWlyZWRQYXJhbWV0ZXJPcHRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLnNob3dFbGVtZW50KCdyZXF1aXJlZFBhcmFtZXRlcicsIHRydWUpO1xuICAgICAgICAgICAgJCgnI3JlcXVpcmVkUGFyYW1ldGVyVGl0bGUnKS50ZXh0KFxuICAgICAgICAgICAgICAgIHRhYmxlc1thcGldWydyZXF1aXJlZFBhcmFtZXRlciddWyd0aXRsZSddLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRSZXF1aXJlZFBhcmFtZXRlckRhdGEoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBVUkwodXJsLCBiYXNlKSxcbiAgICAgICAgICAgICAgICAgICAgYXBpLFxuICAgICAgICAgICAgICAgICAgICAkKCcjYXBpS2V5JykudmFsKCksXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkUGFyYW1ldGVyLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dFcnJvck1lc3NhZ2UodGhpcy5lcnJvck1lc3NhZ2UsIDUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudCgncmVxdWlyZWRQYXJhbWV0ZXInLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyBzd2l0Y2ggdG8gZWRpdCBzZWN0aW9uXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFBhZ2UoJ2FwaS1zZWN0aW9uJywgJ2VkaXQtc2VjdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9mdW5jdGlvbiBmb3IgZGVsZXRlIGJ1dHRvbiBhY3Rpb25cbiAgICBkZWxldGVUYWJsZShpZCkge1xuICAgICAgICBjb25zdCB1bExlbmd0aCA9ICQoJyNhcGlMaXN0IGxpJykubGVuZ3RoO1xuICAgICAgICAkKCcjJyArIGlkKS5yZW1vdmUoKTtcbiAgICAgICAgZm9yIChsZXQgb2xkSWQgPSBwYXJzZUludChpZCkgKyAxOyBvbGRJZCA8IHVsTGVuZ3RoOyBvbGRJZCsrKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdJZCA9IG9sZElkIC0gMTtcbiAgICAgICAgICAgIC8vICQoJyMnICsgb2xkSWQgKyAnIC5kZWxldGVCdXR0b24nKS5vZmYoJ2NsaWNrJyk7XG4gICAgICAgICAgICAvLyAkKCcjJyArIG9sZElkICsgJyAuZGVsZXRlQnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vICAgICBkZWxldGVUYWJsZShuZXdJZCk7XG4gICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICQoJyMnICsgb2xkSWQgKyAnIC5kZWxldGVCdXR0b24nKS5hdHRyKFxuICAgICAgICAgICAgICAgICdvbmNsaWNrJyxcbiAgICAgICAgICAgICAgICAnZGVsZXRlVGFibGUoJyArIG5ld0lkICsgJyknLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICQoJyMnICsgb2xkSWQgKyAnIC5lZGl0QnV0dG9uJykuYXR0cihcbiAgICAgICAgICAgICAgICAnb25jbGljaycsXG4gICAgICAgICAgICAgICAgJ2VkaXRUYWJsZSgnICsgbmV3SWQgKyAnKScsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgJChgIyR7b2xkSWR9YCkuYXR0cignaWQnLCBuZXdJZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCQoJyNhcGlMaXN0IGxpJykubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd0VsZW1lbnQoJ2VtcHR5QXBpTGlzdE1lc3NhZ2UnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNob3dFcnJvck1lc3NhZ2UodGV4dCwgdGltZW91dCkge1xuICAgICAgICAkKCcjZXJyb3JUZXh0JykuaHRtbCh0ZXh0KTtcbiAgICAgICAgdGhpcy5zaG93RWxlbWVudCgnZXJyb3JDYXJkJywgdHJ1ZSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudCgnZXJyb3JDYXJkJywgZmFsc2UpO1xuICAgICAgICAgICAgJCgnI2Vycm9yVGV4dCcpLmh0bWwoJycpO1xuICAgICAgICB9LCB0aW1lb3V0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgYWRkT3B0aW9uYWxQYXJhbWV0ZXJzKGFwaSkge1xuICAgICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiB0YWJsZXNbYXBpXVsncGFyYW1ldGVycyddKSB7XG4gICAgICAgICAgICBsZXQgaHRtbCA9ICcnO1xuICAgICAgICAgICAgaWYgKFsnb3B0aW9ucycsICdmaWx0ZXJzJ10uaW5jbHVkZXMocGFyYW1ldGVyWyd0eXBlJ10pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHBhcmFtZXRlclsndHlwZSddO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyYW1ldGVyWydwYXJhbWV0ZXInXTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gcGFyYW1ldGVyWyduYW1lJ107XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbiA9IHBhcmFtZXRlclsnZGVmYXVsdCddO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgbXktM1wiIHBhcmFtZXRlclR5cGU9XCIke3R5cGV9XCIgaWQ9XCIke2lkfVwiPmAsXG4gICAgICAgICAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPmAsXG4gICAgICAgICAgICAgICAgICAgIGA8bGFiZWwgY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCIgZm9yPVwiaW5wdXQtJHtpZH1cIj4ke25hbWV9PC9sYWJlbD5gLFxuICAgICAgICAgICAgICAgICAgICBgPC9kaXY+YCxcblxuICAgICAgICAgICAgICAgICAgICBgPHNlbGVjdCBjbGFzcz1cImN1c3RvbS1zZWxlY3RcIiBpZD1cImlucHV0LSR7aWR9XCI+YCxcbiAgICAgICAgICAgICAgICAgICAgYDxvcHRpb24gdmFsdWU9XCJub3NlbFwiIHNlbGVjdGVkPiR7ZGVmYXVsdE9wdGlvbn08L29wdGlvbj5gLFxuICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBwYXJhbWV0ZXJbJ29wdGlvbnMnXSkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBgPG9wdGlvbiB2YWx1ZT1cIiR7b3B0aW9uWyd2YWx1ZSddfVwiPiR7b3B0aW9uWyduYW1lJ119PC9vcHRpb24+YCxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wdXNoKC4uLltgPC9zZWxlY3Q+YCwgYDwvZGl2PmBdKTtcbiAgICAgICAgICAgICAgICBodG1sID0gb3B0aW9ucy5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVyWyd0eXBlJ10gPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHBhcmFtZXRlclsndHlwZSddO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyYW1ldGVyWydwYXJhbWV0ZXInXTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gcGFyYW1ldGVyWyduYW1lJ107XG4gICAgICAgICAgICAgICAgaHRtbCA9IFtcbiAgICAgICAgICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBteS0zXCIgcGFyYW1ldGVyVHlwZT1cIiR7dHlwZX1cIiBpZD1cIiR7aWR9XCI+YCxcbiAgICAgICAgICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+YCxcbiAgICAgICAgICAgICAgICAgICAgYDxsYWJlbCBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIiBmb3I9XCJpbnB1dC0ke2lkfVwiPiR7bmFtZX08L2xhYmVsPmAsXG4gICAgICAgICAgICAgICAgICAgIGA8L2Rpdj5gLFxuXG4gICAgICAgICAgICAgICAgICAgIGA8c2VsZWN0IGNsYXNzPVwiY3VzdG9tLXNlbGVjdFwiIGlkPVwiaW5wdXQtJHtpZH1cIj5gLFxuICAgICAgICAgICAgICAgICAgICBgPG9wdGlvbiBzZWxlY3RlZCB2YWx1ZT1cImZhbHNlXCI+RmFsc2U8L29wdGlvbj5gLFxuICAgICAgICAgICAgICAgICAgICBgPG9wdGlvbiB2YWx1ZT1cInRydWVcIj5UcnVlPC9vcHRpb24+YCxcbiAgICAgICAgICAgICAgICAgICAgYDwvc2VsZWN0PmAsXG4gICAgICAgICAgICAgICAgICAgIGA8L2Rpdj5gLFxuICAgICAgICAgICAgICAgIF0uam9pbignXFxuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlclsndHlwZSddID09ICdkYXRlJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBwYXJhbWV0ZXJbJ3R5cGUnXTtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHBhcmFtZXRlclsncGFyYW1ldGVyJ107XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHBhcmFtZXRlclsnbmFtZSddO1xuICAgICAgICAgICAgICAgIGh0bWwgPSBbXG4gICAgICAgICAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgbXktM1wiIHBhcmFtZXRlclR5cGU9XCIke3R5cGV9XCIgaWQ9XCIke2lkfVwiPmAsXG4gICAgICAgICAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPmAsXG4gICAgICAgICAgICAgICAgICAgIGA8bGFiZWwgY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCIgZm9yPVwiaW5wdXQtJHtpZH1cIj4ke25hbWV9PC9sYWJlbD5gLFxuICAgICAgICAgICAgICAgICAgICBgPC9kaXY+YCxcblxuICAgICAgICAgICAgICAgICAgICBgPGlucHV0IHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImlucHV0LSR7aWR9XCI+YCxcblxuICAgICAgICAgICAgICAgICAgICBgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiPmAsXG4gICAgICAgICAgICAgICAgICAgIGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLWRhbmdlclwiIHR5cGU9XCJidXR0b25cIiBvbmNsaWNrPVwiY2xlYXJWYWx1ZSgnaW5wdXQtJHtpZH0nKVwiPkNsZWFyPC9idXR0b24+YCxcbiAgICAgICAgICAgICAgICAgICAgYDwvZGl2PmAsXG4gICAgICAgICAgICAgICAgICAgIGA8L2Rpdj5gLFxuICAgICAgICAgICAgICAgIF0uam9pbignXFxuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlclsndHlwZSddID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHBhcmFtZXRlclsndHlwZSddO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyYW1ldGVyWydwYXJhbWV0ZXInXTtcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gcGFyYW1ldGVyWyduYW1lJ107XG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBwYXJhbWV0ZXJbJ3BsYWNlaG9sZGVyJ107XG4gICAgICAgICAgICAgICAgaHRtbCA9IFtcbiAgICAgICAgICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBteS0zXCIgcGFyYW1ldGVyVHlwZT1cIiR7dHlwZX1cIiBpZD1cIiR7aWR9XCI+YCxcbiAgICAgICAgICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+YCxcbiAgICAgICAgICAgICAgICAgICAgYDxsYWJlbCBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIiBmb3I9XCJpbnB1dC0ke2lkfVwiPiR7bmFtZX08L2xhYmVsPmAsXG4gICAgICAgICAgICAgICAgICAgIGA8L2Rpdj5gLFxuXG4gICAgICAgICAgICAgICAgICAgIGA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHBsYWNlaG9sZGVyPVwiJHtwbGFjZWhvbGRlcn1cIiBpZD1cImlucHV0LSR7aWR9XCI+YCxcbiAgICAgICAgICAgICAgICAgICAgYDwvZGl2PmAsXG4gICAgICAgICAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICQoJyNvcHRpb25hbFBhcmFtZXRlckxpc3QnKS5hcHBlbmQoaHRtbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRSZXF1aXJlZFBhcmFtZXRlckRhdGEoYXBpQ2FsbCwgdGFibGVJZCwgYXBpS2V5LCBvbGRQYXJhbSkge1xuICAgICAgICBjb25zdCB1cmxPYmogPSBuZXcgQnJpZGdlKGFwaUNhbGwsIGFwaUtleSkuc2V0VXJsKCk7XG5cbiAgICAgICAgQXhpb3Moe1xuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgIHVybDogdXJsT2JqLmFwaUNhbGwsXG4gICAgICAgICAgICBoZWFkZXJzOiB1cmxPYmouaGVhZGVycyxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFibGVJbmZvID0gdGFibGVzW3RhYmxlSWRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXN1bHRbdGFibGVJbmZvWydyZXF1aXJlZFBhcmFtZXRlciddWydkYXRhJ11dO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVDb2wgPSB0YWJsZUluZm9bJ3JlcXVpcmVkUGFyYW1ldGVyJ11bJ25hbWVDb2wnXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxDb2wgPSB0YWJsZUluZm9bJ3JlcXVpcmVkUGFyYW1ldGVyJ11bJ3ZhbENvbCddO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gJCgnI3JlcXVpcmVkUGFyYW1ldGVyU2VsZWN0b3InKVswXTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkT3B0aW9uKGRhdGFbaV1bbmFtZUNvbF0sIGRhdGFbaV1bdmFsQ29sXSwgc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICgnbmV4dCcgaW4gcmVzdWx0Lm1ldGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRSZXF1aXJlZFBhcmFtZXRlckRhdGEoXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQubWV0YS5uZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaUtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFBhcmFtLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRQYXJhbSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNyZXF1aXJlZFBhcmFtZXRlclNlbGVjdG9yJykudmFsKG9sZFBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaFBhZ2UoJ2FwaS1zZWN0aW9uJywgJ2VkaXQtc2VjdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dFcnJvck1lc3NhZ2UodGhpcy5lcnJvck1lc3NhZ2UsIDUpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCdXR0b25zIH07XG4iLCIvLyBAdHMtbm9jaGVja1xuLy9lbnVtIHN0cmluZyBuYW1lcywgbWFrZXMgaXQgbXVjaCBlYXNpZXIgdGhhbiB1c2luZyB0aGUgdGFibGVhdSBlbnVtXG4vL2RhdGFUeXBlRW51bTogeyBib29sOiBcImJvb2xcIiwgZGF0ZTogXCJkYXRlXCIsIGRhdGV0aW1lOiBcImRhdGV0aW1lXCIsIGZsb2F0OiBcImZsb2F0XCIsIGludDogXCJpbnRcIiwgc3RyaW5nOiBcInN0cmluZ1wiLCBnZW9tZXRyeTogXCJnZW9tZXRyeVwiIH1cbmltcG9ydCB7IFRhYmxlTmFtZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmltcG9ydCB7IGNvdXJzZVRlbXBsYXRlcyB9IGZyb20gJy4vY291cnNlVGVtcGxhdGVzJztcbi8vaW1wb3J0IHsgZ3JvdXBzIH0gZnJvbSAnLi9ncm91cHMnO1xuaW1wb3J0IHsgbGlzdEVucm9sbG1lbnRzIH0gZnJvbSAnLi9saXN0RW5yb2xsbWVudHMnO1xuLy9pbXBvcnQgeyBsaXN0UHJvZ3JhbUxlYXJuZXJzIH0gZnJvbSAnLi9saXN0UHJvZ3JhbUxlYXJuZXJzJztcbi8vaW1wb3J0IHsgbGl2ZUNvdXJzZVNlc3Npb25zIH0gZnJvbSAnLi9saXZlQ291cnNlU2Vzc2lvbnMnO1xuLy9pbXBvcnQgeyBsaXZlQ291cnNlcyB9IGZyb20gJy4vbGl2ZUNvdXJzZXMnO1xuLy9pbXBvcnQgeyBwcm9ncmFtcyB9IGZyb20gJy4vcHJvZ3JhbXMnO1xuLy9pbXBvcnQgeyB0YWdnZWRJdGVtcyB9IGZyb20gJy4vdGFnZ2VkSXRlbXMnO1xuLy9pbXBvcnQgeyB0YWdzIH0gZnJvbSAnLi90YWdzJztcbi8vaW1wb3J0IHsgdGFza3MgfSBmcm9tICcuL3Rhc2tzJztcbmltcG9ydCB7IHVzZXJzIH0gZnJvbSAnLi91c2Vycyc7XG5cbi8vIENvbW1lbnRpbmcgb3V0IHRhYmxlcyB3ZSBkbyBub3Qgd2FudCB0byBtYWtlIGF2YWlsYWJsZSB5ZXQuXG5jb25zdCB0YWJsZXM6IFRhYmxlTmFtZSA9IHtcbiAgICAuLi5jb3Vyc2VUZW1wbGF0ZXMsXG4gICAgLy8uLi5ncm91cHMsXG4gICAgLi4ubGlzdEVucm9sbG1lbnRzLFxuICAgIC8vLi4ubGlzdFByb2dyYW1MZWFybmVycyxcbiAgICAvLy4uLmxpdmVDb3Vyc2VTZXNzaW9ucyxcbiAgICAvLy4uLmxpdmVDb3Vyc2VzLFxuICAgIC8vLi4ucHJvZ3JhbXMsXG4gICAgLy8uLi50YWdnZWRJdGVtcyxcbiAgICAvLy4uLnRhZ3MsXG4gICAgLy8uLi50YXNrcyxcbiAgICAuLi51c2Vycyxcbn07XG5cbmV4cG9ydCB7IHRhYmxlcywgVGFibGVOYW1lIH07XG4iLCJpbXBvcnQgQXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnYXhpb3MnO1xuXG5pbnRlcmZhY2UgRGVmYXVsdEhlYWRlcnMge1xuICAgIEF1dGhvcml6YXRpb246IHN0cmluZztcbiAgICAnQ29udGVudC1UeXBlJzogYW55O1xuICAgIEFjY2VwdDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRGV2SGVhZGVycyB7XG4gICAgJ1gtRm9yd2FyZGVkLVByb3RvJz86IHN0cmluZztcbiAgICAnWC1Gb3J3YXJkZWQtSG9zdCc/OiBzdHJpbmc7XG4gICAgJ1gtRm9yd2FyZGVkLVBvcnQnPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSGVhZGVycyBleHRlbmRzIERlZmF1bHRIZWFkZXJzLCBEZXZIZWFkZXJzIHt9XG5cbmludGVyZmFjZSBTZXRVUkwge1xuICAgIGFwaUNhbGw6IGFueTsgLy8gVE9ETyB0aGlzIHNob3VsZCBiZSBVUkwsIGJ1dCBjYXVzZXMgc29tZSB0eXBlIHByb2JsZW1zIHdpdGggQXhpb3NcbiAgICBoZWFkZXJzOiBIZWFkZXJzO1xufVxuXG5jbGFzcyBCcmlkZ2Uge1xuICAgIGFwaUNhbGw6IGFueTtcbiAgICBhcGlLZXk6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKGFwaUNhbGw6IGFueSwgYXBpS2V5OiBhbnkpIHtcbiAgICAgICAgdGhpcy5hcGlDYWxsID0gYXBpQ2FsbDtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgfVxuXG4gICAgc2V0VXJsKGFwaUNhbGwgPSB0aGlzLmFwaUNhbGwsIGFwaUtleSA9IHRoaXMuYXBpS2V5KTogU2V0VVJMIHtcbiAgICAgICAgbGV0IHVybDogVVJMIHwgc3RyaW5nO1xuICAgICAgICBsZXQgZGV2SGVhZGVyczogRGV2SGVhZGVycztcblxuICAgICAgICBjb25zdCBwYXJzZWRVcmw6IFVSTCA9IG5ldyBVUkwoYXBpQ2FsbCk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRIZWFkZXJzOiBEZWZhdWx0SGVhZGVycyA9IHtcbiAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGFwaUtleSxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICAgIC8vIEFkZHJlc3Mgb2Ygd2VicGFjay1kZXYtc2VydmVyXG4gICAgICAgICAgICB1cmwgPSBuZXcgVVJMKFxuICAgICAgICAgICAgICAgIHBhcnNlZFVybC5wYXRobmFtZSArIHBhcnNlZFVybC5zZWFyY2gsXG4gICAgICAgICAgICAgICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODg4OCcsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZGV2SGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAnWC1Gb3J3YXJkZWQtUHJvdG8nOiBwYXJzZWRVcmwucHJvdG9jb2wsXG4gICAgICAgICAgICAgICAgJ1gtRm9yd2FyZGVkLUhvc3QnOiBwYXJzZWRVcmwuaG9zdG5hbWUsXG4gICAgICAgICAgICAgICAgJ1gtRm9yd2FyZGVkLVBvcnQnOiBwYXJzZWRVcmwucG9ydCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwgPSBwYXJzZWRVcmw7XG4gICAgICAgICAgICBkZXZIZWFkZXJzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXBpQ2FsbDogdXJsLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5kZWZhdWx0SGVhZGVycywgLi4uZGV2SGVhZGVycyB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFkZFJvdyh0YWJsZSwgbXlUYWJsZXMsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB0YWJsZWlkID0gdGFibGUudGFibGVJbmZvLmlkO1xuICAgICAgICBjb25zdCB0YWJsZUluZm8gPSBteVRhYmxlc1t0YWJsZWlkXTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdFt0YWJsZUluZm8uZGF0YV07XG4gICAgICAgIGNvbnN0IHRhYmxlRGF0YSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgcm93ID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbHVtbiBvZiB0YWJsZUluZm8udGFibGUuY29sdW1ucykge1xuICAgICAgICAgICAgICAgIGlmICgnbGlua2VkU291cmNlJyBpbiBjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9mb3IgZGF0YSBpbiBsaW5rZWQgc291cmNlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZWF1SWQgPSBjb2x1bW4uaWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlua2VkU291cmNlID0gY29sdW1uLmxpbmtlZFNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlua2VkSWQgPSBjb2x1bW4ubGlua2VkSWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YVtpXVsnbGlua3MnXVtsaW5rZWRTb3VyY2VdWydpZCddO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rZWRUeXBlID0gZGF0YVtpXVsnbGlua3MnXVtsaW5rZWRTb3VyY2VdWyd0eXBlJ107XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVUYWJsZSA9IHJlc3VsdFsnbGlua2VkJ11bbGlua2VkVHlwZV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtlZERhdGEgPSB0eXBlVGFibGUuZmlsdGVyKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5pZCA9PT0gaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5rZWREYXRhLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dbdGFibGVhdUlkXSA9IGxpbmtlZERhdGFbMF1bbGlua2VkSWRdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93W3RhYmxlYXVJZF0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgncGFyZW50X2lkJyBpbiBjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBjb2x1bW4uaWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudElkID0gY29sdW1uLnBhcmVudF9pZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViSWQgPSBjb2x1bW4uc3ViX2lkO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrcyB0byBlbnN1cmUgdGhlIHBhcmVudElkIGV4aXN0cyBpbiB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhhbXBsZTogc2VlIGNvdXJzZVRlbXBsYXRlcyB0YWJsZSBkZWZpbml0aW9uKHJlc3BvbnNlIG1heSBvciBtYXlub3QgYWN0dWFsbHkgaGF2ZSBhbiBhdXRob3IgZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudElkIGluIGRhdGFbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tpZF0gPSBkYXRhW2ldW3BhcmVudElkXVtzdWJJZF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dbaWRdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gY29sdW1uLmlkO1xuICAgICAgICAgICAgICAgICAgICByb3dbaWRdID0gZGF0YVtpXVtpZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFibGVEYXRhLnB1c2gocm93KTtcbiAgICAgICAgfVxuICAgICAgICB0YWJsZS5hcHBlbmRSb3dzKHRhYmxlRGF0YSk7XG4gICAgfVxuXG4gICAgcGVyZm9ybUFwaUNhbGwodGFibGUsIGRvbmVDYWxsYmFjaywgYXBpQ2FsbCwgbXlUYWJsZXMsIGFwaUtleT86IHN0cmluZykge1xuICAgICAgICBjb25zdCB1cmxPYmo6IFNldFVSTCA9IHRoaXMuc2V0VXJsKGFwaUNhbGwsIGFwaUtleSk7XG4gICAgICAgIGNvbnN0IHJlcTogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICAgIHVybDogdXJsT2JqLmFwaUNhbGwsXG4gICAgICAgICAgICBoZWFkZXJzOiB1cmxPYmouaGVhZGVycyxcbiAgICAgICAgfTtcbiAgICAgICAgQXhpb3MocmVxKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFJvdyh0YWJsZSwgbXlUYWJsZXMsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgaWYgKCduZXh0JyBpbiByZXN1bHQubWV0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcmZvcm1BcGlDYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lQ2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQubWV0YS5uZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbXlUYWJsZXMsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgZG9uZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgLy9UT0RPOiB0cnkgdG8gZmluZCBzb21lIHNvcnQgb2Ygd2F5IHRvIHJlcG9ydCBhbiBlcnJvciBzaW5jZSB0aGUgYnJvd3NlciBpcyBhbHJlYWR5IGNsb3NlZFxuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCcmlkZ2UgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd1cmwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCdcbiAgXTtcblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzIpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIGZ1bmN0aW9uIG90aGVyS2V5c0RlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiLy8gQHRzLW5vY2hlY2tcbmltcG9ydCB7XG4gICAgQWRkLFxuICAgIEFkZFRhYmxlT3B0aW9ucyxcbiAgICBDcmVkZW50aWFscyxcbiAgICBEZWxldGVMaXN0LFxuICAgIEVkaXRMaXN0LFxuICAgIEVkaXREb25lLFxuICAgIFJlc2V0Q3JlZGVudGlhbHMsXG4gICAgU3VibWl0LFxufSBmcm9tICcuL2J1dHRvbnMnO1xuXG4vL3J1bnMgdGhlc2UgZnVuY3Rpb25zIG9uIHBhZ2UgbG9hZFxuJChkb2N1bWVudCkucmVhZHkoKCkgPT4ge1xuICAgIC8vIEdsb2JhbCBjbGVhciB2YWx1ZSBmdW5jdGlvblxuICAgIHdpbmRvdy5jbGVhclZhbHVlID0gKGlkKSA9PiB7XG4gICAgICAgICQoYCMke2lkfWApLnZhbCgnJyk7XG4gICAgfTtcblxuICAgIC8vIEFkZCB0YWJsZXMgdGhhdCBhcmUgZGVmaW5lZCBpbiAuL3RhYmxlcy9hcGkvKiB0byBsaXN0XG4gICAgbmV3IEFkZFRhYmxlT3B0aW9ucygpO1xuXG4gICAgLy8gYnV0dG9uIHdoZW4gc3RhcnRpbmcgdG8gYWRkIGEgdGFibGVcbiAgICBuZXcgQWRkKCk7XG5cbiAgICAvLyBBZGRzIGVkaXQgYnV0dG9uIHRvIGVhY2ggYWRkZWQgdGFibGVcbiAgICBuZXcgRWRpdExpc3QoKTtcblxuICAgIC8vIEFkZHMgZWRpdCBidXR0b24gdG8gZWFjaCBhZGRlZCB0YWJsZVxuICAgIG5ldyBEZWxldGVMaXN0KCk7XG5cbiAgICAvLyBidXR0b24gd2hlbiBkb25lIGVkaXRpbmcgYSB0YWJsZVxuICAgIG5ldyBFZGl0RG9uZSgpO1xuXG4gICAgLy8gYnV0dG9uIHRvIGdvIGJhY2sgdG8gcGFnZSBmb3IgZW50ZXJpbmcgdGhlIHVybCBhbmQgYXBpIGtleVxuICAgIC8vIENoYW5nZSBVUkwgYW5kIENyZWRlbnRpYWxzXG4gICAgbmV3IFJlc2V0Q3JlZGVudGlhbHMoKTtcblxuICAgIC8vIGJ1dHRvbiB0byBnbyBmcm9tIGNyZWRlbnRpYWxzIHNlY3Rpb24gdG8gYXBpIHNlY3Rpb25cbiAgICAvLyBTZXQgQ3JlZGVudGlhbHMgYW5kIFVSTFxuICAgIG5ldyBDcmVkZW50aWFscygpO1xuXG4gICAgLy9idXR0b24gZm9yIHdoZW4gdGhlIHVzZXIgaXMgZG9uZSBjaG9vc2luZyB0YWJsZXNcbiAgICBuZXcgU3VibWl0KCk7XG59KTtcbiIsImltcG9ydCB7IEFkZCB9IGZyb20gJy4vYWRkJztcbmltcG9ydCB7IEFkZFRhYmxlT3B0aW9ucyB9IGZyb20gJy4vYWRkVGFibGVPcHRpb25zJztcbmltcG9ydCB7IEJ1dHRvbnMgfSBmcm9tICcuL2J1dHRvbnMnO1xuaW1wb3J0IHsgQ3JlZGVudGlhbHMgfSBmcm9tICcuL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IERlbGV0ZUxpc3QgfSBmcm9tICcuL2RlbGV0ZUxpc3QnO1xuaW1wb3J0IHsgRWRpdERvbmUgfSBmcm9tICcuL2VkaXREb25lJztcbmltcG9ydCB7IEVkaXRMaXN0IH0gZnJvbSAnLi9lZGl0TGlzdCc7XG5pbXBvcnQgeyBSZXNldENyZWRlbnRpYWxzIH0gZnJvbSAnLi9yZXNldENyZWRlbnRpYWxzJztcbmltcG9ydCB7IFN1Ym1pdCB9IGZyb20gJy4vc3VibWl0JztcblxuZXhwb3J0IHtcbiAgICBBZGQsXG4gICAgQWRkVGFibGVPcHRpb25zLFxuICAgIEJ1dHRvbnMsXG4gICAgQ3JlZGVudGlhbHMsXG4gICAgRGVsZXRlTGlzdCxcbiAgICBFZGl0RG9uZSxcbiAgICBFZGl0TGlzdCxcbiAgICBSZXNldENyZWRlbnRpYWxzLFxuICAgIFN1Ym1pdCxcbn07XG4iLCJpbXBvcnQgeyBCdXR0b25zIH0gZnJvbSAnLi9idXR0b25zJztcblxuY2xhc3MgQWRkIGV4dGVuZHMgQnV0dG9ucyB7XG4gICAgYXBpOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgJCgnI2FkZEJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBpID0gJCgnI2FwaVNlbGVjdG9yJykudmFsKCk7XG5cbiAgICAgICAgICAgICQoJyN0YWJsZU5hbWUnKS52YWwodGhpcy50YWJsZXNbdGhpcy5hcGldWyd0YWJsZSddWydhbGlhcyddKTtcbiAgICAgICAgICAgICQoJyNlZGl0LXNlY3Rpb24nKS5hdHRyKCdjdXJyZW50VGFibGUnLCAkKCcjYXBpTGlzdCBsaScpLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyh0aGlzLmFwaSwgdGhpcy50YWJsZXMpO1xuICAgICAgICAgICAgdGhpcy5yZXF1aXJlZFBhcmFtZXRlcih0aGlzLmFwaSwgdGhpcy50YWJsZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXJhbWV0ZXJzKGFwaSwgdGFibGVzKSB7XG4gICAgICAgIGlmICgncGFyYW1ldGVycycgaW4gdGFibGVzW2FwaV0pIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBhcGkgY2FsbCBoYXMgb3B0aW9uYWwgcGFyYW1ldGVyc1xuICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudCgnb3B0aW9uYWxQYXJhbWV0ZXJTZWN0aW9uJywgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmFkZE9wdGlvbmFsUGFyYW1ldGVycyhhcGkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVxdWlyZWRQYXJhbWV0ZXIoYXBpLCB0YWJsZXMpIHtcbiAgICAgICAgbGV0IHVybDogYW55O1xuICAgICAgICBsZXQgYmFzZTogYW55O1xuICAgICAgICBsZXQgdGl0bGU6IGFueTtcblxuICAgICAgICBpZiAoJ3JlcXVpcmVkUGFyYW1ldGVyJyBpbiB0YWJsZXNbYXBpXSkge1xuICAgICAgICAgICAgdXJsID0gdGFibGVzW2FwaV1bJ3JlcXVpcmVkUGFyYW1ldGVyJ11bJ3BhdGgnXTtcbiAgICAgICAgICAgIGJhc2UgPSAkKCcjdXJsJykudmFsKCk7XG4gICAgICAgICAgICB0aXRsZSA9IHRhYmxlc1thcGldWydyZXF1aXJlZFBhcmFtZXRlciddWyd0aXRsZSddO1xuXG4gICAgICAgICAgICAvL2lmIHRoZSBhcGkgY2FsbCByZXF1aXJlcyBhIHBhcmFtZXRlclxuICAgICAgICAgICAgdGhpcy5zaG93TG9hZGluZyh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJSZXF1aXJlZFBhcmFtZXRlck9wdGlvbnMoKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd0VsZW1lbnQoJ3JlcXVpcmVkUGFyYW1ldGVyJywgdHJ1ZSk7XG4gICAgICAgICAgICAkKCcjcmVxdWlyZWRQYXJhbWV0ZXJUaXRsZScpLnRleHQodGl0bGUpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldFJlcXVpcmVkUGFyYW1ldGVyRGF0YShcbiAgICAgICAgICAgICAgICAgICAgbmV3IFVSTCh1cmwsIGJhc2UpLFxuICAgICAgICAgICAgICAgICAgICBhcGksXG4gICAgICAgICAgICAgICAgICAgICQoJyNhcGlLZXknKS52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dFcnJvck1lc3NhZ2UodGhpcy5lcnJvck1lc3NhZ2UsIDUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9pZiB0aGUgYXBpIGNhbGwgZG9lcyBub3QgcmVxdWlyZSBhIHBhcmFtZXRlclxuICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudCgncmVxdWlyZWRQYXJhbWV0ZXInLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyBzd2l0Y2ggdG8gZWRpdCBzZWN0aW9uXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFBhZ2UoJ2FwaS1zZWN0aW9uJywgJ2VkaXQtc2VjdGlvbicpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBBZGQgfTtcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My41LjEgLWFqYXgsLWFqYXgvanNvbnAsLWFqYXgvbG9hZCwtYWpheC9zY3JpcHQsLWFqYXgvdmFyL2xvY2F0aW9uLC1hamF4L3Zhci9ub25jZSwtYWpheC92YXIvcnF1ZXJ5LC1hamF4L3hociwtbWFuaXB1bGF0aW9uL19ldmFsVXJsLC1kZXByZWNhdGVkL2FqYXgtZXZlbnQtYWxpYXMsLWVmZmVjdHMsLWVmZmVjdHMvVHdlZW4sLWVmZmVjdHMvYW5pbWF0ZWRTZWxlY3RvclxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjAtMDUtMDRUMjI6NDlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNS4xIC1hamF4LC1hamF4L2pzb25wLC1hamF4L2xvYWQsLWFqYXgvc2NyaXB0LC1hamF4L3Zhci9sb2NhdGlvbiwtYWpheC92YXIvbm9uY2UsLWFqYXgvdmFyL3JxdWVyeSwtYWpheC94aHIsLW1hbmlwdWxhdGlvbi9fZXZhbFVybCwtZGVwcmVjYXRlZC9hamF4LWV2ZW50LWFsaWFzLC1lZmZlY3RzLC1lZmZlY3RzL1R3ZWVuLC1lZmZlY3RzL2FuaW1hdGVkU2VsZWN0b3JcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjVcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjAtMDMtMTRcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4XCI7XG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0ICkgPiAzO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHRcdClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggdHlwZW9mIHByb3BzLnRvcCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMudG9wICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGlmICggdHlwZW9mIHByb3BzLmxlZnQgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyBUYWJsZU5hbWUgfSBmcm9tICcuL2ludGVyZmFjZSc7XG4vLyBJdGVtcyB3aXRoIHBhcmVudF9pZHMgYXJlIGVzc2VudGlhbGx5IHJlc3BvbnNlIG9iamVjdCBkZWZpbml0aW9ucy4uLlxuLy8gRXhhbXBsZSBhdXRob3I6IHsgbmFtZSwgaWQsIHVpZCB9XG5pbXBvcnQge1xuICAgIGF1dGhvckNvbHVtbixcbiAgICBlbnJvbGxtZW50Q291bnRzQ29sdW1uLFxuICAgIHN1YkFjY291bnRDb2x1bW4sXG59IGZyb20gJy4vY291cnNlVGVtcGxhdGVzL2NvbHVtbnMvJztcblxuY29uc3QgdGFibGU6IFRhYmxlTmFtZSA9IHtcbiAgICBhdXRob3JDb3Vyc2VUZW1wbGF0ZXM6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICAgIGlkOiAnYXV0aG9yQ291cnNlVGVtcGxhdGVzJyxcbiAgICAgICAgICAgIGFsaWFzOiAnTGlzdCBDb3Vyc2VzJyxcbiAgICAgICAgICAgIGNvbHVtbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnQ291cnNlIElEJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdFc3RpbWF0ZWQgVGltZScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnZXN0aW1hdGVkX3RpbWUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2ludCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnQ291cnNlIFRpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdDcmVhdGVkIEF0JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdjcmVhdGVkX2F0JyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdkYXRldGltZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnRGVmYXVsdCBEYXlzIFVudGlsIER1ZScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnZGVmYXVsdF9kYXlzX3VudGlsX2R1ZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdEZWZhdWx0IER1ZSBPbiBEYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdkZWZhdWx0X2R1ZV9vbl9kYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdkYXRldGltZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnRHVlIERhdGUgVHlwZScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnZHVlX2RhdGVfdHlwZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdIYXMgQmVlbiBVbnB1Ymxpc2hlZCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnaGFzX2JlZW5fdW5wdWJsaXNoZWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2Jvb2wnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0lzIEFyY2hpdmVkJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdpc19hcmNoaXZlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnQXJjaGl2ZWQgQXQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2FyY2hpdmVkX2F0JyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdkYXRldGltZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnSXMgUHVibGlzaGVkJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdpc19wdWJsaXNoZWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2Jvb2wnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ1Bhc3NpbmcgVGhyZXNob2xkJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdwYXNzaW5nX3RocmVzaG9sZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdRdWl6emVzIENvdW50JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdxdWl6emVzX2NvdW50JyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdpbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ1VzZXMgQnJpZGdlIFJldGFpbicsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAncmV0YWluJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdib29sJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdVcGRhdGVkIEF0JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICd1cGRhdGVkX2F0JyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdkYXRldGltZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnTWF4IFF1aXogQXR0ZW1wdHMnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ21heF9xdWl6X2F0dGVtcHRzJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdpbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0NvbnRpbnVpbmcgRWR1Y2F0aW9uIENyZWRpdHMnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2NvbnRpbnVpbmdfZWR1Y2F0aW9uX2NyZWRpdHMnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2ludCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnRGVzY3JpcHRpb24gb2YgQ291cnNlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdkZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdIYXMgdW5wdWJsaXNoZWQgY2hhbmdlcycsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnaGFzX3VucHVibGlzaGVkX2NoYW5nZXMnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2Jvb2wnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0NvdXJzZSBUeXBlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdjb3Vyc2VfdHlwZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50cyBDb3VudCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnZW5yb2xsbWVudHNfY291bnQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2ludCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnSW5jb21wbGV0ZSBFbnJvbGxtZW50cyBDb3VudCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnaW5jb21wbGV0ZV9lbnJvbGxtZW50c19jb3VudCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdBdHRhY2htZW50cyBDb3VudCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnYXR0YWNobWVudHNfY291bnQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2ludCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnVGhpcmQgUGFydHkgQ291cnNlIElkJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICd0aGlyZF9wYXJ0eV9jb3Vyc2VfaWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnU2hvdyBDb3JyZWN0IFJlc3BvbnNlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdzaG93X2NvcnJlY3RfcmVzcG9uc2UnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2Jvb2wnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0JyYW5kaW5nIE92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdicmFuZGluZ19vdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnQ291cnNlIFRhZ3MnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ3RhZ3MnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsIC8vIGFycmF5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnQ291cnNlIENhdGVnb3JpZXMnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2NhdGVnb3JpZXMnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsIC8vIGFycmF5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnUXVpenplcyBPcGVuIEJvb2snLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ29wZW5fYm9vaycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnSGFzIENlcnRpZmljYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdoYXNfY2VydGlmaWNhdGUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2Jvb2wnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0V4dGVybmFsIENvdXJzZSBJRCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnaGFzX2NlcnRpZmljYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0R1ZSBEYXRlIFR5cGUgKFJlbGF0aXZlLCBGaXhlZCknLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2R1ZV9kYXRlX3R5cGUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnRGF0ZSBDb3Vyc2UgaXMgRHVlKEZpeGVkKScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnZGVmYXVsdF9kdWVfb25fZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnZGF0ZXRpbWUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0RlZmF1bHQgRGF5cyBVbnRpbCBEdWUnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2RlZmF1bHRfZGF5c191bnRpbF9kdWUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdDb3Vyc2UgUmVnaXN0cmF0aW9uIFVSTCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnZW5yb2xsX3VybCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC4uLmF1dGhvckNvbHVtbixcbiAgICAgICAgICAgICAgICAuLi5lbnJvbGxtZW50Q291bnRzQ29sdW1uLFxuICAgICAgICAgICAgICAgIC4uLnN1YkFjY291bnRDb2x1bW4sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBwYXRoOiAnL2FwaS9hdXRob3IvY291cnNlX3RlbXBsYXRlcycsXG4gICAgICAgIGRhdGE6ICdjb3Vyc2VfdGVtcGxhdGVzJyxcbiAgICAgICAgcGFyYW1ldGVyczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdTb3J0JyxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXI6ICdzb3J0JyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnb3B0aW9ucycsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJ0RlZmF1bHQnLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ05ld2VzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ25ld2VzdCcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1VwZGF0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICd1cGRhdGVkJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0FyY2hpdmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnYXJjaGl2ZWQnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdTZWFyY2gnLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcjogJ3NlYXJjaCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdzZWFyY2ggdGVybXMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnRmlsdGVycycsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnZmlsdGVycycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ZpbHRlcnMnLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICdEZWZhdWx0JyxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdNeSBDb3Vyc2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnbXlfY291cnNlcycsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdVbnB1Ymxpc2hlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ3VucHVibGlzaGVkJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0hhcyBDZXJ0aWZpY2F0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2hhc19jZXJ0aWZpY2F0ZScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdObyBFbnJvbGxtZW50cycsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ25vX2Vucm9sbG1lbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0JyaWRnZSBDb3Vyc2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnYnJpZGdlJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1Njb3JtIENvdXJzZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdzY29ybScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdMeW5kYSBDb3Vyc2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnbHluZGEnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnT3BlbnNlc2FtZSBDb3Vyc2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnb3BlbnNlc2FtZScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ09ubHkgRGVsZXRlZCcsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnb25seV9kZWxldGVkJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdJbmNsdWRlIERlbGV0ZWQnLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcjogJ3dpdGhfZGVsZXRlZCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnVXBkYXRlZCBBZnRlcicsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAndXBkYXRlZF9hZnRlcicsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ3JlYXRlZCBBZnRlcicsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnY3JlYXRlZF9hZnRlcicsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnRGVsZXRlZCBBZnRlcicsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnZGVsZXRlZF9hZnRlcicsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnVXBkYXRlZCBCZWZvcmUnLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcjogJ3VwZGF0ZWRfYmVmb3JlJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGF0ZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdDcmVhdGVkIEJlZm9yZScsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnY3JlYXRlZF9iZWZvcmUnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ0RlbGV0ZWQgQmVmb3JlJyxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXI6ICdkZWxldGVkX2JlZm9yZScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgdGFibGUgYXMgY291cnNlVGVtcGxhdGVzIH07XG4iLCJpbXBvcnQgeyBhdXRob3JDb2x1bW4gfSBmcm9tICcuL2F1dGhvckNvdWx1bW4nO1xuaW1wb3J0IHsgZW5yb2xsbWVudENvdW50c0NvbHVtbiB9IGZyb20gJy4vZW5yb2xsbWVudENvdW50c0NvbHVtbic7XG5pbXBvcnQgeyBtZXRhQ29sdW1uIH0gZnJvbSAnLi9tZXRhQ29sdW1uJztcbmltcG9ydCB7IHN1YkFjY291bnRDb2x1bW4gfSBmcm9tICcuL3N1YkFjY291bnRDb2x1bW4nO1xuXG5leHBvcnQgeyBhdXRob3JDb2x1bW4sIGVucm9sbG1lbnRDb3VudHNDb2x1bW4sIG1ldGFDb2x1bW4sIHN1YkFjY291bnRDb2x1bW4gfTtcbiIsImltcG9ydCB7IENvbHVtbiB9IGZyb20gJy4uLy4uL2ludGVyZmFjZSc7XG5cbmNvbnN0IGF1dGhvckNvbHVtbjogQXJyYXk8Q29sdW1uPiA9IFtcbiAgICB7XG4gICAgICAgIGFsaWFzOiAnQXV0aG9yIElEJyxcbiAgICAgICAgaWQ6ICdhdXRob3JfaWQnLFxuICAgICAgICBwYXJlbnRfaWQ6ICdhdXRob3InLFxuICAgICAgICBzdWJfaWQ6ICdpZCcsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuXTtcblxuZXhwb3J0IHsgYXV0aG9yQ29sdW1uIH07XG4iLCJpbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2UnO1xuXG5jb25zdCBlbnJvbGxtZW50Q291bnRzQ29sdW1uOiBBcnJheTxDb2x1bW4+ID0gW1xuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gQWxsJyxcbiAgICAgICAgaWQ6ICdlbnJvbGxtZW50LWNvdW50c19hbGwnLFxuICAgICAgICBwYXJlbnRfaWQ6ICdlbnJvbGxtZW50X2NvdW50cycsXG4gICAgICAgIHN1Yl9pZDogJ2FsbCcsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gUmVxdWlyZWQnLFxuICAgICAgICBpZDogJ2Vucm9sbG1lbnQtY291bnRzX3JlcXVpcmVkJyxcbiAgICAgICAgcGFyZW50X2lkOiAnZW5yb2xsbWVudF9jb3VudHMnLFxuICAgICAgICBzdWJfaWQ6ICdyZXF1aXJlZCcsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gT3B0aW9uYWwnLFxuICAgICAgICBpZDogJ2Vucm9sbG1lbnQtY291bnRzX29wdGlvbmFsJyxcbiAgICAgICAgcGFyZW50X2lkOiAnZW5yb2xsbWVudF9jb3VudHMnLFxuICAgICAgICBzdWJfaWQ6ICdvcHRpb25hbCcsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gRmluaXNoZWQnLFxuICAgICAgICBpZDogJ2Vucm9sbG1lbnQtY291bnRzX2ZpbmlzaGVkJyxcbiAgICAgICAgcGFyZW50X2lkOiAnZW5yb2xsbWVudF9jb3VudHMnLFxuICAgICAgICBzdWJfaWQ6ICdmaW5pc2hlZCcsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gSW4gUHJvZ3Jlc3MnLFxuICAgICAgICBpZDogJ2Vucm9sbG1lbnQtY291bnRzX2luLXByb2dyZXNzJyxcbiAgICAgICAgcGFyZW50X2lkOiAnZW5yb2xsbWVudF9jb3VudHMnLFxuICAgICAgICBzdWJfaWQ6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gSW5jb21wbGV0ZScsXG4gICAgICAgIGlkOiAnZW5yb2xsbWVudC1jb3VudHNfaW5jb21wbGV0ZScsXG4gICAgICAgIHBhcmVudF9pZDogJ2Vucm9sbG1lbnRfY291bnRzJyxcbiAgICAgICAgc3ViX2lkOiAnaW5jb21wbGV0ZScsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gSW5jb21wbGV0ZSBvciBGaW5pc2hlZCcsXG4gICAgICAgIGlkOiAnZW5yb2xsbWVudC1jb3VudHNfaW5jb21wbGV0ZS1vci1maW5pc2hlZCcsXG4gICAgICAgIHBhcmVudF9pZDogJ2Vucm9sbG1lbnRfY291bnRzJyxcbiAgICAgICAgc3ViX2lkOiAnaW5jb21wbGV0ZV9vcl9maW5pc2hlZCcsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gTm90IFN0YXJ0ZWQnLFxuICAgICAgICBpZDogJ2Vucm9sbG1lbnQtY291bnRzX25vdC1zdGFydGVkJyxcbiAgICAgICAgcGFyZW50X2lkOiAnZW5yb2xsbWVudF9jb3VudHMnLFxuICAgICAgICBzdWJfaWQ6ICdub3Rfc3RhcnRlZCcsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdFbnJvbGxtZW50IENvdW50IC0gT3ZlcmR1ZScsXG4gICAgICAgIGlkOiAnZW5yb2xsbWVudC1jb3VudHNfb3ZlcmR1ZScsXG4gICAgICAgIHBhcmVudF9pZDogJ2Vucm9sbG1lbnRfY291bnRzJyxcbiAgICAgICAgc3ViX2lkOiAnb3ZlcmR1ZScsXG4gICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICB9LFxuXTtcblxuZXhwb3J0IHsgZW5yb2xsbWVudENvdW50c0NvbHVtbiB9O1xuIiwiaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlJztcblxuY29uc3QgbWV0YUNvbHVtbjogQXJyYXk8Q29sdW1uPiA9IFtcbiAgICB7XG4gICAgICAgIGFsaWFzOiAnTWV0YSBEb21haW4gSUQnLFxuICAgICAgICBpZDogJ21ldGFfZG9tYWluX2lkJyxcbiAgICAgICAgcGFyZW50X2lkOiAnbWV0YScsXG4gICAgICAgIHN1Yl9pZDogJ2RvbWFpbl9pZCcsXG4gICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWxpYXM6ICdTdWJBY2NvdW50IElEJyxcbiAgICAgICAgaWQ6ICdtZXRhX3N1Yl9hY2NvdW50X2lkJyxcbiAgICAgICAgcGFyZW50X2lkOiAnbWV0YScsXG4gICAgICAgIHN1Yl9pZDogJ3N1Yl9hY2NvdW50X2lkJyxcbiAgICAgICAgZGF0YVR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG5dO1xuXG5leHBvcnQgeyBtZXRhQ29sdW1uIH07XG4iLCJpbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2UnO1xuXG5jb25zdCBzdWJBY2NvdW50Q29sdW1uOiBBcnJheTxDb2x1bW4+ID0gW1xuICAgIHtcbiAgICAgICAgYWxpYXM6ICdTdWJBY2NvdW50IElEJyxcbiAgICAgICAgaWQ6ICdzdWJfYWNjb3VudF9pZCcsXG4gICAgICAgIHBhcmVudF9pZDogJ3N1Yl9hY2NvdW50JyxcbiAgICAgICAgc3ViX2lkOiAnaWQnLFxuICAgICAgICBkYXRhVHlwZTogJ2ludCcsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGFsaWFzOiAnU3ViQWNjb3VudCBOYW1lJyxcbiAgICAgICAgaWQ6ICdzdWJfYWNjb3VudF9uYW1lJyxcbiAgICAgICAgcGFyZW50X2lkOiAnc3ViX2FjY291bnQnLFxuICAgICAgICBzdWJfaWQ6ICduYW1lJyxcbiAgICAgICAgZGF0YVR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG4gICAge1xuICAgICAgICBhbGlhczogJ1N1YkFjY291bnQgSXMgUm9vdCcsXG4gICAgICAgIGlkOiAnc3ViX2FjY291bnRfaXNfcm9vdCcsXG4gICAgICAgIHBhcmVudF9pZDogJ3N1Yl9hY2NvdW50JyxcbiAgICAgICAgc3ViX2lkOiAnaXNfcm9vdCcsXG4gICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgfSxcbl07XG5cbmV4cG9ydCB7IHN1YkFjY291bnRDb2x1bW4gfTtcbiIsImltcG9ydCB7IFRhYmxlTmFtZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuY29uc3QgdGFibGU6IFRhYmxlTmFtZSA9IHtcbiAgICBhdXRob3JMaXN0RW5yb2xsbWVudHM6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICAgIGlkOiAnYXV0aG9yTGlzdEVucm9sbG1lbnRzJyxcbiAgICAgICAgICAgIGFsaWFzOiAnU3BlY2lmaWMgQ291cnNlIEVucm9sbG1lbnRzJyxcbiAgICAgICAgICAgIGNvbHVtbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnRW5yb2xsbWVudCBJRCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnaWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2ludCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnQ291cnNlIElEJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdjb3Vyc2VfdGVtcGxhdGUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2ludCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnRHVlIEF0JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdlbmRfYXQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdFeHBpcmUgQXQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2V4cGlyZXNfYXQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdDb21wbGV0ZWQgQXQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2NvbXBsZXRlZF9hdCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnZGF0ZXRpbWUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0NyZWF0ZWQgQXQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2NyZWF0ZWRfYXQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdVcGRhdGVkIEF0JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICd1cGRhdGVkX2F0JyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdkYXRldGltZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnQ291cnNlIFByb2dyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdwcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnZmxvYXQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0lzIFJlbW92YWJsZScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnY2FuX2JlX3JlbW92ZWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2Jvb2wnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0lzIEFibGUgVG8gQmUgT3B0aW9uYWwnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2Nhbl9iZV9tYWRlX29wdGlvbmFsJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdib29sJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdJcyBBY3RpdmUnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2FjdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnSXMgUmVxdWlyZWQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ3JlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdib29sJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdJcyBQZXJtYW5lbnRseSBGYWlsZWQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2lzX3Blcm1hbmVudGx5X2ZhaWxlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnSXMgQXJjaGl2ZWQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2lzX2FyY2hpdmVkJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdib29sJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdTY29yZScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnc2NvcmUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2ludCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnRW5yb2xsbWVudCBTdGF0dXMnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ3N0YXRlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0NhbiBSZS1FbnJvbGwnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2FsbG93X3JlX2Vucm9sbCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGxpbmtlZFNvdXJjZTogJ2xlYXJuZXInLFxuICAgICAgICAgICAgICAgICAgICBsaW5rZWRJZDogJ25hbWUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnVXNlciBJRCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAndXNlcl9pZCcsXG4gICAgICAgICAgICAgICAgICAgIGxpbmtlZFNvdXJjZTogJ2xlYXJuZXInLFxuICAgICAgICAgICAgICAgICAgICBsaW5rZWRJZDogJ2lkJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdpbnQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBwYXRoOiAnL2FwaS9hdXRob3IvY291cnNlX3RlbXBsYXRlcy8qL2Vucm9sbG1lbnRzJyxcbiAgICAgICAgZGF0YTogJ2Vucm9sbG1lbnRzJyxcbiAgICAgICAgcmVxdWlyZWRQYXJhbWV0ZXI6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnQ291cnNlJyxcbiAgICAgICAgICAgIHBhdGg6ICcvYXBpL2F1dGhvci9jb3Vyc2VfdGVtcGxhdGVzJyxcbiAgICAgICAgICAgIGRhdGE6ICdjb3Vyc2VfdGVtcGxhdGVzJyxcbiAgICAgICAgICAgIG5hbWVDb2w6ICd0aXRsZScsXG4gICAgICAgICAgICB2YWxDb2w6ICdpZCcsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbmV4cG9ydCB7IHRhYmxlIGFzIGxpc3RFbnJvbGxtZW50cyB9O1xuIiwiaW1wb3J0IHsgVGFibGVOYW1lIH0gZnJvbSAnLi9pbnRlcmZhY2UnO1xuXG5jb25zdCB0YWJsZTogVGFibGVOYW1lID0ge1xuICAgIGF1dGhvclVzZXI6IHtcbiAgICAgICAgdGFibGU6IHtcbiAgICAgICAgICAgIGlkOiAnYXV0aG9yVXNlcicsXG4gICAgICAgICAgICBhbGlhczogJ0xpc3QgVXNlcnMnLFxuICAgICAgICAgICAgY29sdW1uczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdVc2VyIElEJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdpZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnaW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdVbmlxdWUgTG9naW4gSUQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ3VpZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdIUklTIElEJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdocmlzX2lkJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0ZpcnN0IE5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2ZpcnN0X25hbWUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnTGFzdCBOYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdsYXN0X25hbWUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnTGFuZ3VhZ2UnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2xvY2FsZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdFbWFpbCBBZGRyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdlbWFpbCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdXZWxjb21lZCB0byBCcmlkZ2UnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ3dlbGNvbWVkQXQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdMYXN0IExvZ2luJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdsb2dnZWRJbkF0JyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdkYXRldGltZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnUGFzc3dvcmQgaXMgU2V0JyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdwYXNzd29yZElzU2V0JyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdib29sJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdGdWxsIE5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2Z1bGxfbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdOYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICduYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0F2YXRhciBVUkwnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2F2YXRhcl91cmwnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnRGVsZXRlZCBBdCcsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnZGVsZXRlZF9hdCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnZGF0ZXRpbWUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ1VwZGF0ZWQgQXQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ3VwZGF0ZWRfYXQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdVbnN1YnNjcmliZWQgZnJvbSBFbWFpbHMnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ3Vuc3Vic2NyaWJlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnSGlyZSBEYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdoaXJlX2RhdGUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0lzIGEgTWFuYWdlcicsXG4gICAgICAgICAgICAgICAgICAgIGlkOiAnaXNfbWFuYWdlcicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnYm9vbCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnSm9iIFRpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdqb2JfdGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnVXNlciBCaW8nLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2JpbycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpYXM6ICdTb3J0YWJsZSBOYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdzb3J0YWJsZV9uYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbGlhczogJ0RlcGFydG1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ2RlcGFydG1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiAnUm9sZXMnLFxuICAgICAgICAgICAgICAgICAgICBpZDogJ3JvbGVzJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdzdHJpbmcnLCAvL2FycmF5XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHBhdGg6ICcvYXBpL2F1dGhvci91c2VycycsXG4gICAgICAgIGRhdGE6ICd1c2VycycsXG4gICAgICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnU29ydCcsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnc29ydCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ29wdGlvbnMnLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICdEZWZhdWx0JyxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdOYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdOdW1iZXIgb2YgQ29tcGxldGVkIENvdXJzZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdjb21wbGV0ZV9jb3Vyc2VzX2NvdW50JyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ05leHQgRHVlIERhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICduZXh0X2R1ZV9kYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnU2VhcmNoJyxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXI6ICdzZWFyY2gnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnc2VhcmNoIHRlcm1zJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ09ubHkgRGVsZXRlZCcsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnb25seV9kZWxldGVkJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdJbmNsdWRlIERlbGV0ZWQnLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcjogJ3dpdGhfZGVsZXRlZCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnUm9sZScsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAncm9sZScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ29wdGlvbnMnLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICdBbnknLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0FjY291bnQgQWRtaW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdhY2NvdW50X2FkbWluJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0FkbWluJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnYWRtaW4nLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnQXV0aG9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnYXV0aG9yJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnVXBkYXRlZCBBZnRlcicsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAndXBkYXRlZF9hZnRlcicsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ3JlYXRlZCBBZnRlcicsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnY3JlYXRlZF9hZnRlcicsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnRGVsZXRlZCBBZnRlcicsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnZGVsZXRlZF9hZnRlcicsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnVXBkYXRlZCBCZWZvcmUnLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcjogJ3VwZGF0ZWRfYmVmb3JlJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGF0ZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdDcmVhdGVkIEJlZm9yZScsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnY3JlYXRlZF9iZWZvcmUnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ0RlbGV0ZWQgQmVmb3JlJyxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXI6ICdkZWxldGVkX2JlZm9yZScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnT25seSBNYW5hZ2VycycsXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVyOiAnb25seV9tYW5hZ2VycycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxufTtcblxuZXhwb3J0IHsgdGFibGUgYXMgdXNlcnMgfTtcbiIsImltcG9ydCB7IEJ1dHRvbnMgfSBmcm9tICcuL2J1dHRvbnMnO1xuaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAnLi4vdGFibGVzL2FwaS9hdXRob3InO1xuXG5jbGFzcyBBZGRUYWJsZU9wdGlvbnMgZXh0ZW5kcyBCdXR0b25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5hZGRUYWJsZU9wdGlvbnModGFibGVzKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFkZFRhYmxlT3B0aW9ucyB9O1xuIiwiaW1wb3J0IHsgQnV0dG9ucyB9IGZyb20gJy4vYnV0dG9ucyc7XG5cbmNsYXNzIENyZWRlbnRpYWxzIGV4dGVuZHMgQnV0dG9ucyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgICQoJyNjcmVkZW50aWFsc0J1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoUGFnZSgndXJsLXNlY3Rpb24nLCAnYXBpLXNlY3Rpb24nKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBDcmVkZW50aWFscyB9O1xuIiwiaW1wb3J0IHsgQnV0dG9ucyB9IGZyb20gJy4vYnV0dG9ucyc7XG5cbi8vIENsYXNzIHVzZWQgaW4gZWRpdERvbmUgYnV0dG9uIHRvIGRlbGV0ZSBhIHRhYmxlIGZyb20gdGhlIGxpc3RcbmNsYXNzIERlbGV0ZUxpc3QgZXh0ZW5kcyBCdXR0b25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgJCgnI2FwaUxpc3QnKS5vbignY2xpY2snLCAnI2RlbGV0ZUxpc3QnLCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaWQ6IG51bWJlciA9IGV2ZW50LnRhcmdldC5vZmZzZXRQYXJlbnQuaWQ7XG5cbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0Lm9mZnNldFBhcmVudC5pZCA9PSBpZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlVGFibGUoaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IERlbGV0ZUxpc3QgfTtcbiIsImltcG9ydCB7IEJ1dHRvbnMgfSBmcm9tICcuL2J1dHRvbnMnO1xuXG5jbGFzcyBFZGl0RG9uZSBleHRlbmRzIEJ1dHRvbnMge1xuICAgIGlkOiBhbnk7XG4gICAgdWxMZW5ndGg6IGFueTtcbiAgICBhcGk6IGFueTtcbiAgICB0aXRsZTogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgICQoJyNlZGl0RG9uZUJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSAkKCcjZWRpdC1zZWN0aW9uJykuYXR0cignY3VycmVudFRhYmxlJyk7XG4gICAgICAgICAgICB0aGlzLnVsTGVuZ3RoID0gJCgnI2FwaUxpc3QgbGknKS5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmFwaSA9ICQoJyNhcGlTZWxlY3RvcicpLnZhbCgpO1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9ICQoJyN0YWJsZU5hbWUnKS52YWwoKTtcblxuICAgICAgICAgICAgdGhpcy5hcGlMaXN0KHRoaXMuaWQsIHRoaXMuYXBpLCB0aGlzLnRpdGxlLCB0aGlzLnVsTGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZWRQYXJhbWV0ZXIodGhpcy5pZCwgdGhpcy5hcGksIHRoaXMudGFibGVzKTtcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycyh0aGlzLmlkLCB0aGlzLmFwaSwgdGhpcy50YWJsZXMpO1xuXG4gICAgICAgICAgICAvLyBzd2l0Y2ggYmFjayB0byBhcGkgc2VjdGlvblxuICAgICAgICAgICAgdGhpcy5zd2l0Y2hQYWdlKCdlZGl0LXNlY3Rpb24nLCAnYXBpLXNlY3Rpb24nKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd0VsZW1lbnQoJ29wdGlvbmFsUGFyYW1ldGVyU2VjdGlvbicsIGZhbHNlKTtcbiAgICAgICAgICAgICQoJyNvcHRpb25hbFBhcmFtZXRlclNlbGVjdG9yJykuZW1wdHkoKTtcbiAgICAgICAgICAgICQoJyNvcHRpb25hbFBhcmFtZXRlckxpc3QnKS5odG1sKCcnKTtcbiAgICAgICAgICAgIGlmICgkKCcjb3B0aW9uYWxQYXJhbWV0ZXJMaXN0JykuaGFzQ2xhc3MoJ3Nob3cnKSkge1xuICAgICAgICAgICAgICAgICQoJyNvcHRpb25hbFBhcmFtZXRlckJ1dHRvbicpLmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFwaUxpc3QoaWQsIGFwaSwgdGl0bGUsIHVsTGVuZ3RoKTogdm9pZCB7XG4gICAgICAgIC8vIGNoZWNrIGlmIGlkIGV4aXN0cyB0byBzZWUgaWYgdGhpcyBpcyBhbiBlZGl0IG9yIGFuIGFkZFxuICAgICAgICBpZiAoaWQgPCB1bExlbmd0aCkge1xuICAgICAgICAgICAgLy8gZWRpdGluZyB0YWJsZSBlbnRyeVxuICAgICAgICAgICAgJCgnIycgKyBpZCArICcgLnRpdGxlJykudGV4dCh0aXRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhZGRpbmcgdGFibGUgZW50cnlcbiAgICAgICAgICAgIC8vIHJlbW92ZSBlbXB0eSBsaXN0IG1lc3NhZ2Ugd2hlbiBhZGRpbmcgZmlyc3QgZW50cnlcbiAgICAgICAgICAgIGlmICh1bExlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93RWxlbWVudCgnZW1wdHlBcGlMaXN0TWVzc2FnZScsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaHRtbDogc3RyaW5nID0gdGhpcy5idWlsZEh0bWwoaWQsIGFwaSwgdGl0bGUpO1xuICAgICAgICAgICAgJCgnI2FwaUxpc3QnKS5hcHBlbmQoaHRtbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGRzIHRoZSBFZGl0IGFuZCBEZWxldGUgQnV0dG9ucyBmb3IgZWFjaCB0YWJsZSBpdGVtXG4gICAgYnVpbGRIdG1sKGlkLCBhcGksIHRpdGxlKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGA8bGkgZGF0YS1hcGk9XCIke2FwaX1cIiBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbVwiIGlkPVwiJHtpZH1cIj5gLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJyb3dcIj5gLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJjb2wgdGl0bGVDb2x1bW5cIj5gLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJ0aXRsZVwiPiR7dGl0bGV9PC9kaXY+YCxcbiAgICAgICAgICAgIGA8L2Rpdj5gLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJjb2wteHMtYXV0b1wiPmAsXG4gICAgICAgICAgICBgPHNwYW4+YCxcbiAgICAgICAgICAgIGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saWdodCBteC0xXCIgaWQ9XCJlZGl0TGlzdFwiIHR5cGU9XCJidXR0b25cIj5FZGl0PC9idXR0b24+YCxcbiAgICAgICAgICAgIGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saWdodCBteC0xXCIgaWQ9XCJkZWxldGVMaXN0XCIgdHlwZT1cImJ1dHRvblwiPkRlbGV0ZTwvYnV0dG9uPmAsXG4gICAgICAgICAgICBgPC9zcGFuPmAsXG4gICAgICAgICAgICBgPC9kaXY+YCxcbiAgICAgICAgICAgIGA8L2Rpdj5gLFxuICAgICAgICAgICAgYDwvbGk+YCxcbiAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICB9XG5cbiAgICByZXF1aXJlZFBhcmFtZXRlcihpZCwgYXBpLCB0YWJsZXMpOiBhbnkge1xuICAgICAgICBsZXQgcmVxdWlyZWRQYXJhbWV0ZXI6IGFueTtcblxuICAgICAgICBpZiAoJ3JlcXVpcmVkUGFyYW1ldGVyJyBpbiB0YWJsZXNbYXBpXSkge1xuICAgICAgICAgICAgLy9nZXQgcmVxdWlyZWQgcGFyYW1ldGVyIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgcmVxdWlyZWRQYXJhbWV0ZXIgPSAkKCcjcmVxdWlyZWRQYXJhbWV0ZXJTZWxlY3RvcicpLnZhbCgpO1xuICAgICAgICAgICAgJChgIyR7aWR9YCkuYXR0cignZGF0YS1yZXF1aXJlJywgcmVxdWlyZWRQYXJhbWV0ZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyYW1ldGVycyhpZCwgYXBpLCB0YWJsZXMpOiBhbnkge1xuICAgICAgICBsZXQgdmFsdWU6IGFueTtcbiAgICAgICAgaWYgKCdwYXJhbWV0ZXJzJyBpbiB0YWJsZXNbYXBpXSkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyTGlzdCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSAkKCcjb3B0aW9uYWxQYXJhbWV0ZXJMaXN0JykuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJJbnB1dCA9ICQoY2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgICAgIGxldCBuYW1lID0gcGFyYW1ldGVySW5wdXQuYXR0cignaWQnKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVySW5wdXQuYXR0cigncGFyYW1ldGVydHlwZScpID09ICdvcHRpb25zJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSAkKGAjaW5wdXQtJHtuYW1lfSBvcHRpb246c2VsZWN0ZWRgKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbiAhPSAnbm9zZWwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVySW5wdXQuYXR0cigncGFyYW1ldGVydHlwZScpID09ICdmaWx0ZXJzJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSAkKGAjaW5wdXQtJHtuYW1lfSBvcHRpb246c2VsZWN0ZWRgKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbiAhPSAnZmFsc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gYCR7bmFtZX1bXWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVySW5wdXQuYXR0cigncGFyYW1ldGVydHlwZScpID09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSAkKGAjaW5wdXQtJHtuYW1lfSBvcHRpb246c2VsZWN0ZWRgKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbiAhPSAnZmFsc2UnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVySW5wdXQuYXR0cigncGFyYW1ldGVydHlwZScpID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJChgI2lucHV0LSR7bmFtZX1gKS52YWwoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlcklucHV0LmF0dHIoJ3BhcmFtZXRlcnR5cGUnKSA9PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAkKGAjaW5wdXQtJHtuYW1lfWApLnZhbCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlckxpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJTdHJpbmcgPSAnJztcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlckxpc3RUb0pvaW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFyYW1ldGVyU2V0IG9mIHBhcmFtZXRlckxpc3QpIHtcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJMaXN0VG9Kb2luLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIFtwYXJhbWV0ZXJTZXRbJ25hbWUnXSwgcGFyYW1ldGVyU2V0Wyd2YWx1ZSddXS5qb2luKCc9JyksXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtZXRlclN0cmluZyA9IGVuY29kZVVSSUNvbXBvbmVudChwYXJhbWV0ZXJMaXN0VG9Kb2luLmpvaW4oJyYnKSk7XG4gICAgICAgICAgICAkKGAjJHtpZH1gKS5hdHRyKCdkYXRhLW9wdGlvbmFsJywgcGFyYW1ldGVyU3RyaW5nKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBhcmFtZXRlclN0cmluZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IEVkaXREb25lIH07XG4iLCJpbXBvcnQgeyBCdXR0b25zIH0gZnJvbSAnLi9idXR0b25zJztcblxuLy8gQ2xhc3MgdXNlZCBpbiBlZGl0RG9uZSBidXR0b24gdG8gZWRpdCB0YWJsZXMgZnJvbSB0aGUgbGlzdFxuY2xhc3MgRWRpdExpc3QgZXh0ZW5kcyBCdXR0b25zIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgJCgnI2FwaUxpc3QnKS5vbignY2xpY2snLCAnI2VkaXRMaXN0JywgKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkOiBudW1iZXIgPSBldmVudC50YXJnZXQub2Zmc2V0UGFyZW50LmlkO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5vZmZzZXRQYXJlbnQuaWQgPT0gaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRUYWJsZShpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRWRpdExpc3QgfTtcbiIsImltcG9ydCB7IEJ1dHRvbnMgfSBmcm9tICcuL2J1dHRvbnMnO1xuXG5jbGFzcyBSZXNldENyZWRlbnRpYWxzIGV4dGVuZHMgQnV0dG9ucyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgICQoJyNyZXNldEJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoUGFnZSgnYXBpLXNlY3Rpb24nLCAndXJsLXNlY3Rpb24nKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBSZXNldENyZWRlbnRpYWxzIH07XG4iLCJpbXBvcnQgeyBCdXR0b25zIH0gZnJvbSAnLi9idXR0b25zJztcbmltcG9ydCB7IFRhYmxlYXUgfSBmcm9tICcuLi90YWJsZWF1JztcblxuY2xhc3MgU3VibWl0IGV4dGVuZHMgQnV0dG9ucyB7XG4gICAgdGFibGVhdTogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudGFibGVhdSA9IG5ldyBUYWJsZWF1KCk7XG5cbiAgICAgICAgJCgnI3N1Ym1pdEJ1dHRvbicpLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVsID0gJCgnI2FwaUxpc3QnKVswXTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gdWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xpJyk7XG4gICAgICAgICAgICBjb25zdCBhcGlDYWxscyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMgYXMgYW55KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VGFibGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFwaUNhbGw6IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWFwaScpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0aXRsZScpWzBdLmlubmVyVGV4dCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc0F0dHJpYnV0ZSgnZGF0YS1yZXF1aXJlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VGFibGVbJ3JlcXVpcmVkUGFyYW1ldGVyJ10gPSBpdGVtLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLXJlcXVpcmUnLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5oYXNBdHRyaWJ1dGUoJ2RhdGEtb3B0aW9uYWwnKSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdUYWJsZVsnb3B0aW9uYWxQYXJhbWV0ZXJzJ10gPSBpdGVtLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLW9wdGlvbmFsJyxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXBpQ2FsbHMucHVzaChuZXdUYWJsZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgdXJsOiAkKCcjdXJsJykudmFsKCksXG4gICAgICAgICAgICAgICAgdGFibGVzOiBhcGlDYWxscyxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMudGFibGVhdS5jb25uZWN0aW9uRGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICAgICAgdGhpcy50YWJsZWF1LmFwaUtleSA9ICQoJyNhcGlLZXknKS52YWwoKTtcbiAgICAgICAgICAgIHRoaXMudGFibGVhdS5jb25uZWN0aW9uTmFtZSA9ICdCcmlkZ2UgQVBJJztcbiAgICAgICAgICAgIHRoaXMudGFibGVhdS50YWJsZWF1U3VibWl0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU3VibWl0IH07XG4iLCIvKiBBbGxvdyB0aGUgdXNlIG9mIGBhbnlgIHR5cGUgdW50aWwgdGFibGVhdXdkYyBhZGRzIHR5cGVzLCBvciB3ZSBhZGQgb3VyIG93biovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5cbmltcG9ydCB7IGlzSnNvblN0cmluZyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAnLi90YWJsZXMvYXBpL2F1dGhvcic7XG5pbXBvcnQgeyBCcmlkZ2UgfSBmcm9tICcuL2FwaS9icmlkZ2UnO1xuXG5kZWNsYXJlIGNvbnN0IHRhYmxlYXU6IGFueTsgLy8gRGVjbGFyZWQgaGVyZSwgc2luY2UgdGFibGVhdXdkYy0yLjMubGF0ZXN0Lm1pbi5qcyBpcyBtYWRlIGdsb2JhbGx5IGF2YWlsYWJsZSB2aWEgaHRtbCBzcmMuXG5cbmNsYXNzIFRhYmxlYXUge1xuICAgIG15Q29ubmVjdG9yOiBhbnk7XG4gICAgbXlUYWJsZXM6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm15Q29ubmVjdG9yID0gdGFibGVhdS5tYWtlQ29ubmVjdG9yKCk7XG4gICAgICAgIHRoaXMubXlUYWJsZXMgPSB7fTtcblxuICAgICAgICAvLyB0YWJsZWF1IGluaXRcbiAgICAgICAgdGhpcy5teUNvbm5lY3Rvci5pbml0ID0gKGluaXRDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgdGFibGVhdS5sb2coJ3RhYmxlYXUgd2ViIGNvbm5lY3RvciBpbml0aWFsaXphdGlvbicpO1xuICAgICAgICAgICAgdGFibGVhdS5hdXRoVHlwZSA9IHRhYmxlYXUuYXV0aFR5cGVFbnVtLmN1c3RvbTtcbiAgICAgICAgICAgIGluaXRDYWxsYmFjaygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHRhYmxlYXUgZ2V0IHNjaGVtYVxuICAgICAgICAvLyBleHBsaWNpdGx5IHVzaW5nIGFycm93IGZ1bmN0aW9uIGhlcmUsIGFzIGl0IGFsbG93cyBhY2Nlc3MgdG8gbmVzdGVkKHRoaXMpIG9iamVjdHNcbiAgICAgICAgdGhpcy5teUNvbm5lY3Rvci5nZXRTY2hlbWEgPSAoc2NoZW1hQ2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRhYmxlYXUubG9nKCdnZXRTY2hlbWEnKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHRhYmxlYXUuY29ubmVjdGlvbkRhdGEpO1xuICAgICAgICAgICAgY29uc3QgY2hvc2VuVGFibGVzID0gW107XG4gICAgICAgICAgICBsZXQgaWRDb3VudGVyID0gMTtcblxuICAgICAgICAgICAgLy8gdGFrZXMgZWFjaCBjdXN0b20gdGFibGUgYW5kIGdyYWJzIHRoZSBjb3JyZWRwb25kaW5nIHRlbXBsYXRlIHRhYmxlIGRhdGFcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGFibGUgb2YgZGF0YS50YWJsZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcGlDYWxsID0gdGFibGVbJ2FwaUNhbGwnXTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUYWJsZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGFibGVzW2FwaUNhbGxdKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSAndGFibGUnICsgaWRDb3VudGVyO1xuICAgICAgICAgICAgICAgIG5ld1RhYmxlWyd0YWJsZSddWydhbGlhcyddID0gdGFibGVbJ3RpdGxlJ107XG4gICAgICAgICAgICAgICAgbmV3VGFibGVbJ3RhYmxlJ11bJ2lkJ10gPSBpZDtcbiAgICAgICAgICAgICAgICBpZENvdW50ZXIgPSBpZENvdW50ZXIgKyAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKCdyZXF1aXJlZFBhcmFtZXRlcicgaW4gdGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkQXBpQ2FsbCA9IG5ld1RhYmxlWydwYXRoJ107XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FwaUNhbGwgPSBvbGRBcGlDYWxsLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAnKicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVsncmVxdWlyZWRQYXJhbWV0ZXInXSxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3VGFibGVbJ3BhdGgnXSA9IG5ld0FwaUNhbGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgnb3B0aW9uYWxQYXJhbWV0ZXJzJyBpbiB0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGRBcGlDYWxsID0gbmV3VGFibGVbJ3BhdGgnXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3QXBpQ2FsbCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRBcGlDYWxsICsgJz8nICsgdGFibGVbJ29wdGlvbmFsUGFyYW1ldGVycyddO1xuICAgICAgICAgICAgICAgICAgICBuZXdUYWJsZVsncGF0aCddID0gbmV3QXBpQ2FsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5teVRhYmxlc1tpZF0gPSBuZXdUYWJsZTtcbiAgICAgICAgICAgICAgICBjaG9zZW5UYWJsZXMucHVzaChuZXdUYWJsZS50YWJsZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coY2hvc2VuVGFibGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjaGVtYUNhbGxiYWNrKGNob3NlblRhYmxlcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy90YWJsZWF1IGdldCBkYXRhXG4gICAgICAgIHRoaXMubXlDb25uZWN0b3IuZ2V0RGF0YSA9ICh0YWJsZSwgZG9uZUNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICB0YWJsZWF1LmxvZygnZ2V0RGF0YScpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UodGFibGVhdS5jb25uZWN0aW9uRGF0YSk7XG4gICAgICAgICAgICBjb25zdCB0YWJsZWlkID0gdGFibGUudGFibGVJbmZvLmlkO1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMubXlUYWJsZXNbdGFibGVpZF0ucGF0aDtcbiAgICAgICAgICAgIGNvbnN0IGFwaUNhbGwgPSBuZXcgVVJMKHBhdGgsIGRhdGEudXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGJyaWRnZUFwaSA9IG5ldyBCcmlkZ2UoYXBpQ2FsbCwgdGFibGVhdS5wYXNzd29yZCk7XG5cbiAgICAgICAgICAgIGJyaWRnZUFwaS5wZXJmb3JtQXBpQ2FsbChcbiAgICAgICAgICAgICAgICB0YWJsZSxcbiAgICAgICAgICAgICAgICBkb25lQ2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgYXBpQ2FsbCxcbiAgICAgICAgICAgICAgICB0aGlzLm15VGFibGVzLFxuICAgICAgICAgICAgICAgIHRhYmxlYXUucGFzc3dvcmQsXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vdGFibGVhdSBjb25uZWN0b3IgcmVnaXN0cmF0aW9uXG4gICAgICAgIHRhYmxlYXUucmVnaXN0ZXJDb25uZWN0b3IodGhpcy5teUNvbm5lY3Rvcik7XG4gICAgfVxuXG4gICAgc2V0IGFwaUtleShhcGlLZXk6IGFueSkge1xuICAgICAgICB0YWJsZWF1LnBhc3N3b3JkID0gYXBpS2V5O1xuICAgIH1cblxuICAgIGdldCBhcGlLZXkoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRhYmxlYXUucGFzc3dvcmQ7XG4gICAgfVxuXG4gICAgc2V0IGNvbm5lY3Rpb25EYXRhKGRhdGE6IGFueSkge1xuICAgICAgICBpZiAoaXNKc29uU3RyaW5nKGRhdGEpKSB7XG4gICAgICAgICAgICB0YWJsZWF1LmNvbm5lY3Rpb25EYXRhID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhYmxlYXUuY29ubmVjdGlvbkRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBjb25uZWN0aW9uRGF0YSgpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGFibGVhdS5jb25uZWN0aW9uRGF0YTtcbiAgICB9XG5cbiAgICBzZXQgY29ubmVjdGlvbk5hbWUobmFtZTogYW55KSB7XG4gICAgICAgIHRhYmxlYXUuY29ubmVjdGlvbk5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIGdldCBjb25uZWN0aW9uTmFtZSgpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGFibGVhdS5jb25uZWN0aW9uTmFtZTtcbiAgICB9XG5cbiAgICB0YWJsZWF1U3VibWl0KCk6IGFueSB7XG4gICAgICAgIHRhYmxlYXUuc3VibWl0KCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBUYWJsZWF1IH07XG4iLCJmdW5jdGlvbiBpc0pzb25TdHJpbmcoc3RyOiBhbnkpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgICBKU09OLnBhcnNlKHN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgeyBpc0pzb25TdHJpbmcgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=