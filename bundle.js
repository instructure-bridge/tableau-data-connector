!function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=31)}([function(e,t,r){"use strict";var a=r(3),n=Object.prototype.toString;function o(e){return"[object Array]"===n.call(e)}function i(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===n.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var r=0,a=e.length;r<a;r++)t.call(null,e[r],r,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===n.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===n.call(e)},isFile:function(e){return"[object File]"===n.call(e)},isBlob:function(e){return"[object Blob]"===n.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function r(r,a){"object"==typeof t[a]&&"object"==typeof r?t[a]=e(t[a],r):t[a]=r}for(var a=0,n=arguments.length;a<n;a++)l(arguments[a],r);return t},deepMerge:function e(){var t={};function r(r,a){"object"==typeof t[a]&&"object"==typeof r?t[a]=e(t[a],r):t[a]="object"==typeof r?e({},r):r}for(var a=0,n=arguments.length;a<n;a++)l(arguments[a],r);return t},extend:function(e,t,r){return l(t,(function(t,n){e[n]=r&&"function"==typeof t?a(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){e.exports=r(12)},function(e,t,r){e.exports=r(29).default},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),a=0;a<r.length;a++)r[a]=arguments[a];return e.apply(t,r)}}},function(e,t,r){"use strict";var a=r(0);function n(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var o;if(r)o=r(t);else if(a.isURLSearchParams(t))o=t.toString();else{var i=[];a.forEach(t,(function(e,t){null!=e&&(a.isArray(e)?t+="[]":e=[e],a.forEach(e,(function(e){a.isDate(e)?e=e.toISOString():a.isObject(e)&&(e=JSON.stringify(e)),i.push(n(t)+"="+n(e))})))})),o=i.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var a=r(0),n=r(18),o={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!a.isUndefined(e)&&a.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=r(7)),s),transformRequest:[function(e,t){return n(t,"Accept"),n(t,"Content-Type"),a.isFormData(e)||a.isArrayBuffer(e)||a.isBuffer(e)||a.isStream(e)||a.isFile(e)||a.isBlob(e)?e:a.isArrayBufferView(e)?e.buffer:a.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):a.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},a.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),a.forEach(["post","put","patch"],(function(e){u.headers[e]=a.merge(o)})),e.exports=u}).call(this,r(17))},function(e,t,r){"use strict";var a=r(0),n=r(19),o=r(4),i=r(21),s=r(24),u=r(25),l=r(8);e.exports=function(e){return new Promise((function(t,c){var p=e.data,d=e.headers;a.isFormData(p)&&delete d["Content-Type"];var f=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=e.auth.password||"";d.Authorization="Basic "+btoa(m+":"+h)}var y=i(e.baseURL,e.url);if(f.open(e.method.toUpperCase(),o(y,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in f?s(f.getAllResponseHeaders()):null,a={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:r,config:e,request:f};n(t,c,a),f=null}},f.onabort=function(){f&&(c(l("Request aborted",e,"ECONNABORTED",f)),f=null)},f.onerror=function(){c(l("Network Error",e,null,f)),f=null},f.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),c(l(t,e,"ECONNABORTED",f)),f=null},a.isStandardBrowserEnv()){var v=r(26),_=(e.withCredentials||u(y))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;_&&(d[e.xsrfHeaderName]=_)}if("setRequestHeader"in f&&a.forEach(d,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete d[t]:f.setRequestHeader(t,e)})),a.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){f&&(f.abort(),c(e),f=null)})),void 0===p&&(p=null),f.send(p)}))}},function(e,t,r){"use strict";var a=r(20);e.exports=function(e,t,r,n,o){var i=new Error(e);return a(i,t,r,n,o)}},function(e,t,r){"use strict";var a=r(0);e.exports=function(e,t){t=t||{};var r={},n=["url","method","params","data"],o=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];a.forEach(n,(function(e){void 0!==t[e]&&(r[e]=t[e])})),a.forEach(o,(function(n){a.isObject(t[n])?r[n]=a.deepMerge(e[n],t[n]):void 0!==t[n]?r[n]=t[n]:a.isObject(e[n])?r[n]=a.deepMerge(e[n]):void 0!==e[n]&&(r[n]=e[n])})),a.forEach(i,(function(a){void 0!==t[a]?r[a]=t[a]:void 0!==e[a]&&(r[a]=e[a])}));var s=n.concat(o).concat(i),u=Object.keys(t).filter((function(e){return-1===s.indexOf(e)}));return a.forEach(u,(function(a){void 0!==t[a]?r[a]=t[a]:void 0!==e[a]&&(r[a]=e[a])})),r}},function(e,t,r){"use strict";function a(e){this.message=e}a.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},a.prototype.__CANCEL__=!0,e.exports=a},function(e,t,r){},function(e,t,r){"use strict";var a=r(0),n=r(3),o=r(13),i=r(9);function s(e){var t=new o(e),r=n(o.prototype.request,t);return a.extend(r,o.prototype,t),a.extend(r,t),r}var u=s(r(6));u.Axios=o,u.create=function(e){return s(i(u.defaults,e))},u.Cancel=r(10),u.CancelToken=r(27),u.isCancel=r(5),u.all=function(e){return Promise.all(e)},u.spread=r(28),e.exports=u,e.exports.default=u},function(e,t,r){"use strict";var a=r(0),n=r(4),o=r(14),i=r(15),s=r(9);function u(e){this.defaults=e,this.interceptors={request:new o,response:new o}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},u.prototype.getUri=function(e){return e=s(this.defaults,e),n(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},a.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,r){return this.request(a.merge(r||{},{method:e,url:t}))}})),a.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,r,n){return this.request(a.merge(n||{},{method:e,url:t,data:r}))}})),e.exports=u},function(e,t,r){"use strict";var a=r(0);function n(){this.handlers=[]}n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){a.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=n},function(e,t,r){"use strict";var a=r(0),n=r(16),o=r(5),i=r(6);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=n(e.data,e.headers,e.transformRequest),e.headers=a.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),a.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=n(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(s(e),t&&t.response&&(t.response.data=n(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var a=r(0);e.exports=function(e,t,r){return a.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t){var r,a,n=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{a="function"==typeof clearTimeout?clearTimeout:i}catch(e){a=i}}();var u,l=[],c=!1,p=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):p=-1,l.length&&f())}function f(){if(!c){var e=s(d);c=!0;for(var t=l.length;t;){for(u=l,l=[];++p<t;)u&&u[p].run();p=-1,t=l.length}u=null,c=!1,function(e){if(a===clearTimeout)return clearTimeout(e);if((a===i||!a)&&clearTimeout)return a=clearTimeout,clearTimeout(e);try{a(e)}catch(t){try{return a.call(null,e)}catch(t){return a.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new m(e,t)),1!==l.length||c||s(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=h,n.addListener=h,n.once=h,n.off=h,n.removeListener=h,n.removeAllListeners=h,n.emit=h,n.prependListener=h,n.prependOnceListener=h,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},function(e,t,r){"use strict";var a=r(0);e.exports=function(e,t){a.forEach(e,(function(r,a){a!==t&&a.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[a])}))}},function(e,t,r){"use strict";var a=r(8);e.exports=function(e,t,r){var n=r.config.validateStatus;!n||n(r.status)?e(r):t(a("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,a,n){return e.config=t,r&&(e.code=r),e.request=a,e.response=n,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var a=r(22),n=r(23);e.exports=function(e,t){return e&&!a(t)?n(e,t):t}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var a=r(0),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,o,i={};return e?(a.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=a.trim(e.substr(0,o)).toLowerCase(),r=a.trim(e.substr(o+1)),t){if(i[t]&&n.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}})),i):i}},function(e,t,r){"use strict";var a=r(0);e.exports=a.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function n(e){var a=e;return t&&(r.setAttribute("href",a),a=r.href),r.setAttribute("href",a),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=n(window.location.href),function(t){var r=a.isString(t)?n(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var a=r(0);e.exports=a.isStandardBrowserEnv()?{write:function(e,t,r,n,o,i){var s=[];s.push(e+"="+encodeURIComponent(t)),a.isNumber(r)&&s.push("expires="+new Date(r).toGMTString()),a.isString(n)&&s.push("path="+n),a.isString(o)&&s.push("domain="+o),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var a=r(10);function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new a(e),t(r.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n((function(t){e=t})),cancel:e}},e.exports=n},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNetworkError=i,t.isRetryableError=l,t.isSafeRequestError=c,t.isIdempotentRequestError=p,t.isNetworkOrIdempotentRequestError=d,t.exponentialDelay=m,t.default=y;var a,n=r(30),o=(a=n)&&a.__esModule?a:{default:a};function i(e){return!e.response&&Boolean(e.code)&&"ECONNABORTED"!==e.code&&(0,o.default)(e)}var s=["get","head","options"],u=s.concat(["put","delete"]);function l(e){return"ECONNABORTED"!==e.code&&(!e.response||e.response.status>=500&&e.response.status<=599)}function c(e){return!!e.config&&(l(e)&&-1!==s.indexOf(e.config.method))}function p(e){return!!e.config&&(l(e)&&-1!==u.indexOf(e.config.method))}function d(e){return i(e)||p(e)}function f(){return 0}function m(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=100*Math.pow(2,e),r=.2*t*Math.random();return t+r}function h(e){var t=e["axios-retry"]||{};return t.retryCount=t.retryCount||0,e["axios-retry"]=t,t}function y(e,t){e.interceptors.request.use((function(e){return h(e).lastRequestTime=Date.now(),e})),e.interceptors.response.use(null,(function(r){var a=r.config;if(!a)return Promise.reject(r);var n=function(e,t){return Object.assign({},t,e["axios-retry"])}(a,t),o=n.retries,i=void 0===o?3:o,s=n.retryCondition,u=void 0===s?d:s,l=n.retryDelay,c=void 0===l?f:l,p=n.shouldResetTimeout,m=void 0!==p&&p,y=h(a);if(u(r)&&y.retryCount<i){y.retryCount+=1;var v=c(y.retryCount,r);if(function(e,t){e.defaults.agent===t.agent&&delete t.agent,e.defaults.httpAgent===t.httpAgent&&delete t.httpAgent,e.defaults.httpsAgent===t.httpsAgent&&delete t.httpsAgent}(e,a),!m&&a.timeout&&y.lastRequestTime){var _=Date.now()-y.lastRequestTime;a.timeout=Math.max(a.timeout-_-v,1)}return a.transformRequest=[function(e){return e}],new Promise((function(t){return setTimeout((function(){return t(e(a))}),v)}))}return Promise.reject(r)}))}y.isNetworkError=i,y.isSafeRequestError=c,y.isIdempotentRequestError=p,y.isNetworkOrIdempotentRequestError=d,y.exponentialDelay=m,y.isRetryableError=l},function(e,t,r){"use strict";var a=["ETIMEDOUT","ECONNRESET","EADDRINUSE","ESOCKETTIMEDOUT","ECONNREFUSED","EPIPE","EHOSTUNREACH","EAI_AGAIN"],n=["ENOTFOUND","ENETUNREACH","UNABLE_TO_GET_ISSUER_CERT","UNABLE_TO_GET_CRL","UNABLE_TO_DECRYPT_CERT_SIGNATURE","UNABLE_TO_DECRYPT_CRL_SIGNATURE","UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","CERT_SIGNATURE_FAILURE","CRL_SIGNATURE_FAILURE","CERT_NOT_YET_VALID","CERT_HAS_EXPIRED","CRL_NOT_YET_VALID","CRL_HAS_EXPIRED","ERROR_IN_CERT_NOT_BEFORE_FIELD","ERROR_IN_CERT_NOT_AFTER_FIELD","ERROR_IN_CRL_LAST_UPDATE_FIELD","ERROR_IN_CRL_NEXT_UPDATE_FIELD","OUT_OF_MEM","DEPTH_ZERO_SELF_SIGNED_CERT","SELF_SIGNED_CERT_IN_CHAIN","UNABLE_TO_GET_ISSUER_CERT_LOCALLY","UNABLE_TO_VERIFY_LEAF_SIGNATURE","CERT_CHAIN_TOO_LONG","CERT_REVOKED","INVALID_CA","PATH_LENGTH_EXCEEDED","INVALID_PURPOSE","CERT_UNTRUSTED","CERT_REJECTED"];e.exports=function(e){return!e||!e.code||(-1!==a.indexOf(e.code)||-1===n.indexOf(e.code))}},function(e,t,r){"use strict";r.r(t);r(11);var a=function(){function e(e,t,r){void 0===t&&(t="Error"),void 0===r&&(r=8e3),this.errorType=t,this.errorMessage=e.toString(),this.delay=r}return e.prototype.createToast=function(){var e=this.createToastContainer();e=this.createToastHeader(e),e=this.createToastContent(e);try{this.initToast(e)}finally{this.destroyToast(e)}},e.prototype.createToastContainer=function(){var e=$("<div></div>");return e.addClass("toast"),e},e.prototype.createToastHeader=function(e){var t=$("<div></div>");return t.addClass("toast-header bg-warning").append('<strong class="mr-auto" id="toast-warning-header">'+this.errorType+"</strong>",'<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close"><span aria-hidden="true">&times;</span></button>'),e.append(t),e},e.prototype.createToastContent=function(e){var t=$("<div></div>");return t.addClass("toast-body"),t.html(this.errorMessage),e.append(t),e},e.prototype.initToast=function(e){$("#toastsContainer").append(e),$(".toast").toast({delay:this.delay}),$(".toast").toast("show")},e.prototype.destroyToast=function(e){setTimeout((function(){e.remove()}),this.delay)},e}();function n(e,t,r,a){if(e<a)$("#"+e+" .title").text(r);else{a<=0&&o("emptyApiListMessage",!1);var n=function(e,t,r){return['<li data-api="'+t+'" class="list-group-item" id="'+e+'">','<div class="row">','<div class="col titleColumn">','<div class="title">'+r+"</div>","</div>",'<div class="col-xs-auto">',"<span>",'<button class="btn btn-light mx-1" id="editList" type="button">Edit</button>','<button class="btn btn-light mx-1" id="deleteList" type="button">Delete</button>',"</span>","</div>","</div>","</li>"].join("\n")}(e,t,r);$("#apiList").append(n)}}function o(e,t){t?$("#"+e).css("display",""):$("#"+e).css("display","none")}function i(e,t){o(e,!1),o(t,!0)}function s(e,t){t?($("#"+e).prop("disabled",!0),$("#"+e).prop("required",!1)):($("#"+e).prop("disabled",!1),$("#"+e).prop("required",!0))}function u(e){e?($("#addButton").prop("disabled",!0),$("#addButton").html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>')):($("#addButton").prop("disabled",!1),$("#addButton").html("Add"))}var l,c={authorCourseTemplates:{table:{id:"authorCourseTemplates",alias:"List Courses",columns:function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var a=Array(e),n=0;for(t=0;t<r;t++)for(var o=arguments[t],i=0,s=o.length;i<s;i++,n++)a[n]=o[i];return a}([{alias:"Course ID",id:"id",dataType:"int"},{alias:"Estimated Time",id:"estimated_time",dataType:"int"},{alias:"Course Title",id:"title",dataType:"string"},{alias:"Created At",id:"created_at",dataType:"datetime"},{alias:"Default Due On Date",id:"default_due_on_date",dataType:"datetime"},{alias:"Has Been Unpublished",id:"has_been_unpublished",dataType:"bool"},{alias:"Is Archived",id:"is_archived",dataType:"bool"},{alias:"Archived At",id:"archived_at",dataType:"datetime"},{alias:"Is Published",id:"is_published",dataType:"bool"},{alias:"Passing Threshold",id:"passing_threshold",dataType:"int"},{alias:"Quizzes Count",id:"quizzes_count",dataType:"int"},{alias:"Uses Bridge Retain",id:"retain",dataType:"bool"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Max Quiz Attempts",id:"max_quiz_attempts",dataType:"int"},{alias:"Continuing Education Credits",id:"continuing_education_credits",dataType:"int"},{alias:"Description of Course",id:"description",dataType:"string"},{alias:"Has unpublished changes",id:"has_unpublished_changes",dataType:"bool"},{alias:"Course Type",id:"course_type",dataType:"string"},{alias:"Enrollments Count",id:"enrollments_count",dataType:"int"},{alias:"Incomplete Enrollments Count",id:"incomplete_enrollments_count",dataType:"int"},{alias:"Attachments Count",id:"attachments_count",dataType:"int"},{alias:"Third Party Course Id",id:"third_party_course_id",dataType:"string"},{alias:"Show Correct Response",id:"show_correct_response",dataType:"bool"},{alias:"Branding Override",id:"branding_override",dataType:"bool"},{alias:"Course Tags",id:"tags",dataType:"string",originalType:"array"},{alias:"Course Categories",id:"categories",dataType:"string",originalType:"array"},{alias:"Quizzes Open Book",id:"open_book",dataType:"bool"},{alias:"External Course ID",id:"external_course_id",dataType:"string"},{alias:"Due Date Type (Relative, Fixed)",id:"due_date_type",dataType:"string"},{alias:"Default Days Until Due",id:"default_days_until_due",dataType:"int"},{alias:"Course Registration URL",id:"enroll_url",dataType:"string"}],[{alias:"Author ID",id:"author_id",parent_id:"author",sub_id:"id",dataType:"int"}],[{alias:"Enrollment Count - All",id:"enrollment_counts_all",parent_id:"enrollment_counts",sub_id:"all",dataType:"int"},{alias:"Enrollment Count - Required",id:"enrollment_counts_required",parent_id:"enrollment_counts",sub_id:"required",dataType:"int"},{alias:"Enrollment Count - Optional",id:"enrollment_counts_optional",parent_id:"enrollment_counts",sub_id:"optional",dataType:"int"},{alias:"Enrollment Count - Finished",id:"enrollment_counts_finished",parent_id:"enrollment_counts",sub_id:"finished",dataType:"int"},{alias:"Enrollment Count - In Progress",id:"enrollment_counts_in_progress",parent_id:"enrollment_counts",sub_id:"in_progress",dataType:"int"},{alias:"Enrollment Count - Incomplete",id:"enrollment_counts_incomplete",parent_id:"enrollment_counts",sub_id:"incomplete",dataType:"int"},{alias:"Enrollment Count - Incomplete or Finished",id:"enrollment_counts_incomplete_or_finished",parent_id:"enrollment_counts",sub_id:"incomplete_or_finished",dataType:"int"},{alias:"Enrollment Count - Not Started",id:"enrollment_counts_not_started",parent_id:"enrollment_counts",sub_id:"not_started",dataType:"int"},{alias:"Enrollment Count - Overdue",id:"enrollment_counts_overdue",parent_id:"enrollment_counts",sub_id:"overdue",dataType:"int"}],[{alias:"SubAccount ID",id:"sub_account_id",parent_id:"sub_account",sub_id:"id",dataType:"int"},{alias:"SubAccount Name",id:"sub_account_name",parent_id:"sub_account",sub_id:"name",dataType:"string"},{alias:"SubAccount Is Root",id:"sub_account_is_root",parent_id:"sub_account",sub_id:"is_root",dataType:"bool"}])},path:"/api/author/course_templates",data:"course_templates",parameters:[{name:"Sort",parameter:"sort",type:"options",default:"Default",options:[{name:"Newest",value:"newest"},{name:"Title",value:"title"},{name:"Updated",value:"updated"},{name:"Archived",value:"archived"}]},{name:"Search",parameter:"search",type:"string",placeholder:"search terms"},{name:"Filters",parameter:"filters",type:"filters",default:"Default",options:[{name:"My Courses",value:"my_courses"},{name:"Unpublished",value:"unpublished"},{name:"Has Certificate",value:"has_certificate"},{name:"No Enrollments",value:"no_enrollments"},{name:"Bridge Courses",value:"bridge"},{name:"Scorm Courses",value:"scorm"},{name:"Lynda Courses",value:"lynda"},{name:"Opensesame Courses",value:"opensesame"}]},{name:"Only Deleted",parameter:"only_deleted",type:"boolean"},{name:"Include Deleted",parameter:"with_deleted",type:"boolean"},{name:"Updated After",parameter:"updated_after",type:"date"},{name:"Created After",parameter:"created_after",type:"date"},{name:"Deleted After",parameter:"deleted_after",type:"date"},{name:"Updated Before",parameter:"updated_before",type:"date"},{name:"Created Before",parameter:"created_before",type:"date"},{name:"Deleted Before",parameter:"deleted_before",type:"date"}]}},p=function(){return(p=Object.assign||function(e){for(var t,r=1,a=arguments.length;r<a;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},d=p(p(p({},c),{authorListEnrollments:{table:{id:"authorListEnrollments",alias:"List Course Enrollments",columns:[{alias:"Enrollment ID",id:"id",dataType:"int"},{alias:"Course ID",id:"course_template",dataType:"int"},{alias:"Due At",id:"end_at",dataType:"datetime"},{alias:"Expire At",id:"expires_at",dataType:"datetime"},{alias:"Completed At",id:"completed_at",dataType:"datetime"},{alias:"Created At",id:"created_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Course Progress",id:"progress",dataType:"float"},{alias:"Is Removable",id:"can_be_removed",dataType:"bool"},{alias:"Is Able To Be Optional",id:"can_be_made_optional",dataType:"bool"},{alias:"Is Active",id:"active",dataType:"bool"},{alias:"Is Required",id:"required",dataType:"bool"},{alias:"Is Permanently Failed",id:"is_permanently_failed",dataType:"bool"},{alias:"Is Archived",id:"is_archived",dataType:"bool"},{alias:"Score",id:"score",dataType:"int"},{alias:"Enrollment Status",id:"state",dataType:"string"},{alias:"Can Re-Enroll",id:"allow_re_enroll",dataType:"bool"},{alias:"Name",id:"name",linkedSource:"learner",linkedId:"name",dataType:"string"},{alias:"User ID",id:"user_id",linkedSource:"learner",linkedId:"id",dataType:"int"}]},path:"/api/author/course_templates/*/enrollments",data:"enrollments",requiredParameters:[{name:"Course ID",parameter:"course_id",path:"/api/author/course_templates/titles",valCol:"course_templates",type:"string",placeholder:"course id"}]}}),{authorUser:{table:{id:"authorUser",alias:"List Users",columns:[{alias:"User ID",id:"id",dataType:"int"},{alias:"Unique Login ID",id:"uid",dataType:"string"},{alias:"HRIS ID",id:"hris_id",dataType:"string"},{alias:"First Name",id:"first_name",dataType:"string"},{alias:"Last Name",id:"last_name",dataType:"string"},{alias:"Language",id:"locale",dataType:"string"},{alias:"Email Address",id:"email",dataType:"string"},{alias:"Welcomed to Bridge",id:"welcomedAt",dataType:"datetime"},{alias:"Last Login",id:"loggedInAt",dataType:"datetime"},{alias:"Password is Set",id:"passwordIsSet",dataType:"bool"},{alias:"Full Name",id:"full_name",dataType:"string"},{alias:"Name",id:"name",dataType:"string"},{alias:"Avatar URL",id:"avatar_url",dataType:"string"},{alias:"Deleted At",id:"deleted_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Unsubscribed from Emails",id:"unsubscribed",dataType:"bool"},{alias:"Hire Date",id:"hire_date",dataType:"date"},{alias:"Is a Manager",id:"is_manager",dataType:"bool"},{alias:"Job Title",id:"job_title",dataType:"string"},{alias:"User Bio",id:"bio",dataType:"string"},{alias:"Sortable Name",id:"sortable_name",dataType:"string"},{alias:"Department",id:"department",dataType:"string"},{alias:"Roles",id:"roles",dataType:"string",originalType:"array"}]},path:"/api/author/users",data:"users",parameters:[{name:"Sort",parameter:"sort",type:"options",default:"Default",options:[{name:"Name",value:"name"},{name:"Number of Completed Courses",value:"complete_courses_count"},{name:"Next Due Date",value:"next_due_date"}]},{name:"Search",parameter:"search",type:"string",placeholder:"search terms"},{name:"Only Deleted",parameter:"only_deleted",type:"boolean"},{name:"Include Deleted",parameter:"with_deleted",type:"boolean"},{name:"Role",parameter:"role",type:"options",default:"Any",options:[{name:"Account Admin",value:"account_admin"},{name:"Admin",value:"admin"},{name:"Author",value:"author"}]},{name:"Updated After",parameter:"updated_after",type:"date"},{name:"Created After",parameter:"created_after",type:"date"},{name:"Deleted After",parameter:"deleted_after",type:"date"},{name:"Updated Before",parameter:"updated_before",type:"date"},{name:"Created Before",parameter:"created_before",type:"date"},{name:"Deleted Before",parameter:"deleted_before",type:"date"},{name:"Only Managers",parameter:"only_managers",type:"boolean"}]}}),f=function(){function e(){this.showElement=o,this.switchPage=i,this.showLoading=u,this.tables=d,this.defaultErrorMessage="An error has occured. Check that the url and api key are correct."}return e.prototype.clearRequiredParameterOptions=function(){$("#requiredParameterSelector").html("")},e.prototype.addOption=function(e,t,r){var a=document.createElement("option");a.innerText=e,a.setAttribute("value",t),a.setAttribute("id",t),r.appendChild(a)},e.prototype.addTableOptions=function(e){var t=$("#apiSelector")[0];for(var r in e)if(r in e){var a=e[r].table.alias,n=e[r].table.id;this.addOption(a,n,t)}},e.prototype.editTable=function(e){$("#tableName").val($("#"+e+" .title").text()),$("#edit-section").attr("currentTable",e);var t=$("#"+e).attr("data-api"),r=decodeURIComponent($("#"+e).attr("data-require")),a=decodeURIComponent($("#"+e).attr("data-optional"));if("parameters"in d[t]&&(this.showElement("optionalParameterSection",!0),this.addOptionalParameters(t),""!=a))for(var n=0,o=a.split("&");n<o.length;n++){var i=o[n].split("="),u="filters[]"==i[0]?"filters":i[0],l=i[1];$("#input-"+u).val(l)}if("requiredParameters"in d[t]&&(this.showElement("requiredParameterSection",!0),this.addRequiredParameters(t),""!=r))for(var c=0,p=r.split("&");c<p.length;c++){var f=p[c].split("="),m="input-"+(u="filters[]"==f[0]?"filters":f[0]);"all"===(l=f[1])?$("#"+m).parent().next("form").find("[type=checkbox]").trigger("click"):($("#input-"+u).val(l),s(m,!1))}this.switchPage("api-section","edit-section")},e.prototype.deleteTable=function(e){var t=$("#apiList li").length;$("#"+e).remove();for(var r=parseInt(e)+1;r<t;r++){var a=r-1;$("#"+r+" .deleteButton").attr("onclick","deleteTable("+a+")"),$("#"+r+" .editButton").attr("onclick","editTable("+a+")"),$("#"+r).attr("id",a)}$("#apiList li").length<=0&&this.showElement("emptyApiListMessage",!0)},e.prototype.showErrorMessage=function(e,t,r){void 0===t&&(t="Error"),void 0===r&&(r=800),new a(e,t,r).createToast()},e.prototype.addOptionalParameters=function(e){for(var t=0,r=d[e].parameters;t<r.length;t++){var a=r[t],n="",o=void 0;if(["options","filters"].includes(a.type)){for(var i=['<div class="input-group my-3" parameterType="'+a.type+'" id="'+(o=a.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+o+'">'+a.name+"</label>","</div>",'<select class="custom-select" id="input-'+o+'">','<option value="nosel" selected>'+a.default+"</option>"],s=0,u=a.options;s<u.length;s++){var l=u[s];i.push('<option value="'+l.value+'">'+l.name+"</option>")}i.push.apply(i,["</select>","</div>"]),n=i.join("\n")}else if("boolean"==a.type){n=['<div class="input-group my-3" parameterType="'+a.type+'" id="'+(o=a.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+o+'">'+a.name+"</label>","</div>",'<select class="custom-select" id="input-'+o+'">','<option selected value="false">False</option>','<option value="true">True</option>',"</select>","</div>"].join("\n")}else if("date"==a.type){n=['<div class="input-group my-3" parameterType="'+a.type+'" id="'+(o=a.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+o+'">'+a.name+"</label>","</div>",'<input type="date" class="form-control" id="input-'+o+'">','<div class="input-group-append">','<button class="btn btn-outline-danger" type="button" onclick="clearValue(\'input-'+o+"')\">Clear</button>","</div>","</div>"].join("\n")}else if("string"==a.type){n=['<div class="input-group my-3" parameterType="'+a.type+'" id="'+(o=a.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+o+'">'+a.name+"</label>","</div>",'<input type="text" class="form-control" placeholder="'+a.placeholder+'" id="input-'+o+'">',"</div>"].join("\n")}$("#optionalParameterList").html().includes(o)||$("#optionalParameterList").append(n)}},e.prototype.addRequiredParameters=function(e){for(var t=d[e].data,r=0,a=d[e].requiredParameters;r<a.length;r++){var n=a[r],o="",i=void 0;if("string"==n.type)o=['<div class="input-group my-3" parameterType="'+n.type+'" id="'+(i=n.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+i+'">'+n.name+"</label>","</div>",'<input type="text" class="form-control" placeholder="'+n.placeholder+'" id="input-'+i+'" required>',"</div>",'<form class="form-check">','<input type="checkbox" class="form-check-input" id="requiredCheckbox">','<label class="form-check-label" for="requiredCheckbox">All '+t+"</label>","</form>"].join("\n");$("#requiredParameterList").html().includes(i)||$("#requiredParameterList").append(o)}},e}(),m=(l=function(e,t){return(l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}l(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),h=function(e){function t(){var t=e.call(this)||this;return $("#addButton").on("click",(function(){t.api=$("#apiSelector").val(),$("#tableName").val(t.tables[t.api].table.alias),$("#edit-section").attr("currentTable",$("#apiList li").length),t.parameters(t.api,t.tables),t.requiredParameters(t.api,t.tables)})),t}return m(t,e),t.prototype.parameters=function(e,t){"parameters"in t[e]?(this.showElement("optionalParameterSection",!0),this.addOptionalParameters(e),this.switchPage("api-section","edit-section")):this.showElement("optionalParameterSection",!1)},t.prototype.requiredParameters=function(e,t){"requiredParameters"in t[e]?(this.showElement("requiredParameterSection",!0),this.addRequiredParameters(e),this.switchPage("api-section","edit-section")):this.showElement("requiredParameterSection",!1)},t}(f),y=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),v=function(e){function t(){var t=e.call(this)||this;return t.addTableOptions(d),t}return y(t,e),t}(f),_=r(1),b=r.n(_),g=r(2),T=r.n(g),E=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),C=function(e){function t(){return e.call(this)||this}return E(t,e),t.toCustomFormat=function(e,t,r){void 0===t&&(t="en-us");var a=this.parse(e),n=r||{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"};return new Intl.DateTimeFormat(t,n).format(a).replace(",","")},t}(Date);function w(e){tableau.log(e),console.log(e)}var O=function(){return(O=Object.assign||function(e){for(var t,r=1,a=arguments.length;r<a;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},A=function(){function e(e,t){this.apiCall=e,this.apiKey=t,this.responsePromise=[]}return e.prototype.setUrl=function(e,t){var r;return void 0===e&&(e=this.apiCall),void 0===t&&(t=this.apiKey),r={},{apiCall:new URL(e),headers:O(O({},{Authorization:t,"Content-Type":"application/json",Accept:"application/json"}),r)}},e.prototype.addRow=function(e,t,r){for(var a=t[e.tableInfo.id],n=r[a.data],o=[],i=0,s=n.length;i<s;i++){for(var u={},l=function(e){if("linkedSource"in e){var t=e.id,a=e.linkedSource,o=e.linkedId,s=n[i].links[a].id,l=n[i].links[a].type,p=r.linked[l].filter((function(e){return e.id===s}));1==p.length?u[t]=c.normalizer(e,p[0][o]):u[t]=null}else if("parent_id"in e){var d=e.id,f=e.parent_id,m=e.sub_id;f in n[i]?u[d]=c.normalizer(e,n[i][f][m]):u[d]=null}else{d=e.id;u[d]=c.normalizer(e,n[i][d])}},c=this,p=0,d=a.table.columns;p<d.length;p++){l(d[p])}o.push(u)}e.appendRows(o)},e.prototype.normalizer=function(e,t){return"datetime"===e.dataType?function(e,t){try{if(e){var r=t||(null===tableau||void 0===tableau?void 0:tableau.locale)||(null===navigator||void 0===navigator?void 0:navigator.language);return C.toCustomFormat(e,r)}return e}catch(e){w(e)}}(t):"array"===e.originalType?function(e){try{return e&&Array.isArray(e)?e.toString():e}catch(e){w(e)}}(t):t},e.prototype.performApiCall=function(e,t,r,a,n){var o=this;T()(b.a,{retryDelay:T.a.exponentialDelay});var i=this.setUrl(r,n),s={method:"get",url:i.apiCall,headers:i.headers};b()(s).then((function(r){var n=r.data;o.addRow(e,a,n),"next"in n.meta?o.performApiCall(e,t,n.meta.next,a):t()})).catch((function(e){w(String(e)),t()}))},e.prototype.getAllIds=function(e,t,r,a,n){var o=this;T()(b.a,{retryDelay:T.a.exponentialDelay});var i=this.setUrl(r,n),s={method:"get",url:i.apiCall,headers:i.headers};b()(s).then((function(r){var n,i,s,u,l=a[e.tableInfo.id].requiredParameters[0].valCol,c=a[e.tableInfo.id].path,p=r.data,d=new Promise((function(r,d){p[l].forEach((function(l,p,d){setTimeout((function(){n=l.id,i=JSON.parse(tableau.connectionData).url,u=c.replace("*",n),s=new URL(u,i),o.performAllApiCall(e,t,s,a),p===d.length-1&&r()}),2e3*p)}))}));o.responsePromise.push(d),"next"in p.meta?o.getAllIds(e,t,p.meta.next,a):Promise.all(o.responsePromise).then((function(){t()}))})).catch((function(e){w(String(e)),t()}))},e.prototype.performAllApiCall=function(e,t,r,a,n){var o=this;T()(b.a,{retryDelay:T.a.exponentialDelay});var i=this.setUrl(r,n),s={method:"get",url:i.apiCall,headers:i.headers};b()(s).then((function(r){var n=r.data;o.addRow(e,a,n),"next"in n.meta&&o.performAllApiCall(e,t,n.meta.next,a)})).catch((function(e){w(String(e)),t()}))},e}(),P=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),R=function(e){function t(t,r){return e.call(this,t,r)||this}return P(t,e),t.prototype.performApiCall=function(){var e=this;if(T()(b.a,{retryDelay:T.a.exponentialDelay}),this.apiCall&&this.apiKey){this.validateUrl(this.apiCall);var t=this.setUrl(this.apiCall,this.apiKey),r={method:"get",url:t.apiCall+"api/author/users?id=1",headers:t.headers};b()(r).then((function(e){var t,r;if(((null===(r=null===(t=null==e?void 0:e.data)||void 0===t?void 0:t.toString())||void 0===r?void 0:r.toLowerCase())||"").includes("account not found"))throw new Error("account not found")})).catch((function(t){var r,a;(null===(r=null==t?void 0:t.message)||void 0===r?void 0:r.includes("account not found"))?e.error("Account Not Found: Check your URL"):401==(null===(a=null==t?void 0:t.response)||void 0===a?void 0:a.status)?e.error("Unauthorized: Please check that your Key is valid."):(e.error("An error has occured, with your credentials see the browser console for more details"),console.log(t))}))}else this.error("Please enter a value for URL and Key")},t.prototype.validateUrl=function(e){try{new URL(e)}catch(r){var t=e||'" "';this.error(t+" is not a valid URL")}},t.prototype.error=function(e){new a(e).createToast()},t}(A),S=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),x=function(e){function t(){var t=e.call(this)||this;return $("#credentialsButton").on("click",(function(){var e=$("#credentialForm");e[0].checkValidity()?(t.switchPage("url-section","api-section"),new R($("#url").val(),$("#apiKey").val()).performApiCall()):e[0].reportValidity()})),t}return S(t,e),t}(f),D=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),N=function(e){function t(){var t=e.call(this)||this;return $("#apiList").on("click","#deleteList",(function(e){var r=e.target.offsetParent.id;e.target&&e.target.offsetParent.id==r&&t.deleteTable(r)})),t}return D(t,e),t}(f),L=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),I=function(e){function t(){var t=e.call(this)||this;return $("#requiredParameterList").on("click","#requiredCheckbox",(function(e){var t=e.target.parentElement.previousElementSibling.lastElementChild,r=t.id;e.target&&e.target.parentElement.previousElementSibling.lastElementChild.id==r&&(e.target.checked?($("#"+r).val("all"),s(t.id,!0)):($("#"+r).val(null),s(t.id,!1)))})),$("#editDoneButton").on("click",(function(){t.id=$("#edit-section").attr("currentTable"),t.ulLength=$("#apiList li").length,t.api=$("#"+t.id).attr("data-api")||$("#apiSelector").val(),t.title=$("#tableName").val(),n(t.id,t.api,t.title,t.ulLength),t.requiredParameters(t.id,t.api,t.tables),t.parameters(t.id,t.api,t.tables);var e=t.required(t.api,t.tables),r=t.optional(t.api,t.tables);e&&r?(t.requiredParameterActions(),t.optionalParameterActions()):e&&!r?t.requiredParameterActions():!e&&r&&(t.optionalParameterActions(),t.switchPage("edit-section","api-section"))})),t}return L(t,e),t.prototype.required=function(e,t){return"requiredParameters"in t[e]},t.prototype.optional=function(e,t){return"parameters"in t[e]},t.prototype.requiredParameterActions=function(){var e=$("#requiredForm");e[0].checkValidity()?(this.showElement("requiredParameterSection",!1),$("#requiredParameterSelector").empty(),$("#requiredParameterList").html(""),$("#requiredParameterList").hasClass("show")&&$("#requiredParameterButton").click(),this.switchPage("edit-section","api-section")):e[0].reportValidity()},t.prototype.optionalParameterActions=function(){this.showElement("optionalParameterSection",!1),$("#optionalParameterSelector").empty(),$("#optionalParameterList").html(""),$("#optionalParameterList").hasClass("show")&&$("#optionalParameterButton").click()},t.prototype.requiredParameters=function(e,t,r){if(this.required(t,r)){for(var a=[],n=$("#requiredParameterList").children(),o=0;o<n.length;o++){var i=$(n[o]),s=void 0,u=i.attr("id");if("options"===i.attr("parametertype"))"nosel"!=(l=$("#input-"+u+" option:selected").val())&&(s=l);else if("filters"===i.attr("parametertype")){"nosel"!=(l=$("#input-"+u+" option:selected").val())&&(u+="[]",s=l)}else if("boolean"===i.attr("parametertype")){var l;"false"!=(l=$("#input-"+u+" option:selected").val())&&(s=l)}else"string"===i.attr("parametertype")||"date"===i.attr("parametertype")?s=$("#input-"+u).val():(u=null,s=null);s&&u&&a.push({name:u,value:encodeURIComponent(s)})}this.showElement("requiredParameterSection",!0);for(var c,p=[],d=0,f=a;d<f.length;d++){var m=f[d];p.push([m.name,m.value].join("="))}c=p.join("&"),$("#"+e).attr("data-require",c),console.log(c)}},t.prototype.parameters=function(e,t,r){if(this.optional(t,r)){for(var a=[],n=$("#optionalParameterList").children(),o=0;o<n.length;o++){var i=$(n[o]),s=void 0,u=i.attr("id");if("options"===i.attr("parametertype"))"nosel"!=(l=$("#input-"+u+" option:selected").val())&&(s=l);else if("filters"===i.attr("parametertype")){"nosel"!=(l=$("#input-"+u+" option:selected").val())&&(u+="[]",s=l)}else if("boolean"===i.attr("parametertype")){var l;"false"!=(l=$("#input-"+u+" option:selected").val())&&(s=l)}else"string"===i.attr("parametertype")||"date"===i.attr("parametertype")?s=$("#input-"+u).val():(u=null,s=null);s&&u&&a.push({name:u,value:encodeURIComponent(s)})}for(var c,p=[],d=0,f=a;d<f.length;d++){var m=f[d];p.push([m.name,m.value].join("="))}c=p.join("&"),$("#"+e).attr("data-optional",c),console.log(c)}},t}(f),U=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),j=function(e){function t(){var t=e.call(this)||this;return $("#apiList").on("click","#editList",(function(e){var r=e.target.offsetParent.id;e.target&&e.target.offsetParent.id==r&&t.editTable(r)})),t}return U(t,e),t}(f),q=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),k=function(e){function t(){var t=e.call(this)||this;return $("#resetButton").on("click",(function(){t.switchPage("api-section","url-section")})),t}return q(t,e),t}(f),B=new(function(){function e(){var e=this;this.myConnector=tableau.makeConnector(),this.myConnector.init=function(t){w("tableau web connector initialization"),tableau.authType=tableau.authTypeEnum.custom,t(),tableau.phase!=tableau.phaseEnum.authPhase&&tableau.phase!=tableau.phaseEnum.interactivePhase||tableau.connectionData&&(e.populateStoredValues(tableau.connectionData),0==tableau.password.length&&tableau.abortForAuth())},this.myConnector.getSchema=function(t){t(e.getSchema())},this.myConnector.getData=function(t,r){var a,n;w("getData"),0==tableau.password.length&&(e.populateStoredValues(tableau.connectionData),tableau.abortForAuth()),(null===(a=JSON.parse(tableau.connectionData))||void 0===a?void 0:a.schema)||e.getSchema(),n=JSON.parse(tableau.connectionData);var o=t.tableInfo.id,i=n.schema[o];if("allPath"in i){var s=i.allPath,u=new URL(s,n.url);new A(u,tableau.password).getAllIds(t,r,u,n.schema,tableau.password)}else{s=i.path,u=new URL(s,n.url);new A(u,tableau.password).performApiCall(t,r,u,n.schema,tableau.password)}},tableau.registerConnector(this.myConnector)}return Object.defineProperty(e.prototype,"apiKey",{get:function(){return tableau.password},set:function(e){tableau.password=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"connectionData",{get:function(){return tableau.connectionData},set:function(e){!function(e){try{JSON.parse(e)}catch(e){return!1}return!0}(e)?tableau.connectionData=JSON.stringify(e):tableau.connectionData=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"connectionName",{get:function(){return tableau.connectionName},set:function(e){tableau.connectionName=e},enumerable:!1,configurable:!0}),e.prototype.tableauSubmit=function(){tableau.submit()},e.prototype.getSchema=function(){w("getSchema");for(var e={},t=JSON.parse(tableau.connectionData),r=[],a=1,n=0,o=t.tables;n<o.length;n++){var i=o[n],s=i.apiCall,u=JSON.parse(JSON.stringify(d[s])),l="table"+a;if(u.table.alias=i.title,u.table.id=l,a+=1,"requiredParameters"in i){var c=d[i.apiCall].requiredParameters[0].path,p=u.path,f=i.requiredParameters.split("=")[1];if("all"===f)u.allPath=c;else{var m=p.replace("*",f);u.path=m}}if("optionalParameters"in i){m=(p=u.path)+"?"+i.optionalParameters;u.path=m}e[l]=u,r.push(u.table)}return t.schema=e,this.connectionData=JSON.stringify(t),r},e.prototype.populateStoredValues=function(e){if(e){var t=JSON.parse(e),r=t.tables;$("#url").val(t.url),tableau.password.length>0&&$("#apiKey").val(tableau.password),r.forEach((function(e,t){var r=t,a=$("#apiList li").length;n(r,e.apiCall,e.title,a),e.requiredParameters?$("#"+r).attr("data-require",e.requiredParameters):o("requiredParameterSection",!1),e.optionalParameters?$("#"+r).attr("data-optional",e.optionalParameters):o("optionalParameterSection",!1)}))}},e}()),F=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(t,r)};return function(t,r){function a(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(a.prototype=r.prototype,new a)}}(),M=function(e){function t(){var t=e.call(this)||this;return t.tableau=B,$("#submitButton").on("click",(function(){for(var e,r,a=[],n=0,o=$("#apiList")[0].getElementsByTagName("li");n<o.length;n++){var i=o[n],s={apiCall:i.getAttribute("data-api"),title:i.getElementsByClassName("title")[0].innerText};i.hasAttribute("data-require")&&(s.requiredParameters=i.getAttribute("data-require")),i.hasAttribute("data-optional")&&(s.optionalParameters=i.getAttribute("data-optional")),a.push(s)}tableau.connectionData&&(r=null===(e=JSON.parse(tableau.connectionData))||void 0===e?void 0:e.schema);var u={url:$("#url").val(),tables:a,schema:r};t.tableau.connectionData=JSON.stringify(u),t.tableau.apiKey=$("#apiKey").val(),t.tableau.connectionName="Bridge API",t.tableau.tableauSubmit()})),t}return F(t,e),t}(f);$(document).ready((function(){window.clearValue=function(e){$("#"+e).val("")},new v,new h,new j,new N,new I,new k,new x,new M}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,