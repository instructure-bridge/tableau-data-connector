!function(e){var t={};function a(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(r,n,function(t){return e[t]}.bind(null,n));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=28)}([function(e,t,a){"use strict";var r=a(2),n=Object.prototype.toString;function o(e){return"[object Array]"===n.call(e)}function i(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===n.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var a=0,r=e.length;a<r;a++)t.call(null,e[a],a,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===n.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:i,isDate:function(e){return"[object Date]"===n.call(e)},isFile:function(e){return"[object File]"===n.call(e)},isBlob:function(e){return"[object Blob]"===n.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function a(a,r){"object"==typeof t[r]&&"object"==typeof a?t[r]=e(t[r],a):t[r]=a}for(var r=0,n=arguments.length;r<n;r++)l(arguments[r],a);return t},deepMerge:function e(){var t={};function a(a,r){"object"==typeof t[r]&&"object"==typeof a?t[r]=e(t[r],a):t[r]="object"==typeof a?e({},a):a}for(var r=0,n=arguments.length;r<n;r++)l(arguments[r],a);return t},extend:function(e,t,a){return l(t,(function(t,n){e[n]=a&&"function"==typeof t?r(t,a):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,a){e.exports=a(11)},function(e,t,a){"use strict";e.exports=function(e,t){return function(){for(var a=new Array(arguments.length),r=0;r<a.length;r++)a[r]=arguments[r];return e.apply(t,a)}}},function(e,t,a){"use strict";var r=a(0);function n(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,a){if(!t)return e;var o;if(a)o=a(t);else if(r.isURLSearchParams(t))o=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(n(t)+"="+n(e))})))})),o=i.join("&")}if(o){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,a){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,a){"use strict";(function(t){var r=a(0),n=a(17),o={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=a(6)),s),transformRequest:[function(e,t){return n(t,"Accept"),n(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(o)})),e.exports=u}).call(this,a(16))},function(e,t,a){"use strict";var r=a(0),n=a(18),o=a(3),i=a(20),s=a(23),u=a(24),l=a(7);e.exports=function(e){return new Promise((function(t,c){var p=e.data,d=e.headers;r.isFormData(p)&&delete d["Content-Type"];var f=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=e.auth.password||"";d.Authorization="Basic "+btoa(m+":"+h)}var y=i(e.baseURL,e.url);if(f.open(e.method.toUpperCase(),o(y,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var a="getAllResponseHeaders"in f?s(f.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:a,config:e,request:f};n(t,c,r),f=null}},f.onabort=function(){f&&(c(l("Request aborted",e,"ECONNABORTED",f)),f=null)},f.onerror=function(){c(l("Network Error",e,null,f)),f=null},f.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),c(l(t,e,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var v=a(25),b=(e.withCredentials||u(y))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;b&&(d[e.xsrfHeaderName]=b)}if("setRequestHeader"in f&&r.forEach(d,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete d[t]:f.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){f&&(f.abort(),c(e),f=null)})),void 0===p&&(p=null),f.send(p)}))}},function(e,t,a){"use strict";var r=a(19);e.exports=function(e,t,a,n,o){var i=new Error(e);return r(i,t,a,n,o)}},function(e,t,a){"use strict";var r=a(0);e.exports=function(e,t){t=t||{};var a={},n=["url","method","params","data"],o=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(n,(function(e){void 0!==t[e]&&(a[e]=t[e])})),r.forEach(o,(function(n){r.isObject(t[n])?a[n]=r.deepMerge(e[n],t[n]):void 0!==t[n]?a[n]=t[n]:r.isObject(e[n])?a[n]=r.deepMerge(e[n]):void 0!==e[n]&&(a[n]=e[n])})),r.forEach(i,(function(r){void 0!==t[r]?a[r]=t[r]:void 0!==e[r]&&(a[r]=e[r])}));var s=n.concat(o).concat(i),u=Object.keys(t).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(u,(function(r){void 0!==t[r]?a[r]=t[r]:void 0!==e[r]&&(a[r]=e[r])})),a}},function(e,t,a){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,a){},function(e,t,a){"use strict";var r=a(0),n=a(2),o=a(12),i=a(8);function s(e){var t=new o(e),a=n(o.prototype.request,t);return r.extend(a,o.prototype,t),r.extend(a,t),a}var u=s(a(5));u.Axios=o,u.create=function(e){return s(i(u.defaults,e))},u.Cancel=a(9),u.CancelToken=a(26),u.isCancel=a(4),u.all=function(e){return Promise.all(e)},u.spread=a(27),e.exports=u,e.exports.default=u},function(e,t,a){"use strict";var r=a(0),n=a(3),o=a(13),i=a(14),s=a(8);function u(e){this.defaults=e,this.interceptors={request:new o,response:new o}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],a=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)a=a.then(t.shift(),t.shift());return a},u.prototype.getUri=function(e){return e=s(this.defaults,e),n(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,a){return this.request(r.merge(a||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,a,n){return this.request(r.merge(n||{},{method:e,url:t,data:a}))}})),e.exports=u},function(e,t,a){"use strict";var r=a(0);function n(){this.handlers=[]}n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=n},function(e,t,a){"use strict";var r=a(0),n=a(15),o=a(4),i=a(5);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=n(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=n(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(s(e),t&&t.response&&(t.response.data=n(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,a){"use strict";var r=a(0);e.exports=function(e,t,a){return r.forEach(a,(function(a){e=a(e,t)})),e}},function(e,t){var a,r,n=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(a===setTimeout)return setTimeout(e,0);if((a===o||!a)&&setTimeout)return a=setTimeout,setTimeout(e,0);try{return a(e,0)}catch(t){try{return a.call(null,e,0)}catch(t){return a.call(this,e,0)}}}!function(){try{a="function"==typeof setTimeout?setTimeout:o}catch(e){a=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,l=[],c=!1,p=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):p=-1,l.length&&f())}function f(){if(!c){var e=s(d);c=!0;for(var t=l.length;t;){for(u=l,l=[];++p<t;)u&&u[p].run();p=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)t[a-1]=arguments[a];l.push(new m(e,t)),1!==l.length||c||s(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=h,n.addListener=h,n.once=h,n.off=h,n.removeListener=h,n.removeAllListeners=h,n.emit=h,n.prependListener=h,n.prependOnceListener=h,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},function(e,t,a){"use strict";var r=a(0);e.exports=function(e,t){r.forEach(e,(function(a,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=a,delete e[r])}))}},function(e,t,a){"use strict";var r=a(7);e.exports=function(e,t,a){var n=a.config.validateStatus;!n||n(a.status)?e(a):t(r("Request failed with status code "+a.status,a.config,null,a.request,a))}},function(e,t,a){"use strict";e.exports=function(e,t,a,r,n){return e.config=t,a&&(e.code=a),e.request=r,e.response=n,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,a){"use strict";var r=a(21),n=a(22);e.exports=function(e,t){return e&&!r(t)?n(e,t):t}},function(e,t,a){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,a){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,a){"use strict";var r=a(0),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,a,o,i={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),a=r.trim(e.substr(o+1)),t){if(i[t]&&n.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([a]):i[t]?i[t]+", "+a:a}})),i):i}},function(e,t,a){"use strict";var r=a(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),a=document.createElement("a");function n(e){var r=e;return t&&(a.setAttribute("href",r),r=a.href),a.setAttribute("href",r),{href:a.href,protocol:a.protocol?a.protocol.replace(/:$/,""):"",host:a.host,search:a.search?a.search.replace(/^\?/,""):"",hash:a.hash?a.hash.replace(/^#/,""):"",hostname:a.hostname,port:a.port,pathname:"/"===a.pathname.charAt(0)?a.pathname:"/"+a.pathname}}return e=n(window.location.href),function(t){var a=r.isString(t)?n(t):t;return a.protocol===e.protocol&&a.host===e.host}}():function(){return!0}},function(e,t,a){"use strict";var r=a(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,a,n,o,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(a)&&s.push("expires="+new Date(a).toGMTString()),r.isString(n)&&s.push("path="+n),r.isString(o)&&s.push("domain="+o),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,a){"use strict";var r=a(9);function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var a=this;e((function(e){a.reason||(a.reason=new r(e),t(a.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n((function(t){e=t})),cancel:e}},e.exports=n},function(e,t,a){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,a){"use strict";a.r(t);a(10);var r,n=a(1),o=a.n(n),i=function(){return(i=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},s=function(){function e(e,t){this.apiCall=e,this.apiKey=t}return e.prototype.setUrl=function(e,t){var a;return void 0===e&&(e=this.apiCall),void 0===t&&(t=this.apiKey),a={},{apiCall:new URL(e),headers:i(i({},{Authorization:t,"Content-Type":"application/json",Accept:"application/json"}),a)}},e.prototype.addRow=function(e,t,a){for(var r=t[e.tableInfo.id],n=a[r.data],o=[],i=0,s=n.length;i<s;i++){for(var u={},l=function(e){if("linkedSource"in e){var t=e.id,r=e.linkedSource,o=e.linkedId,s=n[i].links[r].id,l=n[i].links[r].type,c=a.linked[l].filter((function(e){return e.id===s}));1==c.length?u[t]=c[0][o]:u[t]=null}else if("parent_id"in e){var p=e.id,d=e.parent_id,f=e.sub_id;d in n[i]?u[p]=n[i][d][f]:u[p]=null}else{p=e.id;u[p]=n[i][p]}},c=0,p=r.table.columns;c<p.length;c++){l(p[c])}o.push(u)}e.appendRows(o)},e.prototype.performApiCall=function(e,t,a,r,n){var i=this,s=this.setUrl(a,n),u={method:"get",url:s.apiCall,headers:s.headers};o()(u).then((function(a){var n=a.data;i.addRow(e,r,n),"next"in n.meta?i.performApiCall(e,t,n.meta.next,r):t()})).catch((function(e){console.log(e),t()}))},e}(),u=function(){function e(e,t,a){void 0===t&&(t="Error"),void 0===a&&(a=8e3),this.errorType=t,this.errorMessage=e.toString(),this.delay=a}return e.prototype.createToast=function(){var e=this.createToastContainer();e=this.createToastHeader(e),e=this.createToastContent(e);try{this.initToast(e)}finally{this.destroyToast(e)}},e.prototype.createToastContainer=function(){var e=$("<div></div>");return e.addClass("toast"),e},e.prototype.createToastHeader=function(e){var t=$("<div></div>");return t.addClass("toast-header bg-warning").append('<strong class="mr-auto" id="toast-warning-header">'+this.errorType+"</strong>",'<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close"><span aria-hidden="true">&times;</span></button>'),e.append(t),e},e.prototype.createToastContent=function(e){var t=$("<div></div>");return t.addClass("toast-body"),t.html(this.errorMessage),e.append(t),e},e.prototype.initToast=function(e){$("#toastsContainer").append(e),$(".toast").toast({delay:this.delay}),$(".toast").toast("show")},e.prototype.destroyToast=function(e){setTimeout((function(){e.remove()}),this.delay)},e}(),l={authorCourseTemplates:{table:{id:"authorCourseTemplates",alias:"List Courses",columns:function(){for(var e=0,t=0,a=arguments.length;t<a;t++)e+=arguments[t].length;var r=Array(e),n=0;for(t=0;t<a;t++)for(var o=arguments[t],i=0,s=o.length;i<s;i++,n++)r[n]=o[i];return r}([{alias:"Course ID",id:"id",dataType:"int"},{alias:"Estimated Time",id:"estimated_time",dataType:"int"},{alias:"Course Title",id:"title",dataType:"string"},{alias:"Created At",id:"created_at",dataType:"datetime"},{alias:"Default Days Until Due",id:"default_days_until_due",dataType:"int"},{alias:"Default Due On Date",id:"default_due_on_date",dataType:"datetime"},{alias:"Due Date Type",id:"due_date_type",dataType:"string"},{alias:"Has Been Unpublished",id:"has_been_unpublished",dataType:"bool"},{alias:"Is Archived",id:"is_archived",dataType:"bool"},{alias:"Archived At",id:"archived_at",dataType:"datetime"},{alias:"Is Published",id:"is_published",dataType:"bool"},{alias:"Passing Threshold",id:"passing_threshold",dataType:"int"},{alias:"Quizzes Count",id:"quizzes_count",dataType:"int"},{alias:"Uses Bridge Retain",id:"retain",dataType:"bool"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Max Quiz Attempts",id:"max_quiz_attempts",dataType:"int"},{alias:"Continuing Education Credits",id:"continuing_education_credits",dataType:"int"},{alias:"Description of Course",id:"description",dataType:"string"},{alias:"Has unpublished changes",id:"has_unpublished_changes",dataType:"bool"},{alias:"Course Type",id:"course_type",dataType:"string"},{alias:"Enrollments Count",id:"enrollments_count",dataType:"int"},{alias:"Incomplete Enrollments Count",id:"incomplete_enrollments_count",dataType:"int"},{alias:"Attachments Count",id:"attachments_count",dataType:"int"},{alias:"Third Party Course Id",id:"third_party_course_id",dataType:"string"},{alias:"Show Correct Response",id:"show_correct_response",dataType:"bool"},{alias:"Branding Override",id:"branding_override",dataType:"bool"},{alias:"Course Tags",id:"tags",dataType:"string"},{alias:"Course Categories",id:"categories",dataType:"string"},{alias:"Quizzes Open Book",id:"open_book",dataType:"bool"},{alias:"Has Certificate",id:"has_certificate",dataType:"bool"},{alias:"External Course ID",id:"has_certificate",dataType:"string"},{alias:"Due Date Type (Relative, Fixed)",id:"due_date_type",dataType:"string"},{alias:"Date Course is Due(Fixed)",id:"default_due_on_date",dataType:"datetime"},{alias:"Default Days Until Due",id:"default_days_until_due",dataType:"datetime"},{alias:"Course Registration URL",id:"enroll_url",dataType:"string"}],[{alias:"Author ID",id:"author_id",parent_id:"author",sub_id:"id",dataType:"int"}],[{alias:"Enrollment Count - All",id:"enrollment-counts_all",parent_id:"enrollment_counts",sub_id:"all",dataType:"int"},{alias:"Enrollment Count - Required",id:"enrollment-counts_required",parent_id:"enrollment_counts",sub_id:"required",dataType:"int"},{alias:"Enrollment Count - Optional",id:"enrollment-counts_optional",parent_id:"enrollment_counts",sub_id:"optional",dataType:"int"},{alias:"Enrollment Count - Finished",id:"enrollment-counts_finished",parent_id:"enrollment_counts",sub_id:"finished",dataType:"int"},{alias:"Enrollment Count - In Progress",id:"enrollment-counts_in-progress",parent_id:"enrollment_counts",sub_id:"in_progress",dataType:"int"},{alias:"Enrollment Count - Incomplete",id:"enrollment-counts_incomplete",parent_id:"enrollment_counts",sub_id:"incomplete",dataType:"int"},{alias:"Enrollment Count - Incomplete or Finished",id:"enrollment-counts_incomplete-or-finished",parent_id:"enrollment_counts",sub_id:"incomplete_or_finished",dataType:"int"},{alias:"Enrollment Count - Not Started",id:"enrollment-counts_not-started",parent_id:"enrollment_counts",sub_id:"not_started",dataType:"int"},{alias:"Enrollment Count - Overdue",id:"enrollment-counts_overdue",parent_id:"enrollment_counts",sub_id:"overdue",dataType:"int"}],[{alias:"SubAccount ID",id:"sub_account_id",parent_id:"sub_account",sub_id:"id",dataType:"int"},{alias:"SubAccount Name",id:"sub_account_name",parent_id:"sub_account",sub_id:"name",dataType:"string"},{alias:"SubAccount Is Root",id:"sub_account_is_root",parent_id:"sub_account",sub_id:"is_root",dataType:"bool"}])},path:"/api/author/course_templates",data:"course_templates",parameters:[{name:"Sort",parameter:"sort",type:"options",default:"Default",options:[{name:"Newest",value:"newest"},{name:"Title",value:"title"},{name:"Updated",value:"updated"},{name:"Archived",value:"archived"}]},{name:"Search",parameter:"search",type:"string",placeholder:"search terms"},{name:"Filters",parameter:"filters",type:"filters",default:"Default",options:[{name:"My Courses",value:"my_courses"},{name:"Unpublished",value:"unpublished"},{name:"Has Certificate",value:"has_certificate"},{name:"No Enrollments",value:"no_enrollments"},{name:"Bridge Courses",value:"bridge"},{name:"Scorm Courses",value:"scorm"},{name:"Lynda Courses",value:"lynda"},{name:"Opensesame Courses",value:"opensesame"}]},{name:"Only Deleted",parameter:"only_deleted",type:"boolean"},{name:"Include Deleted",parameter:"with_deleted",type:"boolean"},{name:"Updated After",parameter:"updated_after",type:"date"},{name:"Created After",parameter:"created_after",type:"date"},{name:"Deleted After",parameter:"deleted_after",type:"date"},{name:"Updated Before",parameter:"updated_before",type:"date"},{name:"Created Before",parameter:"created_before",type:"date"},{name:"Deleted Before",parameter:"deleted_before",type:"date"}]}},c=function(){return(c=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},p=c(c(c({},l),{authorListEnrollments:{table:{id:"authorListEnrollments",alias:"Specific Course Enrollments",columns:[{alias:"Enrollment ID",id:"id",dataType:"int"},{alias:"Course ID",id:"course_template",dataType:"int"},{alias:"Due At",id:"end_at",dataType:"datetime"},{alias:"Expire At",id:"expires_at",dataType:"datetime"},{alias:"Completed At",id:"completed_at",dataType:"datetime"},{alias:"Created At",id:"created_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Course Progress",id:"progress",dataType:"float"},{alias:"Is Removable",id:"can_be_removed",dataType:"bool"},{alias:"Is Able To Be Optional",id:"can_be_made_optional",dataType:"bool"},{alias:"Is Active",id:"active",dataType:"bool"},{alias:"Is Required",id:"required",dataType:"bool"},{alias:"Is Permanently Failed",id:"is_permanently_failed",dataType:"bool"},{alias:"Is Archived",id:"is_archived",dataType:"bool"},{alias:"Score",id:"score",dataType:"int"},{alias:"Enrollment Status",id:"state",dataType:"string"},{alias:"Can Re-Enroll",id:"allow_re_enroll",dataType:"bool"},{alias:"Name",id:"name",linkedSource:"learner",linkedId:"name",dataType:"string"},{alias:"User ID",id:"user_id",linkedSource:"learner",linkedId:"id",dataType:"int"}]},path:"/api/author/course_templates/*/enrollments",data:"enrollments",requiredParameter:{title:"Course",path:"/api/author/course_templates",data:"course_templates",nameCol:"title",valCol:"id"}}}),{authorUser:{table:{id:"authorUser",alias:"List Users",columns:[{alias:"User ID",id:"id",dataType:"int"},{alias:"Unique Login ID",id:"uid",dataType:"string"},{alias:"HRIS ID",id:"hris_id",dataType:"string"},{alias:"First Name",id:"first_name",dataType:"string"},{alias:"Last Name",id:"last_name",dataType:"string"},{alias:"Language",id:"locale",dataType:"string"},{alias:"Email Address",id:"email",dataType:"string"},{alias:"Welcomed to Bridge",id:"welcomedAt",dataType:"datetime"},{alias:"Last Login",id:"loggedInAt",dataType:"datetime"},{alias:"Password is Set",id:"passwordIsSet",dataType:"bool"},{alias:"Full Name",id:"full_name",dataType:"string"},{alias:"Name",id:"name",dataType:"string"},{alias:"Avatar URL",id:"avatar_url",dataType:"string"},{alias:"Deleted At",id:"deleted_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Unsubscribed from Emails",id:"unsubscribed",dataType:"bool"},{alias:"Hire Date",id:"hire_date",dataType:"date"},{alias:"Is a Manager",id:"is_manager",dataType:"bool"},{alias:"Job Title",id:"job_title",dataType:"string"},{alias:"User Bio",id:"bio",dataType:"string"},{alias:"Sortable Name",id:"sortable_name",dataType:"string"},{alias:"Department",id:"department",dataType:"string"},{alias:"Roles",id:"roles",dataType:"string"}]},path:"/api/author/users",data:"users",parameters:[{name:"Sort",parameter:"sort",type:"options",default:"Default",options:[{name:"Name",value:"name"},{name:"Number of Completed Courses",value:"complete_courses_count"},{name:"Next Due Date",value:"next_due_date"}]},{name:"Search",parameter:"search",type:"string",placeholder:"search terms"},{name:"Only Deleted",parameter:"only_deleted",type:"boolean"},{name:"Include Deleted",parameter:"with_deleted",type:"boolean"},{name:"Role",parameter:"role",type:"options",default:"Any",options:[{name:"Account Admin",value:"account_admin"},{name:"Admin",value:"admin"},{name:"Author",value:"author"}]},{name:"Updated After",parameter:"updated_after",type:"date"},{name:"Created After",parameter:"created_after",type:"date"},{name:"Deleted After",parameter:"deleted_after",type:"date"},{name:"Updated Before",parameter:"updated_before",type:"date"},{name:"Created Before",parameter:"created_before",type:"date"},{name:"Deleted Before",parameter:"deleted_before",type:"date"},{name:"Only Managers",parameter:"only_managers",type:"boolean"}]}}),d=function(){function e(){this.tables=p,this.defaultErrorMessage="An error has occured. Check that the url and api key are correct."}return e.prototype.showElement=function(e,t){t?$("#"+e).css("display",""):$("#"+e).css("display","none")},e.prototype.switchPage=function(e,t){this.showElement(e,!1),this.showElement(t,!0)},e.prototype.showLoading=function(e){e?($("#addButton").prop("disabled",!0),$("#addButton").html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>')):($("#addButton").prop("disabled",!1),$("#addButton").html("Add"))},e.prototype.clearRequiredParameterOptions=function(){$("#requiredParameterSelector").html("")},e.prototype.addOption=function(e,t,a){var r=document.createElement("option");r.innerText=e,r.setAttribute("value",t),r.setAttribute("id",t),a.appendChild(r)},e.prototype.addTableOptions=function(e){var t=$("#apiSelector")[0];for(var a in e)if(a in e){var r=e[a].table.alias,n=e[a].table.id;this.addOption(r,n,t)}},e.prototype.editTable=function(e){$("#tableName").val($("#"+e+" .title").text()),$("#edit-section").attr("currentTable",e);var t=$("#"+e).attr("data-api"),a=$("#"+e).attr("data-require"),r=decodeURIComponent($("#"+e).attr("data-optional"));if("parameters"in p[t]&&(this.showElement("optionalParameterSection",!0),this.addOptionalParameters(t),""!=r))for(var n=0,o=r.split("&");n<o.length;n++){var i=o[n].split("="),s="filters[]"==i[0]?"filters":i[0],u=i[1];$("#input-"+s).val(u)}if("requiredParameter"in p[t]){var l=p[t].requiredParameter.path,c=$("#url").val();this.clearRequiredParameterOptions(),this.showElement("requiredParameter",!0),$("#requiredParameterTitle").text(p[t].requiredParameter.title);try{this.getRequiredParameterData(new URL(l,c),t,$("#apiKey").val(),a)}catch(e){console.log(e),this.showErrorMessage(this.defaultErrorMessage),this.showLoading(!1)}}else this.showElement("requiredParameter",!1),this.switchPage("api-section","edit-section")},e.prototype.deleteTable=function(e){var t=$("#apiList li").length;$("#"+e).remove();for(var a=parseInt(e)+1;a<t;a++){var r=a-1;$("#"+a+" .deleteButton").attr("onclick","deleteTable("+r+")"),$("#"+a+" .editButton").attr("onclick","editTable("+r+")"),$("#"+a).attr("id",r)}$("#apiList li").length<=0&&this.showElement("emptyApiListMessage",!0)},e.prototype.showErrorMessage=function(e,t,a){void 0===t&&(t="Error"),void 0===a&&(a=800),new u(e,t,a).createToast()},e.prototype.addOptionalParameters=function(e){for(var t=0,a=p[e].parameters;t<a.length;t++){var r=a[t],n="";if(["options","filters"].includes(r.type)){for(var o=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(l=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+l+'">'+r.name+"</label>","</div>",'<select class="custom-select" id="input-'+l+'">','<option value="nosel" selected>'+r.default+"</option>"],i=0,s=r.options;i<s.length;i++){var u=s[i];o.push('<option value="'+u.value+'">'+u.name+"</option>")}o.push.apply(o,["</select>","</div>"]),n=o.join("\n")}else if("boolean"==r.type){n=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(l=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+l+'">'+r.name+"</label>","</div>",'<select class="custom-select" id="input-'+l+'">','<option selected value="false">False</option>','<option value="true">True</option>',"</select>","</div>"].join("\n")}else if("date"==r.type){n=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(l=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+l+'">'+r.name+"</label>","</div>",'<input type="date" class="form-control" id="input-'+l+'">','<div class="input-group-append">','<button class="btn btn-outline-danger" type="button" onclick="clearValue(\'input-'+l+"')\">Clear</button>","</div>","</div>"].join("\n")}else if("string"==r.type){var l;n=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(l=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+l+'">'+r.name+"</label>","</div>",'<input type="text" class="form-control" placeholder="'+r.placeholder+'" id="input-'+l+'">',"</div>"].join("\n")}$("#optionalParameterList").append(n)}},e.prototype.getRequiredParameterData=function(e,t,a,r){var n=this,i=new s(e,a).setUrl();o()({method:"get",url:i.apiCall,headers:i.headers}).then((function(e){for(var o=e.data,i=p[t],s=o[i.requiredParameter.data],u=i.requiredParameter.nameCol,l=i.requiredParameter.valCol,c=$("#requiredParameterSelector")[0],d=0,f=s.length;d<f;d++)n.addOption(s[d][u],s[d][l],c);"next"in o.meta?n.getRequiredParameterData(o.meta.next,t,a,r):(null!=r&&$("#requiredParameterSelector").val(r),n.switchPage("api-section","edit-section"),n.showLoading(!1))})).catch((function(e){console.log(e),n.showLoading(!1),n.showErrorMessage(n.defaultErrorMessage)}))},e}(),f=(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(e,t)},function(e,t){function a(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}),m=function(e){function t(){var t=e.call(this)||this;return $("#addButton").on("click",(function(){t.api=$("#apiSelector").val(),$("#tableName").val(t.tables[t.api].table.alias),$("#edit-section").attr("currentTable",$("#apiList li").length),t.parameters(t.api,t.tables),t.requiredParameter(t.api,t.tables)})),t}return f(t,e),t.prototype.parameters=function(e,t){"parameters"in t[e]&&(this.showElement("optionalParameterSection",!0),this.addOptionalParameters(e))},t.prototype.requiredParameter=function(e,t){var a,r,n;if("requiredParameter"in t[e]){a=t[e].requiredParameter.path,r=$("#url").val(),n=t[e].requiredParameter.title,this.showLoading(!0),this.clearRequiredParameterOptions(),this.showElement("requiredParameter",!0),$("#requiredParameterTitle").text(n);try{this.getRequiredParameterData(new URL(a,r),e,$("#apiKey").val(),void 0)}catch(e){console.log(e),this.showErrorMessage(this.defaultErrorMessage),this.showLoading(!1)}}else this.showElement("requiredParameter",!1),this.switchPage("api-section","edit-section")},t}(d),h=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(t,a)};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}(),y=function(e){function t(){var t=e.call(this)||this;return t.addTableOptions(p),t}return h(t,e),t}(d),v=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(t,a)};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}(),b=function(e){function t(t,a){return e.call(this,t,a)||this}return v(t,e),t.prototype.performApiCall=function(){var e=this;if(this.apiCall&&this.apiKey){this.validateUrl(this.apiCall);var t=this.setUrl(this.apiCall,this.apiKey),a={method:"get",url:t.apiCall+"api/author/users?id=1",headers:t.headers};o()(a).then((function(e){var t,a;if(((null===(a=null===(t=null==e?void 0:e.data)||void 0===t?void 0:t.toString())||void 0===a?void 0:a.toLowerCase())||"").includes("account not found"))throw new Error("account not found")})).catch((function(t){var a,r;(null===(a=null==t?void 0:t.message)||void 0===a?void 0:a.includes("account not found"))?e.error("Account Not Found: Check your URL"):401==(null===(r=null==t?void 0:t.response)||void 0===r?void 0:r.status)?e.error("Unauthorized: Please check that your Key is valid."):(e.error("An error has occured, with your credentials see the browser console for more details"),console.log(t))}))}else this.error("Please enter a value for URL and Key")},t.prototype.validateUrl=function(e){try{new URL(e)}catch(a){var t=e||'" "';this.error(t+" is not a valid URL")}},t.prototype.error=function(e){new u(e).createToast()},t}(s),g=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(t,a)};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}(),_=function(e){function t(){var t=e.call(this)||this;return $("#credentialsButton").on("click",(function(){t.switchPage("url-section","api-section"),new b($("#url").val(),$("#apiKey").val()).performApiCall()})),t}return g(t,e),t}(d),T=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(t,a)};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}(),w=function(e){function t(){var t=e.call(this)||this;return $("#apiList").on("click","#deleteList",(function(e){var a=e.target.offsetParent.id;e.target&&e.target.offsetParent.id==a&&t.deleteTable(a)})),t}return T(t,e),t}(d),C=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(t,a)};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}(),O=function(e){function t(){var t=e.call(this)||this;return $("#editDoneButton").on("click",(function(){t.id=$("#edit-section").attr("currentTable"),t.ulLength=$("#apiList li").length,t.api=$("#apiSelector").val(),t.title=$("#tableName").val(),t.apiList(t.id,t.api,t.title,t.ulLength),t.requiredParameter(t.id,t.api,t.tables),t.parameters(t.id,t.api,t.tables),t.switchPage("edit-section","api-section"),t.showElement("optionalParameterSection",!1),$("#optionalParameterSelector").empty(),$("#optionalParameterList").html(""),$("#optionalParameterList").hasClass("show")&&$("#optionalParameterButton").click()})),t}return C(t,e),t.prototype.apiList=function(e,t,a,r){if(e<r)$("#"+e+" .title").text(a);else{r<=0&&this.showElement("emptyApiListMessage",!1);var n=this.buildHtml(e,t,a);$("#apiList").append(n)}},t.prototype.buildHtml=function(e,t,a){return['<li data-api="'+t+'" class="list-group-item" id="'+e+'">','<div class="row">','<div class="col titleColumn">','<div class="title">'+a+"</div>","</div>",'<div class="col-xs-auto">',"<span>",'<button class="btn btn-light mx-1" id="editList" type="button">Edit</button>','<button class="btn btn-light mx-1" id="deleteList" type="button">Delete</button>',"</span>","</div>","</div>","</li>"].join("\n")},t.prototype.requiredParameter=function(e,t,a){var r;"requiredParameter"in a[t]&&(r=$("#requiredParameterSelector").val(),$("#"+e).attr("data-require",r))},t.prototype.parameters=function(e,t,a){var r;if("parameters"in a[t]){for(var n=[],o=$("#optionalParameterList").children(),i=0;i<o.length;i++){var s=$(o[i]),u=s.attr("id");if("options"==s.attr("parametertype"))"nosel"!=(l=$("#input-"+u+" option:selected").val())&&(r=l);else if("filters"==s.attr("parametertype")){"false"!=(l=$("#input-"+u+" option:selected").val())&&(u+="[]",r=l)}else if("boolean"==s.attr("parametertype")){var l;"false"!=(l=$("#input-"+u+" option:selected").val())&&(r=l)}else("string"==s.attr("parametertype")||"date"==s.attr("parametertype"))&&(r=$("#input-"+u).val());null!=r&&n.push({name:u,value:r})}for(var c,p=[],d=0,f=n;d<f.length;d++){var m=f[d];p.push([m.name,m.value].join("="))}c=encodeURIComponent(p.join("&")),$("#"+e).attr("data-optional",c),console.log(c)}},t}(d),P=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(t,a)};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}(),A=function(e){function t(){var t=e.call(this)||this;return $("#apiList").on("click","#editList",(function(e){var a=e.target.offsetParent.id;e.target&&e.target.offsetParent.id==a&&t.editTable(a)})),t}return P(t,e),t}(d),E=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(t,a)};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}(),x=function(e){function t(){var t=e.call(this)||this;return $("#resetButton").on("click",(function(){t.switchPage("api-section","url-section")})),t}return E(t,e),t}(d);var S=function(){function e(){var e=this;this.myConnector=tableau.makeConnector(),this.myTables={},this.myConnector.init=function(e){tableau.log("tableau web connector initialization"),tableau.authType=tableau.authTypeEnum.custom,e()},this.myConnector.getSchema=function(t){tableau.log("getSchema");for(var a=[],r=1,n=0,o=JSON.parse(tableau.connectionData).tables;n<o.length;n++){var i=o[n],s=i.apiCall,u=JSON.parse(JSON.stringify(p[s])),l="table"+r;if(u.table.alias=i.title,u.table.id=l,r+=1,"requiredParameter"in i){var c=u.path.replace("*",i.requiredParameter);u.path=c}if("optionalParameters"in i){c=u.path+"?"+i.optionalParameters;u.path=c}e.myTables[l]=u,a.push(u.table),console.log(a)}t(a)},this.myConnector.getData=function(t,a){tableau.log("getData");var r=JSON.parse(tableau.connectionData),n=t.tableInfo.id,o=e.myTables[n].path,i=new URL(o,r.url);new s(i,tableau.password).performApiCall(t,a,i,e.myTables,tableau.password)},tableau.registerConnector(this.myConnector)}return Object.defineProperty(e.prototype,"apiKey",{get:function(){return tableau.password},set:function(e){tableau.password=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"connectionData",{get:function(){return tableau.connectionData},set:function(e){!function(e){try{JSON.parse(e)}catch(e){return!1}return!0}(e)?tableau.connectionData=JSON.stringify(e):tableau.connectionData=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"connectionName",{get:function(){return tableau.connectionName},set:function(e){tableau.connectionName=e},enumerable:!1,configurable:!0}),e.prototype.tableauSubmit=function(){tableau.submit()},e}(),j=function(){var e=function(t,a){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])})(t,a)};return function(t,a){function r(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(r.prototype=a.prototype,new r)}}(),L=function(e){function t(){var t=e.call(this)||this;return t.tableau=new S,$("#submitButton").on("click",(function(){for(var e=[],a=0,r=$("#apiList")[0].getElementsByTagName("li");a<r.length;a++){var n=r[a],o={apiCall:n.getAttribute("data-api"),title:n.getElementsByClassName("title")[0].innerText};n.hasAttribute("data-require")&&(o.requiredParameter=n.getAttribute("data-require")),n.hasAttribute("data-optional")&&(o.optionalParameters=n.getAttribute("data-optional")),e.push(o)}var i={url:$("#url").val(),tables:e};t.tableau.connectionData=JSON.stringify(i),t.tableau.apiKey=$("#apiKey").val(),t.tableau.connectionName="Bridge API",t.tableau.tableauSubmit()})),t}return j(t,e),t}(d);$(document).ready((function(){window.clearValue=function(e){$("#"+e).val("")},new y,new m,new A,new w,new O,new x,new _,new L}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,