!function(e){var t={};function a(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=t,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)a.d(r,n,function(t){return e[t]}.bind(null,n));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=11)}([function(e,t,a){"use strict";var r=a(3),n=Object.prototype.toString;function i(e){return"[object Array]"===n.call(e)}function o(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===n.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var a=0,r=e.length;a<r;a++)t.call(null,e[a],a,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===n.call(e)},isBuffer:function(e){return null!==e&&!o(e)&&null!==e.constructor&&!o(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:o,isDate:function(e){return"[object Date]"===n.call(e)},isFile:function(e){return"[object File]"===n.call(e)},isBlob:function(e){return"[object Blob]"===n.call(e)},isFunction:l,isStream:function(e){return s(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:u,merge:function e(){var t={};function a(a,r){"object"==typeof t[r]&&"object"==typeof a?t[r]=e(t[r],a):t[r]=a}for(var r=0,n=arguments.length;r<n;r++)u(arguments[r],a);return t},deepMerge:function e(){var t={};function a(a,r){"object"==typeof t[r]&&"object"==typeof a?t[r]=e(t[r],a):t[r]="object"==typeof a?e({},a):a}for(var r=0,n=arguments.length;r<n;r++)u(arguments[r],a);return t},extend:function(e,t,a){return u(t,(function(t,n){e[n]=a&&"function"==typeof t?r(t,a):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,a){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.tables=void 0;var n=a(12),i=a(13),o=a(14),s=a(15),l=a(16),u=a(17),d=a(18),p=a(19),c=a(20),f=a(21),m=a(22),h=r(r(r(r(r(r(r(r(r(r(r({},n.courseTemplates),i.groups),o.listEnrollments),s.listProgramLearners),l.liveCourseSessions),u.liveCourses),d.programs),p.taggedItems),c.tags),f.tasks),m.users);t.tables=h},function(e,t,a){e.exports=a(25)},function(e,t,a){"use strict";e.exports=function(e,t){return function(){for(var a=new Array(arguments.length),r=0;r<a.length;r++)a[r]=arguments[r];return e.apply(t,a)}}},function(e,t,a){"use strict";var r=a(0);function n(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,a){if(!t)return e;var i;if(a)i=a(t);else if(r.isURLSearchParams(t))i=t.toString();else{var o=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),o.push(n(t)+"="+n(e))})))})),i=o.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,a){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,a){"use strict";(function(t){var r=a(0),n=a(31),i={"Content-Type":"application/x-www-form-urlencoded"};function o(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,l={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(s=a(7)),s),transformRequest:[function(e,t){return n(t,"Accept"),n(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(o(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(o(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(i)})),e.exports=l}).call(this,a(30))},function(e,t,a){"use strict";var r=a(0),n=a(32),i=a(4),o=a(34),s=a(37),l=a(38),u=a(8);e.exports=function(e){return new Promise((function(t,d){var p=e.data,c=e.headers;r.isFormData(p)&&delete c["Content-Type"];var f=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=e.auth.password||"";c.Authorization="Basic "+btoa(m+":"+h)}var y=o(e.baseURL,e.url);if(f.open(e.method.toUpperCase(),i(y,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var a="getAllResponseHeaders"in f?s(f.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:a,config:e,request:f};n(t,d,r),f=null}},f.onabort=function(){f&&(d(u("Request aborted",e,"ECONNABORTED",f)),f=null)},f.onerror=function(){d(u("Network Error",e,null,f)),f=null},f.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),d(u(t,e,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var v=a(39),b=(e.withCredentials||l(y))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;b&&(c[e.xsrfHeaderName]=b)}if("setRequestHeader"in f&&r.forEach(c,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete c[t]:f.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){f&&(f.abort(),d(e),f=null)})),void 0===p&&(p=null),f.send(p)}))}},function(e,t,a){"use strict";var r=a(33);e.exports=function(e,t,a,n,i){var o=new Error(e);return r(o,t,a,n,i)}},function(e,t,a){"use strict";var r=a(0);e.exports=function(e,t){t=t||{};var a={},n=["url","method","params","data"],i=["headers","auth","proxy"],o=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(n,(function(e){void 0!==t[e]&&(a[e]=t[e])})),r.forEach(i,(function(n){r.isObject(t[n])?a[n]=r.deepMerge(e[n],t[n]):void 0!==t[n]?a[n]=t[n]:r.isObject(e[n])?a[n]=r.deepMerge(e[n]):void 0!==e[n]&&(a[n]=e[n])})),r.forEach(o,(function(r){void 0!==t[r]?a[r]=t[r]:void 0!==e[r]&&(a[r]=e[r])}));var s=n.concat(i).concat(o),l=Object.keys(t).filter((function(e){return-1===s.indexOf(e)}));return r.forEach(l,(function(r){void 0!==t[r]?a[r]=t[r]:void 0!==e[r]&&(a[r]=e[r])})),a}},function(e,t,a){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,a){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var n=a(1),i=r(a(23)),o=a(24),s=r(a(2)),l=new i.default(o.performApiCall),u="Could not fetch course data. Check that the url and api key are correct.";$(document).ready((function(){var e=function(e,t,a){var r=document.createElement("option");r.innerText=e,r.setAttribute("value",t),r.setAttribute("id",t),a.appendChild(r)},t=function(){$("#requiredParameterSelector").html("")},a=function(e,t){t?$("#"+e).css("display",""):$("#"+e).css("display","none")},r=function(e,t){a(e,!1),a(t,!0)},i=function(e){e?($("#addButton").prop("disabled",!0),$("#addButton").html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span><span class="sr-only">Loading...</span>')):($("#addButton").prop("disabled",!1),$("#addButton").html("Add"))},d=function(e,t){$("#errorText").html(e),a("errorCard",!0),setTimeout((function(){a("errorCard",!1),$("#errorText").html("")}),1e3*t)};window.editTable=function(e){$("#tableName").val($("#"+e+" .title").text()),$("#edit-section").attr("currentTable",e);var o=$("#"+e).attr("data-api"),s=$("#"+e).attr("data-require"),l=$("#"+e).attr("data-optional");if("parameters"in n.tables[o]&&(a("optionalParameterSection",!0),c(o),""!=l))for(var f=0,m=l.split("&");f<m.length;f++){var h=m[f].split("="),y=h[0],v=h[1];v=decodeURIComponent(v),$("#input-"+y).val(v)}if("requiredParameter"in n.tables[o]){t(),a("requiredParameter",!0),$("#requiredParameterTitle").text(n.tables[o].requiredParameter.title);try{p(new URL(n.tables[o].requiredParameter.path,$("#url").val()),o,$("#apiKey").val(),s)}catch(e){console.log(e),d(u,5),i(!1)}}else a("requiredParameter",!1),r("api-section","edit-section")};window.deleteTable=function(e){var t=$("#apiList li").length;$("#"+e).remove();for(var r=parseInt(e)+1;r<t;r++){var n=r-1;$("#"+r+" .deleteButton").attr("onclick","deleteTable("+n+")"),$("#"+r+" .editButton").attr("onclick","editTable("+n+")"),$("#"+r).attr("id",n)}$("#apiList li").length<=0&&a("emptyApiListMessage",!0)},$("#submitButton").click((function(){for(var e=[],t=0,a=$("#apiList")[0].getElementsByTagName("li");t<a.length;t++){var r=a[t],n={apiCall:r.getAttribute("data-api"),title:r.getElementsByClassName("title")[0].innerText};r.hasAttribute("data-require")&&(n.requiredParameter=r.getAttribute("data-require")),r.hasAttribute("data-optional")&&(n.optionalParameters=r.getAttribute("data-optional")),e.push(n)}var i={url:$("#url").val(),tables:e};l.setConnectionData(JSON.stringify(i)),l.setApiKey($("#apiKey").val()),l.setConnectionName("Bridge API"),l.tableauSubmit()}));var p=function(t,a,l,c){var f=o.setUrl(t,l);s.default({method:"get",url:f.apiCall,headers:f.headers}).then((function(t){for(var o=t.data,s=n.tables[a],u=o[s.requiredParameter.data],d=s.requiredParameter.nameCol,f=s.requiredParameter.valCol,m=$("#requiredParameterSelector")[0],h=0,y=u.length;h<y;h++)e(u[h][d],u[h][f],m);o.meta.hasOwnProperty("next")?p(o.meta.next,a,l,c):(null!=c&&$("#requiredParameterSelector").val(c),r("api-section","edit-section"),i(!1))})).catch((function(e){console.log(e),i(!1),d(u,5)}))};window.clearDate=function(e){$("#"+e).val("")};var c=function(e){for(var t=0,a=n.tables[e].parameters;t<a.length;t++){var r=a[t],i="";if("options"==r.type){for(var o=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(d=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+d+'">'+r.name+"</label>","</div>",'<select class="custom-select" id="input-'+d+'">','<option value="nosel" selected>'+r.default+"</option>"],s=0,l=r.options;s<l.length;s++){var u=l[s];o.push('<option value="'+u.value+'">'+u.name+"</option>")}o.push.apply(o,["</select>","</div>"]),i=o.join("\n")}else if("boolean"==r.type){i=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(d=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+d+'">'+r.name+"</label>","</div>",'<select class="custom-select" id="input-'+d+'">','<option selected value="false">False</option>','<option value="true">True</option>',"</select>","</div>"].join("\n")}else if("date"==r.type){i=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(d=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+d+'">'+r.name+"</label>","</div>",'<input type="date" class="form-control" id="input-'+d+'">','<div class="input-group-append">','<button class="btn btn-outline-danger" type="button" onclick="clearDate(\'input-'+d+"')\">Clear</button>","</div>","</div>"].join("\n")}else if("string"==r.type){var d;i=['<div class="input-group my-3" parameterType="'+r.type+'" id="'+(d=r.parameter)+'">','<div class="input-group-prepend">','<label class="input-group-text" for="input-'+d+'">'+r.name+"</label>","</div>",'<input type="text" class="form-control" placeholder="'+r.placeholder+'" id="input-'+d+'">',"</div>"].join("\n")}$("#optionalParameterList").append(i)}};$("#addButton").click((function(){var e=$("#apiSelector").val();if($("#tableName").val(n.tables[e].table.alias),$("#edit-section").attr("currentTable",$("#apiList li").length),"parameters"in n.tables[e]&&(a("optionalParameterSection",!0),c(e)),"requiredParameter"in n.tables[e]){i(!0),t(),a("requiredParameter",!0),$("#requiredParameterTitle").text(n.tables[e].requiredParameter.title);try{p(new URL(n.tables[e].requiredParameter.path,$("#url").val()),e,$("#apiKey").val(),void 0)}catch(e){console.log(e),d(u,5),i(!1)}}else a("requiredParameter",!1),r("api-section","edit-section")})),$("#editDoneButton").click((function(){var e=$("#edit-section").attr("currentTable"),t=$("#apiList li").length,i=$("#apiSelector").val(),o=$("#tableName").val();if(e<t)$("#"+e+" .title").text(o);else{t<=0&&a("emptyApiListMessage",!1);var s=['<li data-api="'+i+'" class="list-group-item" id="'+e+'">','<div class="row">','<div class="col titleColumn">','<div class="title">'+o+"</div>","</div>",'<div class="col-xs-auto">',"<span>",'<button class="btn btn-light mx-1 editButton" type="button" onclick="editTable('+e+')">Edit</button>','<button class="btn btn-light mx-1 deleteButton" type="button" onclick="deleteTable('+e+')">Delete</button>',"</span>","</div>","</div>","</li>"].join("\n");$("#apiList").append(s)}if("requiredParameter"in n.tables[i]){var l=$("#requiredParameterSelector").val();$("#"+e).attr("data-require",l)}if("parameters"in n.tables[i]){for(var u=[],d=$("#optionalParameterList").children(),p=0;p<d.length;p++){var c=$(d[p]),f=c.attr("id"),m="";if("options"==c.attr("parametertype"))"nosel"!=(h=$("#input-"+f+" option:selected").val())&&(m=h);else if("boolean"==c.attr("parametertype")){var h;"false"!=(h=$("#input-"+f+" option:selected").val())&&(m=h)}else("string"==c.attr("parametertype")||"date"==c.attr("parametertype"))&&(m=$("#input-"+f).val());""!=m&&(m=encodeURIComponent(m),u.push({name:f,value:m}))}for(var y,v=[],b=0,g=u;b<g.length;b++){var _=g[b];v.push([_.name,_.value].join("="))}y=v.join("&"),$("#"+e).attr("data-optional",y),console.log(y)}r("edit-section","api-section"),a("optionalParameterSection",!1),$("#optionalParameterSelector").empty(),$("#optionalParameterList").html(""),$("#optionalParameterList").hasClass("show")&&$("#optionalParameterButton").click()})),$("#resetButton").click((function(){r("api-section","url-section")})),$("#credentialsButton").click((function(){r("url-section","api-section")})),function(t){var a=$("#apiSelector")[0];for(var r in t)if(t.hasOwnProperty(r)){var n=t[r].table.alias,i=t[r].table.id;e(n,i,a)}}(n.tables)}))},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.courseTemplates=void 0;t.courseTemplates={authorCourseTemplates:{table:{id:"authorCourseTemplates",alias:"List Courses",columns:[{alias:"Course ID",id:"id",dataType:"int"},{alias:"Estimated Time",id:"estimated_time",dataType:"int"},{alias:"Course Title",id:"title",dataType:"string"},{alias:"Author Name",id:"author_name",parent_id:"author",sub_id:"name",dataType:"string"},{alias:"Author ID",id:"author_id",parent_id:"author",sub_id:"id",dataType:"int"},{alias:"Author UID",id:"author_uid",parent_id:"author",sub_id:"uid",dataType:"string"},{alias:"Created At",id:"created_at",dataType:"datetime"},{alias:"Default Days Until Due",id:"default_days_until_due",dataType:"int"},{alias:"Default Due On Date",id:"default_due_on_date",dataType:"datetime"},{alias:"Due Date Type",id:"due_date_type",dataType:"string"},{alias:"Enrollment Count - All",id:"enrollment-counts_all",parent_id:"enrollment_counts",sub_id:"all",dataType:"int"},{alias:"Enrollment Count - Required",id:"enrollment-counts_required",parent_id:"enrollment_counts",sub_id:"required",dataType:"int"},{alias:"Enrollment Count - Optional",id:"enrollment-counts_optional",parent_id:"enrollment_counts",sub_id:"optional",dataType:"int"},{alias:"Enrollment Count - Finished",id:"enrollment-counts_finished",parent_id:"enrollment_counts",sub_id:"finished",dataType:"int"},{alias:"Enrollment Count - In Progress",id:"enrollment-counts_in-progress",parent_id:"enrollment_counts",sub_id:"in_progress",dataType:"int"},{alias:"Enrollment Count - Incomplete",id:"enrollment-counts_incomplete",parent_id:"enrollment_counts",sub_id:"incomplete",dataType:"int"},{alias:"Enrollment Count - Incomplete or Finished",id:"enrollment-counts_incomplete-or-finished",parent_id:"enrollment_counts",sub_id:"incomplete_or_finished",dataType:"int"},{alias:"Enrollment Count - Not Started",id:"enrollment-counts_not-started",parent_id:"enrollment_counts",sub_id:"not_started",dataType:"int"},{alias:"Enrollment Count - Overdue",id:"enrollment-counts_overdue",parent_id:"enrollment_counts",sub_id:"overdue",dataType:"int"},{alias:"Has Been Unpublished",id:"has_been_unpublished",dataType:"bool"},{alias:"Is Archived",id:"is_archived",dataType:"bool"},{alias:"Is Published",id:"is_published",dataType:"bool"},{alias:"Passing Threshold",id:"passing_threshold",dataType:"int"},{alias:"Quizzes Count",id:"quizzes_count",dataType:"int"},{alias:"Uses Bridge Retain",id:"retain",dataType:"bool"},{alias:"Updated At",id:"updated_at",dataType:"datetime"}]},path:"/api/author/course_templates",data:"course_templates",parameters:[{name:"Sort",parameter:"sort",type:"options",default:"Default",options:[{name:"Newest",value:"newest"},{name:"Title",value:"title"},{name:"Updated",value:"updated"},{name:"Archived",value:"archived"}]},{name:"Search",parameter:"search",type:"string",placeholder:"search terms"},{name:"Only Deleted",parameter:"only_deleted",type:"boolean"},{name:"Include Deleted",parameter:"with_deleted",type:"boolean"},{name:"Role",parameter:"role",type:"options",default:"Any",options:[{name:"Account Admin",value:"account_admin"},{name:"Admin",value:"admin"},{name:"Author",value:"author"}]},{name:"Updated After",parameter:"updated_after",type:"date"},{name:"Created After",parameter:"created_after",type:"date"},{name:"Deleted After",parameter:"deleted_after",type:"date"},{name:"Updated Before",parameter:"updated_before",type:"date"},{name:"Created Before",parameter:"created_before",type:"date"},{name:"Deleted Before",parameter:"deleted_before",type:"date"}]}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.groups=void 0;t.groups={authorGroups:{table:{id:"authorGroups",alias:"List Groups",columns:[{alias:"Group ID",id:"id",dataType:"int"},{alias:"Group Name",id:"name",dataType:"string"}]},path:"/api/author/groups",data:"groups"}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.listEnrollments=void 0;t.listEnrollments={authorListEnrollments:{table:{id:"authorListEnrollments",alias:"Specific Course Enrollments",columns:[{alias:"Enrollment ID",id:"id",dataType:"int"},{alias:"Course ID",id:"course_template",dataType:"int"},{alias:"Due At",id:"end_at",dataType:"datetime"},{alias:"Expire At",id:"expires_at",dataType:"datetime"},{alias:"Completed At",id:"completed_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Course Progress",id:"progress",dataType:"float"},{alias:"Is Removable",id:"can_be_removed",dataType:"bool"},{alias:"Is Able To Be Optional",id:"can_be_made_optional",dataType:"bool"},{alias:"Is Active",id:"active",dataType:"bool"},{alias:"Is Required",id:"required",dataType:"bool"},{alias:"Is Permanently Failed",id:"is_permanently_failed",dataType:"bool"},{alias:"Is Archived",id:"is_archived",dataType:"bool"},{alias:"Score",id:"score",dataType:"int"},{alias:"Enrollment Status",id:"state",dataType:"string"},{alias:"Can Re-Enroll",id:"allow_re_enroll",dataType:"bool"},{alias:"Name",id:"name",linkedSource:"learner",linkedId:"name",dataType:"string"},{alias:"User ID",id:"user_id",linkedSource:"learner",linkedId:"id",dataType:"int"}]},path:"/api/author/course_templates/*/enrollments",data:"enrollments",requiredParameter:{title:"Course",path:"/api/author/course_templates",data:"course_templates",nameCol:"title",valCol:"id"}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.listProgramLearners=void 0;t.listProgramLearners={authorListProgramLearners:{table:{id:"authorListProgramLearners",alias:"Specific Program Learners",columns:[{alias:"User ID",id:"id",dataType:"int"},{alias:"Name",id:"name",dataType:"string"}]},path:"/api/author/programs/*/learners",data:"learners",requiredParameter:{title:"Program",path:"/api/author/programs",data:"programs",nameCol:"title",valCol:"id"}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.liveCourseSessions=void 0;t.liveCourseSessions={authorLiveCourseSessions:{table:{id:"authorLiveCourseSessions",alias:"Specific Live Course Sessions",columns:[{alias:"Live Course Session ID",id:"id",dataType:"int"},{alias:"Start At",id:"start_at",dataType:"datetime"},{alias:"End At",id:"end_at",dataType:"datetime"},{alias:"Location",id:"location",dataType:"string"},{alias:"Number of Seats",id:"seats",dataType:"int"}]},path:"/api/author/live_courses/*/sessions",data:"sessions",requiredParameter:{title:"Live Course",path:"/api/author/live_courses",data:"live_courses",nameCol:"title",valCol:"id"}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.liveCourses=void 0;t.liveCourses={authorLiveCourses:{table:{id:"authorLiveCourses",alias:"List Live Courses",columns:[{alias:"Live Course ID",id:"id",dataType:"int"},{alias:"Live Course Title",id:"title",dataType:"string"}]},path:"/api/author/live_courses",data:"live_courses"}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.programs=void 0;t.programs={authorPrograms:{table:{id:"authorPrograms",alias:"List Programs",columns:[{alias:"Program ID",id:"id",dataType:"int"},{alias:"Program Title",id:"title",dataType:"string"},{alias:"Course Count",id:"course_count",dataType:"int"},{alias:"Created At",id:"created_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Deleted At",id:"deleted_at",dataType:"datetime"},{alias:"Number of Courses",id:"course_count",dataType:"int"},{alias:"Number of Items",id:"item_count",dataType:"int"},{alias:"Unfinished Learners",id:"unfinished_learners_count",dataType:"int"},{alias:"Is Published",id:"is_published",dataType:"bool"},{alias:"Able to be Published",id:"publishable",dataType:"bool"},{alias:"Has Unpublished Changes",id:"has_unpublished_changes",dataType:"bool"},{alias:"Has Step Notifications",id:"step_notifications",dataType:"bool"},{alias:"Has Certificate",id:"has_certificate",dataType:"bool"},{alias:"Has Shared Enrollments",id:"has_shared_enrollments",dataType:"bool"},{alias:"Number of Unfinished Learners",id:"unfinished_learners_count",dataType:"int"},{alias:"Due Date Type",id:"due_date_type",dataType:"string"},{alias:"Default Due on Date",id:"default_due_on_date",dataType:"datetime"},{alias:"Default Days Until Due",id:"default_days_until_due",dataType:"int"}]},path:"/api/author/programs",data:"programs"}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.taggedItems=void 0;t.taggedItems={authorTaggedItems:{table:{id:"authorTaggedItems",alias:"Tagged Items",columns:[{alias:"Item ID",id:"id",dataType:"int"},{alias:"Tag ID",id:"tag_id",dataType:"int"},{alias:"Taggable Type",id:"taggable_type",dataType:"string"},{alias:"Item Title",id:"item-title",parent_id:"data",sub_id:"title",dataType:"string"}]},path:"/api/author/tags/*/taggings",data:"taggings",requiredParameter:{title:"Tag",path:"/api/author/tags",data:"tags",nameCol:"name",valCol:"id"}}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tags=void 0;t.tags={authorTags:{table:{id:"authorTags",alias:"List Tags",columns:[{alias:"Tag ID",id:"id",dataType:"int"},{alias:"Tag Name",id:"name",dataType:"string"}]},path:"/api/author/tags",data:"tags"}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tasks=void 0;t.tasks={authorTasks:{table:{id:"authorTasks",alias:"List Checkpoints",columns:[{alias:"Checkpoint ID",id:"id",dataType:"int"},{alias:"Checkpoint Title",id:"namr",dataType:"string"}]},path:"/api/author/tasks",data:"tasks"}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.users=void 0;t.users={authorUser:{table:{id:"authorUser",alias:"List Users",columns:[{alias:"User ID",id:"id",dataType:"int"},{alias:"Unique Login ID",id:"uid",dataType:"string"},{alias:"First Name",id:"first_name",dataType:"string"},{alias:"Last Name",id:"last_name",dataType:"string"},{alias:"Language",id:"locale",dataType:"string"},{alias:"Email Address",id:"email",dataType:"string"},{alias:"Full Name",id:"name",dataType:"string"},{alias:"Deleted At",id:"deleted_at",dataType:"datetime"},{alias:"Updated At",id:"updated_at",dataType:"datetime"},{alias:"Unsubscribed from Emails",id:"unsubscribed",dataType:"bool"},{alias:"Hire Date",id:"hire_date",dataType:"date"},{alias:"Job Title",id:"job_title",dataType:"string"},{alias:"Sortable Name",id:"sortable_name",dataType:"string"},{alias:"Department",id:"department",dataType:"string"}]},path:"/api/author/users",data:"users",parameters:[{name:"Sort",parameter:"sort",type:"options",default:"Default",options:[{name:"Name",value:"name"},{name:"Number of Completed Courses",value:"complete_courses_count"},{name:"Next Due Date",value:"next_due_date"}]},{name:"Search",parameter:"search",type:"string",placeholder:"search terms"},{name:"Only Deleted",parameter:"only_deleted",type:"boolean"},{name:"Include Deleted",parameter:"with_deleted",type:"boolean"},{name:"Role",parameter:"role",type:"options",default:"Any",options:[{name:"Account Admin",value:"account_admin"},{name:"Admin",value:"admin"},{name:"Author",value:"author"}]},{name:"Updated After",parameter:"updated_after",type:"date"},{name:"Created After",parameter:"created_after",type:"date"},{name:"Deleted After",parameter:"deleted_after",type:"date"},{name:"Updated Before",parameter:"updated_before",type:"date"},{name:"Created Before",parameter:"created_before",type:"date"},{name:"Deleted Before",parameter:"deleted_before",type:"date"},{name:"Only Managers",parameter:"only_managers",type:"boolean"}]}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(1),n=function(){function e(e){this.myConnector=tableau.makeConnector(),this.myTables={};var t=this;this.myConnector.init=function(e){tableau.log("init"),tableau.authType=tableau.authTypeEnum.custom,e()},this.myConnector.getSchema=function(e){tableau.log("getSchema");for(var a=[],n=1,i=0,o=JSON.parse(tableau.connectionData).tables;i<o.length;i++){var s=o[i],l=s.apiCall,u=JSON.parse(JSON.stringify(r.tables[l])),d="table"+n;u.table.alias=s.title,u.table.id=d;n=n+1;if("requiredParameter"in s){var p=u.path.replace("*",s.requiredParameter);u.path=p}if("optionalParameters"in s){p=u.path+"?"+s.optionalParameters;u.path=p}t.myTables[d]=u,a.push(u.table)}e(a)},this.myConnector.getData=function(a,r){tableau.log("getData");var n=JSON.parse(tableau.connectionData),i=a.tableInfo.id,o=t.myTables[i].path,s=new URL(o,n.url);e(a,r,s,t.myTables,tableau.password)},tableau.registerConnector(this.myConnector)}return e.prototype.getApiKey=function(){return tableau.password},e.prototype.setApiKey=function(e){tableau.password=e},e.prototype.setConnectionData=function(e){tableau.connectionData=e},e.prototype.setConnectionName=function(e){tableau.connectionName=e},e.prototype.tableauSubmit=function(){tableau.submit()},e}();t.default=n},function(e,t,a){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.performApiCall=t.addRow=t.setUrl=void 0;var i=n(a(2));function o(e,t){var a;return a={},{apiCall:new URL(e),headers:r(r({},{Authorization:t,"Content-Type":"application/json",Accept:"application/json"}),a)}}function s(e,t,a){for(var r=t[e.tableInfo.id],n=a[r.data],i=[],o=0,s=n.length;o<s;o++){for(var l={},u=0,d=r.table.columns;u<d.length;u++){var p=d[u];if("linkedSource"in p){var c=p.id,f=p.linkedSource,m=p.linkedId,h=n[o].links[f].id,y=n[o].links[f].type,v=a.linked[y].filter((function(e){return e.id===h}));1==v.length?l[c]=v[0][m]:l[c]=null}else if("parent_id"in p){h=p.id;var b=p.parent_id,g=p.sub_id;l[h]=n[o][b][g]}else{l[h=p.id]=n[o][h]}}i.push(l)}e.appendRows(i)}t.setUrl=o,t.addRow=s,t.performApiCall=function e(t,a,r,n,l){var u=o(r,l);console.log(r),i.default({method:"get",url:u.apiCall,headers:u.headers}).then((function(r){var i=r.data;s(t,n,i),i.meta.hasOwnProperty("next")?e(t,a,i.meta.next,n,l):a()})).catch((function(e){console.log(e),a()}))}},function(e,t,a){"use strict";var r=a(0),n=a(3),i=a(26),o=a(9);function s(e){var t=new i(e),a=n(i.prototype.request,t);return r.extend(a,i.prototype,t),r.extend(a,t),a}var l=s(a(6));l.Axios=i,l.create=function(e){return s(o(l.defaults,e))},l.Cancel=a(10),l.CancelToken=a(40),l.isCancel=a(5),l.all=function(e){return Promise.all(e)},l.spread=a(41),e.exports=l,e.exports.default=l},function(e,t,a){"use strict";var r=a(0),n=a(4),i=a(27),o=a(28),s=a(9);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[o,void 0],a=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)a=a.then(t.shift(),t.shift());return a},l.prototype.getUri=function(e){return e=s(this.defaults,e),n(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,a){return this.request(r.merge(a||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,a,n){return this.request(r.merge(n||{},{method:e,url:t,data:a}))}})),e.exports=l},function(e,t,a){"use strict";var r=a(0);function n(){this.handlers=[]}n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=n},function(e,t,a){"use strict";var r=a(0),n=a(29),i=a(5),o=a(6);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=n(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||o.adapter)(e).then((function(t){return s(e),t.data=n(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=n(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,a){"use strict";var r=a(0);e.exports=function(e,t,a){return r.forEach(a,(function(a){e=a(e,t)})),e}},function(e,t){var a,r,n=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(a===setTimeout)return setTimeout(e,0);if((a===i||!a)&&setTimeout)return a=setTimeout,setTimeout(e,0);try{return a(e,0)}catch(t){try{return a.call(null,e,0)}catch(t){return a.call(this,e,0)}}}!function(){try{a="function"==typeof setTimeout?setTimeout:i}catch(e){a=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var l,u=[],d=!1,p=-1;function c(){d&&l&&(d=!1,l.length?u=l.concat(u):p=-1,u.length&&f())}function f(){if(!d){var e=s(c);d=!0;for(var t=u.length;t;){for(l=u,u=[];++p<t;)l&&l[p].run();p=-1,t=u.length}l=null,d=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var a=1;a<arguments.length;a++)t[a-1]=arguments[a];u.push(new m(e,t)),1!==u.length||d||s(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=h,n.addListener=h,n.once=h,n.off=h,n.removeListener=h,n.removeAllListeners=h,n.emit=h,n.prependListener=h,n.prependOnceListener=h,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},function(e,t,a){"use strict";var r=a(0);e.exports=function(e,t){r.forEach(e,(function(a,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=a,delete e[r])}))}},function(e,t,a){"use strict";var r=a(8);e.exports=function(e,t,a){var n=a.config.validateStatus;!n||n(a.status)?e(a):t(r("Request failed with status code "+a.status,a.config,null,a.request,a))}},function(e,t,a){"use strict";e.exports=function(e,t,a,r,n){return e.config=t,a&&(e.code=a),e.request=r,e.response=n,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,a){"use strict";var r=a(35),n=a(36);e.exports=function(e,t){return e&&!r(t)?n(e,t):t}},function(e,t,a){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,a){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,a){"use strict";var r=a(0),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,a,i,o={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),a=r.trim(e.substr(i+1)),t){if(o[t]&&n.indexOf(t)>=0)return;o[t]="set-cookie"===t?(o[t]?o[t]:[]).concat([a]):o[t]?o[t]+", "+a:a}})),o):o}},function(e,t,a){"use strict";var r=a(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),a=document.createElement("a");function n(e){var r=e;return t&&(a.setAttribute("href",r),r=a.href),a.setAttribute("href",r),{href:a.href,protocol:a.protocol?a.protocol.replace(/:$/,""):"",host:a.host,search:a.search?a.search.replace(/^\?/,""):"",hash:a.hash?a.hash.replace(/^#/,""):"",hostname:a.hostname,port:a.port,pathname:"/"===a.pathname.charAt(0)?a.pathname:"/"+a.pathname}}return e=n(window.location.href),function(t){var a=r.isString(t)?n(t):t;return a.protocol===e.protocol&&a.host===e.host}}():function(){return!0}},function(e,t,a){"use strict";var r=a(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,a,n,i,o){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(a)&&s.push("expires="+new Date(a).toGMTString()),r.isString(n)&&s.push("path="+n),r.isString(i)&&s.push("domain="+i),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,a){"use strict";var r=a(10);function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var a=this;e((function(e){a.reason||(a.reason=new r(e),t(a.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n((function(t){e=t})),cancel:e}},e.exports=n},function(e,t,a){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,